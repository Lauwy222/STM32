
Week11V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800414c  0800414c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004154  08004154  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800415c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000005c  080041b8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080041b8  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e04e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d62  00000000  00000000  0002e11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  0002fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae2  00000000  00000000  00030c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220d6  00000000  00000000  0003173a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010702  00000000  00000000  00053810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2268  00000000  00000000  00063f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fec  00000000  00000000  0013617c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0013a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080040c4 	.word	0x080040c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080040c4 	.word	0x080040c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fbbf 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f8bb 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f9d3 	bl	8000964 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f9a7 	bl	8000910 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005c2:	f000 f923 	bl	800080c <MX_SPI1_Init>
  MX_TIM2_Init();
 80005c6:	f000 f957 	bl	8000878 <MX_TIM2_Init>
//     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 	  int i =0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]

 	 spi_buf[0] = 0xAB;
 80005ce:	4b4c      	ldr	r3, [pc, #304]	; (8000700 <main+0x154>)
 80005d0:	22ab      	movs	r2, #171	; 0xab
 80005d2:	701a      	strb	r2, [r3, #0]
 	      spi_buf[1] = 0xCD;
 80005d4:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <main+0x154>)
 80005d6:	22cd      	movs	r2, #205	; 0xcd
 80005d8:	705a      	strb	r2, [r3, #1]
 	      spi_buf[2] = 0xEF;
 80005da:	4b49      	ldr	r3, [pc, #292]	; (8000700 <main+0x154>)
 80005dc:	22ef      	movs	r2, #239	; 0xef
 80005de:	709a      	strb	r2, [r3, #2]

 	      addr = 0x00;
 80005e0:	4b48      	ldr	r3, [pc, #288]	; (8000704 <main+0x158>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]

 	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	4847      	ldr	r0, [pc, #284]	; (8000708 <main+0x15c>)
 80005ec:	f000 fe8e 	bl	800130c <HAL_GPIO_WritePin>
 	         HAL_SPI_Transmit(&hspi1, (uint8_t *) &EEPROM_WRITE, 1, HAL_MAX_DELAY);
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	2201      	movs	r2, #1
 80005f6:	4945      	ldr	r1, [pc, #276]	; (800070c <main+0x160>)
 80005f8:	4845      	ldr	r0, [pc, #276]	; (8000710 <main+0x164>)
 80005fa:	f001 fd12 	bl	8002022 <HAL_SPI_Transmit>
 	         HAL_SPI_Transmit(&hspi1, (uint8_t *) &addr, 1, HAL_MAX_DELAY);
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	2201      	movs	r2, #1
 8000604:	493f      	ldr	r1, [pc, #252]	; (8000704 <main+0x158>)
 8000606:	4842      	ldr	r0, [pc, #264]	; (8000710 <main+0x164>)
 8000608:	f001 fd0b 	bl	8002022 <HAL_SPI_Transmit>
 	         HAL_SPI_Transmit(&hspi1, (uint8_t *) spi_buf, 3, HAL_MAX_DELAY);
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	2203      	movs	r2, #3
 8000612:	493b      	ldr	r1, [pc, #236]	; (8000700 <main+0x154>)
 8000614:	483e      	ldr	r0, [pc, #248]	; (8000710 <main+0x164>)
 8000616:	f001 fd04 	bl	8002022 <HAL_SPI_Transmit>
 	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	483a      	ldr	r0, [pc, #232]	; (8000708 <main+0x15c>)
 8000620:	f000 fe74 	bl	800130c <HAL_GPIO_WritePin>

 	        wip = 1;
 8000624:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <main+0x168>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
 	           while (wip)
 800062a:	e01e      	b.n	800066a <main+0xbe>
 	           {
 	             // Read status register
 	             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	4835      	ldr	r0, [pc, #212]	; (8000708 <main+0x15c>)
 8000632:	f000 fe6b 	bl	800130c <HAL_GPIO_WritePin>
 	             HAL_SPI_Transmit(&hspi1, (uint8_t *) &EEPROM_RDSR, 1, HAL_MAX_DELAY);
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2201      	movs	r2, #1
 800063c:	4936      	ldr	r1, [pc, #216]	; (8000718 <main+0x16c>)
 800063e:	4834      	ldr	r0, [pc, #208]	; (8000710 <main+0x164>)
 8000640:	f001 fcef 	bl	8002022 <HAL_SPI_Transmit>
 	             HAL_SPI_Receive(&hspi1, (uint8_t *) spi_buf, 1, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2201      	movs	r2, #1
 800064a:	492d      	ldr	r1, [pc, #180]	; (8000700 <main+0x154>)
 800064c:	4830      	ldr	r0, [pc, #192]	; (8000710 <main+0x164>)
 800064e:	f001 fe24 	bl	800229a <HAL_SPI_Receive>
 	             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	482c      	ldr	r0, [pc, #176]	; (8000708 <main+0x15c>)
 8000658:	f000 fe58 	bl	800130c <HAL_GPIO_WritePin>

 	             // Mask out WIP bit
 	             wip = spi_buf[0] & 0b00000001;
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <main+0x154>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <main+0x168>)
 8000668:	701a      	strb	r2, [r3, #0]
 	           while (wip)
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <main+0x168>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1dc      	bne.n	800062c <main+0x80>
 	           }

 	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	4824      	ldr	r0, [pc, #144]	; (8000708 <main+0x15c>)
 8000678:	f000 fe48 	bl	800130c <HAL_GPIO_WritePin>
 	             HAL_SPI_Transmit(&hspi1, (uint8_t *) &EEPROM_READ, 1, HAL_MAX_DELAY);
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	2201      	movs	r2, #1
 8000682:	4926      	ldr	r1, [pc, #152]	; (800071c <main+0x170>)
 8000684:	4822      	ldr	r0, [pc, #136]	; (8000710 <main+0x164>)
 8000686:	f001 fccc 	bl	8002022 <HAL_SPI_Transmit>
 	             HAL_SPI_Transmit(&hspi1, (uint8_t *) &addr, 1, HAL_MAX_DELAY);
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	491c      	ldr	r1, [pc, #112]	; (8000704 <main+0x158>)
 8000692:	481f      	ldr	r0, [pc, #124]	; (8000710 <main+0x164>)
 8000694:	f001 fcc5 	bl	8002022 <HAL_SPI_Transmit>
 	             HAL_SPI_Receive(&hspi1, (uint8_t *) spi_buf, 3, HAL_MAX_DELAY);
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	2203      	movs	r2, #3
 800069e:	4918      	ldr	r1, [pc, #96]	; (8000700 <main+0x154>)
 80006a0:	481b      	ldr	r0, [pc, #108]	; (8000710 <main+0x164>)
 80006a2:	f001 fdfa 	bl	800229a <HAL_SPI_Receive>
 	             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	4817      	ldr	r0, [pc, #92]	; (8000708 <main+0x15c>)
 80006ac:	f000 fe2e 	bl	800130c <HAL_GPIO_WritePin>

 	            for(int j=0; j<3; j++){
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	e017      	b.n	80006e6 <main+0x13a>
 	             	  	  uart_buf_len = sprintf(uart_buf, "ADDR: 0x%02x  Buffr: 0x%02x\r\n",j , (unsigned int) spi_buf[j]);
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <main+0x154>)
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4917      	ldr	r1, [pc, #92]	; (8000720 <main+0x174>)
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <main+0x178>)
 80006c4:	f003 f85a 	bl	800377c <siprintf>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <main+0x17c>)
 80006cc:	6013      	str	r3, [r2, #0]
 	             	  	  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <main+0x17c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	4912      	ldr	r1, [pc, #72]	; (8000724 <main+0x178>)
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <main+0x180>)
 80006dc:	f002 fcd9 	bl	8003092 <HAL_UART_Transmit>
 	            for(int j=0; j<3; j++){
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	dde4      	ble.n	80006b6 <main+0x10a>
    /* USER CODE END WHILE */
	  //Lezen

	  //Printen

	  i++;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
	  if(i==16){i=0;}
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b10      	cmp	r3, #16
 80006f6:	d1f9      	bne.n	80006ec <main+0x140>
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
	  i++;
 80006fc:	e7f6      	b.n	80006ec <main+0x140>
 80006fe:	bf00      	nop
 8000700:	20000194 	.word	0x20000194
 8000704:	200001a8 	.word	0x200001a8
 8000708:	40020400 	.word	0x40020400
 800070c:	080040fb 	.word	0x080040fb
 8000710:	20000078 	.word	0x20000078
 8000714:	200001a9 	.word	0x200001a9
 8000718:	080040fc 	.word	0x080040fc
 800071c:	080040fa 	.word	0x080040fa
 8000720:	080040dc 	.word	0x080040dc
 8000724:	2000015c 	.word	0x2000015c
 8000728:	20000190 	.word	0x20000190
 800072c:	20000118 	.word	0x20000118

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 f83c 	bl	80037bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a29      	ldr	r2, [pc, #164]	; (8000804 <SystemClock_Config+0xd4>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <SystemClock_Config+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <SystemClock_Config+0xd8>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a4:	2310      	movs	r3, #16
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f908 	bl	80019d4 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ca:	f000 f939 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fda8 	bl	8001340 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007f6:	f000 f923 	bl	8000a40 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_SPI1_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <MX_SPI1_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_SPI1_Init+0x64>)
 8000818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_SPI1_Init+0x64>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_SPI1_Init+0x64>)
 8000840:	2220      	movs	r2, #32
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_SPI1_Init+0x64>)
 8000858:	220a      	movs	r2, #10
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_SPI1_Init+0x64>)
 800085e:	f001 fb57 	bl	8001f10 <HAL_SPI_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 f8ea 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000078 	.word	0x20000078
 8000874:	40013000 	.word	0x40013000

08000878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	463b      	mov	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_TIM2_Init+0x94>)
 8000896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_TIM2_Init+0x94>)
 800089e:	2220      	movs	r2, #32
 80008a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM2_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_TIM2_Init+0x94>)
 80008aa:	f04f 32ff 	mov.w	r2, #4294967295
 80008ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_TIM2_Init+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_TIM2_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008bc:	4813      	ldr	r0, [pc, #76]	; (800090c <MX_TIM2_Init+0x94>)
 80008be:	f002 f8cf 	bl	8002a60 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c8:	f000 f8ba 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_TIM2_Init+0x94>)
 80008da:	f002 f910 	bl	8002afe <HAL_TIM_ConfigClockSource>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008e4:	f000 f8ac 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_TIM2_Init+0x94>)
 80008f6:	f002 fb03 	bl	8002f00 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000900:	f000 f89e 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000d0 	.word	0x200000d0

08000910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_USART2_UART_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_USART2_UART_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000948:	f002 fb56 	bl	8002ff8 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f000 f875 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000118 	.word	0x20000118
 8000960:	40004400 	.word	0x40004400

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a2c      	ldr	r2, [pc, #176]	; (8000a34 <MX_GPIO_Init+0xd0>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a25      	ldr	r2, [pc, #148]	; (8000a34 <MX_GPIO_Init+0xd0>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <MX_GPIO_Init+0xd0>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <MX_GPIO_Init+0xd0>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009f0:	f000 fc8c 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_GPIO_Init+0xd8>)
 8000a0c:	f000 faea 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a10:	2340      	movs	r3, #64	; 0x40
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000a28:	f000 fadc 	bl	8000fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40020800 	.word	0x40020800

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a8a:	2007      	movs	r0, #7
 8000a8c:	f000 fa76 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800

08000a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_SPI_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12b      	bne.n	8000b16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_SPI_MspInit+0x88>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <HAL_SPI_MspInit+0x88>)
 8000ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_SPI_MspInit+0x88>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_SPI_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_SPI_MspInit+0x88>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_SPI_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000af6:	23e0      	movs	r3, #224	; 0xe0
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b06:	2305      	movs	r3, #5
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_SPI_MspInit+0x8c>)
 8000b12:	f000 fa67 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40013000 	.word	0x40013000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b3c:	d10d      	bne.n	8000b5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_UART_MspInit+0x84>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12b      	bne.n	8000be6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_UART_MspInit+0x8c>)
 8000be2:	f000 f9ff 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40004400 	.word	0x40004400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f8c6 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f002 fda4 	bl	80037cc <__errno>
 8000c84:	4603      	mov	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <_sbrk+0x64>)
 8000ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20020000 	.word	0x20020000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	200001ac 	.word	0x200001ac
 8000cb8:	20000300 	.word	0x20000300

08000cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cfc:	4c0b      	ldr	r4, [pc, #44]	; (8000d2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d0a:	f7ff ffd7 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f002 fd63 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fc4b 	bl	80005ac <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d24:	0800415c 	.word	0x0800415c
  ldr r2, =_sbss
 8000d28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d2c:	200002fc 	.word	0x200002fc

08000d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <HAL_Init+0x40>)
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_Init+0x40>)
 8000d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_Init+0x40>)
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f90d 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f808 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff fe70 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f917 	bl	8000fca <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 f8ed 	bl	8000f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	200001b0 	.word	0x200001b0

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200001b0 	.word	0x200001b0

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff47 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff5c 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff8e 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffb0 	bl	8000f38 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e165      	b.n	80012cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8154 	bne.w	80012c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80ae 	beq.w	80012c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <HAL_GPIO_Init+0x300>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a5c      	ldr	r2, [pc, #368]	; (80012e4 <HAL_GPIO_Init+0x300>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b5a      	ldr	r3, [pc, #360]	; (80012e4 <HAL_GPIO_Init+0x300>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001186:	4a58      	ldr	r2, [pc, #352]	; (80012e8 <HAL_GPIO_Init+0x304>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x308>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <HAL_GPIO_Init+0x310>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x20a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x206>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a49      	ldr	r2, [pc, #292]	; (8001304 <HAL_GPIO_Init+0x320>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x202>
 80011e2:	2306      	movs	r3, #6
 80011e4:	e00c      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011e6:	2307      	movs	r3, #7
 80011e8:	e00a      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011fe:	2300      	movs	r3, #0
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <HAL_GPIO_Init+0x304>)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121e:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001242:	4a31      	ldr	r2, [pc, #196]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <HAL_GPIO_Init+0x324>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800126c:	4a26      	ldr	r2, [pc, #152]	; (8001308 <HAL_GPIO_Init+0x324>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_GPIO_Init+0x324>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_GPIO_Init+0x324>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	f67f ae96 	bls.w	8001000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021400 	.word	0x40021400
 8001304:	40021800 	.word	0x40021800
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0cc      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001354:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d90c      	bls.n	800137c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0b8      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001394:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800139e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4a52      	ldr	r2, [pc, #328]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	494d      	ldr	r1, [pc, #308]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d044      	beq.n	8001460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d119      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e07f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d003      	beq.n	80013fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e06f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e067      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f023 0203 	bic.w	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4934      	ldr	r1, [pc, #208]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff fce6 	bl	8000e00 <HAL_GetTick>
 8001434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	e00a      	b.n	800144e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001438:	f7ff fce2 	bl	8000e00 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e04f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 020c 	and.w	r2, r3, #12
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d1eb      	bne.n	8001438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d20c      	bcs.n	8001488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e032      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4916      	ldr	r1, [pc, #88]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	490e      	ldr	r1, [pc, #56]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014c6:	f000 f855 	bl	8001574 <HAL_RCC_GetSysClockFreq>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	490a      	ldr	r1, [pc, #40]	; (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	5ccb      	ldrb	r3, [r1, r3]
 80014da:	fa22 f303 	lsr.w	r3, r2, r3
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_ClockConfig+0x1c8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc46 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023c00 	.word	0x40023c00
 80014fc:	40023800 	.word	0x40023800
 8001500:	08004100 	.word	0x08004100
 8001504:	20000000 	.word	0x20000000
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_RCC_GetHCLKFreq+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000000 	.word	0x20000000

08001524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001528:	f7ff fff0 	bl	800150c <HAL_RCC_GetHCLKFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	0a9b      	lsrs	r3, r3, #10
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4903      	ldr	r1, [pc, #12]	; (8001548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	08004110 	.word	0x08004110

0800154c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001550:	f7ff ffdc 	bl	800150c <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	0b5b      	lsrs	r3, r3, #13
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	4903      	ldr	r1, [pc, #12]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	08004110 	.word	0x08004110

08001574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001578:	b0ae      	sub	sp, #184	; 0xb8
 800157a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800159a:	4bcb      	ldr	r3, [pc, #812]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	f200 8206 	bhi.w	80019b4 <HAL_RCC_GetSysClockFreq+0x440>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015e5 	.word	0x080015e5
 80015b4:	080019b5 	.word	0x080019b5
 80015b8:	080019b5 	.word	0x080019b5
 80015bc:	080019b5 	.word	0x080019b5
 80015c0:	080015ed 	.word	0x080015ed
 80015c4:	080019b5 	.word	0x080019b5
 80015c8:	080019b5 	.word	0x080019b5
 80015cc:	080019b5 	.word	0x080019b5
 80015d0:	080015f5 	.word	0x080015f5
 80015d4:	080019b5 	.word	0x080019b5
 80015d8:	080019b5 	.word	0x080019b5
 80015dc:	080019b5 	.word	0x080019b5
 80015e0:	080017e5 	.word	0x080017e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4bb9      	ldr	r3, [pc, #740]	; (80018cc <HAL_RCC_GetSysClockFreq+0x358>)
 80015e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80015ea:	e1e7      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ec:	4bb8      	ldr	r3, [pc, #736]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015f2:	e1e3      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f4:	4bb4      	ldr	r3, [pc, #720]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001600:	4bb1      	ldr	r3, [pc, #708]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d071      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160c:	4bae      	ldr	r3, [pc, #696]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	2200      	movs	r2, #0
 8001614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001618:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800161c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800162e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001632:	4622      	mov	r2, r4
 8001634:	462b      	mov	r3, r5
 8001636:	f04f 0000 	mov.w	r0, #0
 800163a:	f04f 0100 	mov.w	r1, #0
 800163e:	0159      	lsls	r1, r3, #5
 8001640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001644:	0150      	lsls	r0, r2, #5
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4621      	mov	r1, r4
 800164c:	1a51      	subs	r1, r2, r1
 800164e:	6439      	str	r1, [r7, #64]	; 0x40
 8001650:	4629      	mov	r1, r5
 8001652:	eb63 0301 	sbc.w	r3, r3, r1
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001664:	4649      	mov	r1, r9
 8001666:	018b      	lsls	r3, r1, #6
 8001668:	4641      	mov	r1, r8
 800166a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800166e:	4641      	mov	r1, r8
 8001670:	018a      	lsls	r2, r1, #6
 8001672:	4641      	mov	r1, r8
 8001674:	1a51      	subs	r1, r2, r1
 8001676:	63b9      	str	r1, [r7, #56]	; 0x38
 8001678:	4649      	mov	r1, r9
 800167a:	eb63 0301 	sbc.w	r3, r3, r1
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800168c:	4649      	mov	r1, r9
 800168e:	00cb      	lsls	r3, r1, #3
 8001690:	4641      	mov	r1, r8
 8001692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001696:	4641      	mov	r1, r8
 8001698:	00ca      	lsls	r2, r1, #3
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	4622      	mov	r2, r4
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
 80016a6:	462b      	mov	r3, r5
 80016a8:	460a      	mov	r2, r1
 80016aa:	eb42 0303 	adc.w	r3, r2, r3
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016bc:	4629      	mov	r1, r5
 80016be:	024b      	lsls	r3, r1, #9
 80016c0:	4621      	mov	r1, r4
 80016c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016c6:	4621      	mov	r1, r4
 80016c8:	024a      	lsls	r2, r1, #9
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80016e0:	f7fe fde6 	bl	80002b0 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4613      	mov	r3, r2
 80016ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016ee:	e067      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f0:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	2200      	movs	r2, #0
 80016f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001708:	67bb      	str	r3, [r7, #120]	; 0x78
 800170a:	2300      	movs	r3, #0
 800170c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800170e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001712:	4622      	mov	r2, r4
 8001714:	462b      	mov	r3, r5
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0159      	lsls	r1, r3, #5
 8001720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001724:	0150      	lsls	r0, r2, #5
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4621      	mov	r1, r4
 800172c:	1a51      	subs	r1, r2, r1
 800172e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001730:	4629      	mov	r1, r5
 8001732:	eb63 0301 	sbc.w	r3, r3, r1
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001744:	4649      	mov	r1, r9
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	4641      	mov	r1, r8
 800174a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174e:	4641      	mov	r1, r8
 8001750:	018a      	lsls	r2, r1, #6
 8001752:	4641      	mov	r1, r8
 8001754:	ebb2 0a01 	subs.w	sl, r2, r1
 8001758:	4649      	mov	r1, r9
 800175a:	eb63 0b01 	sbc.w	fp, r3, r1
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800176a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800176e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001772:	4692      	mov	sl, r2
 8001774:	469b      	mov	fp, r3
 8001776:	4623      	mov	r3, r4
 8001778:	eb1a 0303 	adds.w	r3, sl, r3
 800177c:	623b      	str	r3, [r7, #32]
 800177e:	462b      	mov	r3, r5
 8001780:	eb4b 0303 	adc.w	r3, fp, r3
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001792:	4629      	mov	r1, r5
 8001794:	028b      	lsls	r3, r1, #10
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179c:	4621      	mov	r1, r4
 800179e:	028a      	lsls	r2, r1, #10
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017a8:	2200      	movs	r2, #0
 80017aa:	673b      	str	r3, [r7, #112]	; 0x70
 80017ac:	677a      	str	r2, [r7, #116]	; 0x74
 80017ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017b2:	f7fe fd7d 	bl	80002b0 <__aeabi_uldivmod>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4613      	mov	r3, r2
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c0:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	3301      	adds	r3, #1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80017d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017e2:	e0eb      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d06b      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	2200      	movs	r2, #0
 8001804:	66bb      	str	r3, [r7, #104]	; 0x68
 8001806:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800180a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180e:	663b      	str	r3, [r7, #96]	; 0x60
 8001810:	2300      	movs	r3, #0
 8001812:	667b      	str	r3, [r7, #100]	; 0x64
 8001814:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001818:	4622      	mov	r2, r4
 800181a:	462b      	mov	r3, r5
 800181c:	f04f 0000 	mov.w	r0, #0
 8001820:	f04f 0100 	mov.w	r1, #0
 8001824:	0159      	lsls	r1, r3, #5
 8001826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182a:	0150      	lsls	r0, r2, #5
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4621      	mov	r1, r4
 8001832:	1a51      	subs	r1, r2, r1
 8001834:	61b9      	str	r1, [r7, #24]
 8001836:	4629      	mov	r1, r5
 8001838:	eb63 0301 	sbc.w	r3, r3, r1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800184a:	4659      	mov	r1, fp
 800184c:	018b      	lsls	r3, r1, #6
 800184e:	4651      	mov	r1, sl
 8001850:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001854:	4651      	mov	r1, sl
 8001856:	018a      	lsls	r2, r1, #6
 8001858:	4651      	mov	r1, sl
 800185a:	ebb2 0801 	subs.w	r8, r2, r1
 800185e:	4659      	mov	r1, fp
 8001860:	eb63 0901 	sbc.w	r9, r3, r1
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001870:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001874:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001878:	4690      	mov	r8, r2
 800187a:	4699      	mov	r9, r3
 800187c:	4623      	mov	r3, r4
 800187e:	eb18 0303 	adds.w	r3, r8, r3
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	462b      	mov	r3, r5
 8001886:	eb49 0303 	adc.w	r3, r9, r3
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001898:	4629      	mov	r1, r5
 800189a:	024b      	lsls	r3, r1, #9
 800189c:	4621      	mov	r1, r4
 800189e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a2:	4621      	mov	r1, r4
 80018a4:	024a      	lsls	r2, r1, #9
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018ae:	2200      	movs	r2, #0
 80018b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80018b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018b8:	f7fe fcfa 	bl	80002b0 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018c6:	e065      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x420>
 80018c8:	40023800 	.word	0x40023800
 80018cc:	00f42400 	.word	0x00f42400
 80018d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d4:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_GetSysClockFreq+0x458>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	2200      	movs	r2, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	4611      	mov	r1, r2
 80018e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018e4:	653b      	str	r3, [r7, #80]	; 0x50
 80018e6:	2300      	movs	r3, #0
 80018e8:	657b      	str	r3, [r7, #84]	; 0x54
 80018ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80018ee:	4642      	mov	r2, r8
 80018f0:	464b      	mov	r3, r9
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	0159      	lsls	r1, r3, #5
 80018fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001900:	0150      	lsls	r0, r2, #5
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4641      	mov	r1, r8
 8001908:	1a51      	subs	r1, r2, r1
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	4649      	mov	r1, r9
 800190e:	eb63 0301 	sbc.w	r3, r3, r1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001920:	4659      	mov	r1, fp
 8001922:	018b      	lsls	r3, r1, #6
 8001924:	4651      	mov	r1, sl
 8001926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800192a:	4651      	mov	r1, sl
 800192c:	018a      	lsls	r2, r1, #6
 800192e:	4651      	mov	r1, sl
 8001930:	1a54      	subs	r4, r2, r1
 8001932:	4659      	mov	r1, fp
 8001934:	eb63 0501 	sbc.w	r5, r3, r1
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	00eb      	lsls	r3, r5, #3
 8001942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	4614      	mov	r4, r2
 800194a:	461d      	mov	r5, r3
 800194c:	4643      	mov	r3, r8
 800194e:	18e3      	adds	r3, r4, r3
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	464b      	mov	r3, r9
 8001954:	eb45 0303 	adc.w	r3, r5, r3
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001966:	4629      	mov	r1, r5
 8001968:	028b      	lsls	r3, r1, #10
 800196a:	4621      	mov	r1, r4
 800196c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001970:	4621      	mov	r1, r4
 8001972:	028a      	lsls	r2, r1, #10
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800197c:	2200      	movs	r2, #0
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001980:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001982:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001986:	f7fe fc93 	bl	80002b0 <__aeabi_uldivmod>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4613      	mov	r3, r2
 8001990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_RCC_GetSysClockFreq+0x458>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0f1b      	lsrs	r3, r3, #28
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80019a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019b2:	e003      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	37b8      	adds	r7, #184	; 0xb8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	00f42400 	.word	0x00f42400

080019d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e28d      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8083 	beq.w	8001afa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019f4:	4b94      	ldr	r3, [pc, #592]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d019      	beq.n	8001a34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a00:	4b91      	ldr	r3, [pc, #580]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a0c:	4b8e      	ldr	r3, [pc, #568]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a18:	d00c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d112      	bne.n	8001a4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a32:	d10b      	bne.n	8001a4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	4b84      	ldr	r3, [pc, #528]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d05b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x124>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d157      	bne.n	8001af8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e25a      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a54:	d106      	bne.n	8001a64 <HAL_RCC_OscConfig+0x90>
 8001a56:	4b7c      	ldr	r3, [pc, #496]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7b      	ldr	r2, [pc, #492]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xcc>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0xb4>
 8001a6e:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a72      	ldr	r2, [pc, #456]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xcc>
 8001a88:	4b6f      	ldr	r3, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a6e      	ldr	r2, [pc, #440]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b6c      	ldr	r3, [pc, #432]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6b      	ldr	r2, [pc, #428]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f9aa 	bl	8000e00 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f9a6 	bl	8000e00 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e21f      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xdc>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f996 	bl	8000e00 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f992 	bl	8000e00 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e20b      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	4b57      	ldr	r3, [pc, #348]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x104>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06f      	beq.n	8001be6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b06:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d017      	beq.n	8001b42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b12:	4b4d      	ldr	r3, [pc, #308]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x186>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1d3      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4937      	ldr	r1, [pc, #220]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x278>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f93f 	bl	8000e00 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f93b 	bl	8000e00 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1b4      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4925      	ldr	r1, [pc, #148]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x278>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f91e 	bl	8000e00 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f91a 	bl	8000e00 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e193      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f8fe 	bl	8000e00 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f8fa 	bl	8000e00 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e173      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x234>
 8001c26:	e01b      	b.n	8001c60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x27c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f8e7 	bl	8000e00 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff f8e3 	bl	8000e00 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e15c      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b8a      	ldr	r3, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b7f      	ldr	r3, [pc, #508]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a7e      	ldr	r2, [pc, #504]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a75      	ldr	r2, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f8a3 	bl	8000e00 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff f89f 	bl	8000e00 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e118      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b6c      	ldr	r3, [pc, #432]	; (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x31e>
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x358>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x340>
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a5d      	ldr	r2, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x358>
 8001d14:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a59      	ldr	r2, [pc, #356]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a56      	ldr	r2, [pc, #344]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f864 	bl	8000e00 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f860 	bl	8000e00 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0d7      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RCC_OscConfig+0x368>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f84e 	bl	8000e00 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff f84a 	bl	8000e00 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0c1      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a3a      	ldr	r2, [pc, #232]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ad 	beq.w	8001f00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d145      	bne.n	8001e46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f81e 	bl	8000e00 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f81a 	bl	8000e00 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e093      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	071b      	lsls	r3, r3, #28
 8001e12:	491b      	ldr	r1, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7fe ffef 	bl	8000e00 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe ffeb 	bl	8000e00 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e064      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x452>
 8001e44:	e05c      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ffd8 	bl	8000e00 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe ffd4 	bl	8000e00 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04d      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x480>
 8001e72:	e045      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e040      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_OscConfig+0x538>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d030      	beq.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d129      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d122      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d119      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10f      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07b      	b.n	800201a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d108      	bne.n	8001f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f32:	d009      	beq.n	8001f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
 8001f3a:	e005      	b.n	8001f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe fd9a 	bl	8000a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fcc:	ea42 0103 	orr.w	r1, r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	f003 0104 	and.w	r1, r3, #4
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	f003 0210 	and.w	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002008:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b088      	sub	sp, #32
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_SPI_Transmit+0x22>
 8002040:	2302      	movs	r3, #2
 8002042:	e126      	b.n	8002292 <HAL_SPI_Transmit+0x270>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800204c:	f7fe fed8 	bl	8000e00 <HAL_GetTick>
 8002050:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d002      	beq.n	8002068 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002066:	e10b      	b.n	8002280 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_SPI_Transmit+0x52>
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002078:	e102      	b.n	8002280 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2203      	movs	r2, #3
 800207e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c0:	d10f      	bne.n	80020e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	2b40      	cmp	r3, #64	; 0x40
 80020ee:	d007      	beq.n	8002100 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002108:	d14b      	bne.n	80021a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_SPI_Transmit+0xf6>
 8002112:	8afb      	ldrh	r3, [r7, #22]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d13e      	bne.n	8002196 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	1c9a      	adds	r2, r3, #2
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800213c:	e02b      	b.n	8002196 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b02      	cmp	r3, #2
 800214a:	d112      	bne.n	8002172 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	881a      	ldrh	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	1c9a      	adds	r2, r3, #2
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002170:	e011      	b.n	8002196 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002172:	f7fe fe45 	bl	8000e00 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d803      	bhi.n	800218a <HAL_SPI_Transmit+0x168>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d102      	bne.n	8002190 <HAL_SPI_Transmit+0x16e>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002194:	e074      	b.n	8002280 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ce      	bne.n	800213e <HAL_SPI_Transmit+0x11c>
 80021a0:	e04c      	b.n	800223c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_SPI_Transmit+0x18e>
 80021aa:	8afb      	ldrh	r3, [r7, #22]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d140      	bne.n	8002232 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	330c      	adds	r3, #12
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021d6:	e02c      	b.n	8002232 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d113      	bne.n	800220e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	330c      	adds	r3, #12
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	86da      	strh	r2, [r3, #54]	; 0x36
 800220c:	e011      	b.n	8002232 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800220e:	f7fe fdf7 	bl	8000e00 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d803      	bhi.n	8002226 <HAL_SPI_Transmit+0x204>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d102      	bne.n	800222c <HAL_SPI_Transmit+0x20a>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002230:	e026      	b.n	8002280 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1cd      	bne.n	80021d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fbcb 	bl	80029dc <SPI_EndRxTxTransaction>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	77fb      	strb	r3, [r7, #31]
 800227c:	e000      	b.n	8002280 <HAL_SPI_Transmit+0x25e>
  }

error:
 800227e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002290:	7ffb      	ldrb	r3, [r7, #31]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b088      	sub	sp, #32
 800229e:	af02      	add	r7, sp, #8
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022b6:	d112      	bne.n	80022de <HAL_SPI_Receive+0x44>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10e      	bne.n	80022de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2204      	movs	r2, #4
 80022c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022c8:	88fa      	ldrh	r2, [r7, #6]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f8f1 	bl	80024bc <HAL_SPI_TransmitReceive>
 80022da:	4603      	mov	r3, r0
 80022dc:	e0ea      	b.n	80024b4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_SPI_Receive+0x52>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e0e3      	b.n	80024b4 <HAL_SPI_Receive+0x21a>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022f4:	f7fe fd84 	bl	8000e00 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d002      	beq.n	800230c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	75fb      	strb	r3, [r7, #23]
    goto error;
 800230a:	e0ca      	b.n	80024a2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_SPI_Receive+0x7e>
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800231c:	e0c1      	b.n	80024a2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2204      	movs	r2, #4
 8002322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002364:	d10f      	bne.n	8002386 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d007      	beq.n	80023a4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d162      	bne.n	8002472 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023ac:	e02e      	b.n	800240c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d115      	bne.n	80023e8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f103 020c 	add.w	r2, r3, #12
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023e6:	e011      	b.n	800240c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e8:	f7fe fd0a 	bl	8000e00 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d803      	bhi.n	8002400 <HAL_SPI_Receive+0x166>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d102      	bne.n	8002406 <HAL_SPI_Receive+0x16c>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	75fb      	strb	r3, [r7, #23]
          goto error;
 800240a:	e04a      	b.n	80024a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1cb      	bne.n	80023ae <HAL_SPI_Receive+0x114>
 8002416:	e031      	b.n	800247c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d113      	bne.n	800244e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	b292      	uxth	r2, r2
 8002432:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	1c9a      	adds	r2, r3, #2
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800244c:	e011      	b.n	8002472 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800244e:	f7fe fcd7 	bl	8000e00 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d803      	bhi.n	8002466 <HAL_SPI_Receive+0x1cc>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d102      	bne.n	800246c <HAL_SPI_Receive+0x1d2>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002470:	e017      	b.n	80024a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1cd      	bne.n	8002418 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	6839      	ldr	r1, [r7, #0]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fa45 	bl	8002910 <SPI_EndRxTransaction>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
 800249e:	e000      	b.n	80024a2 <HAL_SPI_Receive+0x208>
  }

error :
 80024a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	; 0x30
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024ca:	2301      	movs	r3, #1
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x26>
 80024de:	2302      	movs	r3, #2
 80024e0:	e18a      	b.n	80027f8 <HAL_SPI_TransmitReceive+0x33c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ea:	f7fe fc89 	bl	8000e00 <HAL_GetTick>
 80024ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002508:	2b01      	cmp	r3, #1
 800250a:	d00f      	beq.n	800252c <HAL_SPI_TransmitReceive+0x70>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002512:	d107      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x68>
 800251c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002520:	2b04      	cmp	r3, #4
 8002522:	d003      	beq.n	800252c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002524:	2302      	movs	r3, #2
 8002526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800252a:	e15b      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_SPI_TransmitReceive+0x82>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_SPI_TransmitReceive+0x82>
 8002538:	887b      	ldrh	r3, [r7, #2]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002544:	e14e      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b04      	cmp	r3, #4
 8002550:	d003      	beq.n	800255a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2205      	movs	r2, #5
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	887a      	ldrh	r2, [r7, #2]
 800256a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	887a      	ldrh	r2, [r7, #2]
 8002582:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d007      	beq.n	80025ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b6:	d178      	bne.n	80026aa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x10a>
 80025c0:	8b7b      	ldrh	r3, [r7, #26]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d166      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	881a      	ldrh	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	1c9a      	adds	r2, r3, #2
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ea:	e053      	b.n	8002694 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d11b      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x176>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d016      	beq.n	8002632 <HAL_SPI_TransmitReceive+0x176>
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d113      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	881a      	ldrh	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	1c9a      	adds	r2, r3, #2
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d119      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x1b8>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d014      	beq.n	8002674 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	b292      	uxth	r2, r2
 8002656:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	1c9a      	adds	r2, r3, #2
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002670:	2301      	movs	r3, #1
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002674:	f7fe fbc4 	bl	8000e00 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002680:	429a      	cmp	r2, r3
 8002682:	d807      	bhi.n	8002694 <HAL_SPI_TransmitReceive+0x1d8>
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268a:	d003      	beq.n	8002694 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002692:	e0a7      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1a6      	bne.n	80025ec <HAL_SPI_TransmitReceive+0x130>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1a1      	bne.n	80025ec <HAL_SPI_TransmitReceive+0x130>
 80026a8:	e07c      	b.n	80027a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x1fc>
 80026b2:	8b7b      	ldrh	r3, [r7, #26]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d16b      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026de:	e057      	b.n	8002790 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d11c      	bne.n	8002728 <HAL_SPI_TransmitReceive+0x26c>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d017      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x26c>
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d114      	bne.n	8002728 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	7812      	ldrb	r2, [r2, #0]
 800270a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d119      	bne.n	800276a <HAL_SPI_TransmitReceive+0x2ae>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d014      	beq.n	800276a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002766:	2301      	movs	r3, #1
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800276a:	f7fe fb49 	bl	8000e00 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002776:	429a      	cmp	r2, r3
 8002778:	d803      	bhi.n	8002782 <HAL_SPI_TransmitReceive+0x2c6>
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d102      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x2cc>
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800278e:	e029      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1a2      	bne.n	80026e0 <HAL_SPI_TransmitReceive+0x224>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d19d      	bne.n	80026e0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f917 	bl	80029dc <SPI_EndRxTxTransaction>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d006      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027c0:	e010      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	e000      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3730      	adds	r7, #48	; 0x30
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002810:	f7fe faf6 	bl	8000e00 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	4413      	add	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002820:	f7fe faee 	bl	8000e00 <HAL_GetTick>
 8002824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002826:	4b39      	ldr	r3, [pc, #228]	; (800290c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	015b      	lsls	r3, r3, #5
 800282c:	0d1b      	lsrs	r3, r3, #20
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002836:	e054      	b.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d050      	beq.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002840:	f7fe fade 	bl	8000e00 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	d902      	bls.n	8002856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d13d      	bne.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286e:	d111      	bne.n	8002894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002878:	d004      	beq.n	8002884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	d107      	bne.n	8002894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289c:	d10f      	bne.n	80028be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e017      	b.n	8002902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3b01      	subs	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	bf0c      	ite	eq
 80028f2:	2301      	moveq	r3, #1
 80028f4:	2300      	movne	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d19b      	bne.n	8002838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000000 	.word	0x20000000

08002910 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002924:	d111      	bne.n	800294a <SPI_EndRxTransaction+0x3a>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292e:	d004      	beq.n	800293a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002938:	d107      	bne.n	800294a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002952:	d12a      	bne.n	80029aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295c:	d012      	beq.n	8002984 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff ff49 	bl	8002800 <SPI_WaitFlagStateUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d02d      	beq.n	80029d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e026      	b.n	80029d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2200      	movs	r2, #0
 800298c:	2101      	movs	r1, #1
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff ff36 	bl	8002800 <SPI_WaitFlagStateUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f043 0220 	orr.w	r2, r3, #32
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e013      	b.n	80029d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2101      	movs	r1, #1
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff ff23 	bl	8002800 <SPI_WaitFlagStateUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e000      	b.n	80029d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <SPI_EndRxTxTransaction+0x7c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <SPI_EndRxTxTransaction+0x80>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0d5b      	lsrs	r3, r3, #21
 80029f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029f8:	fb02 f303 	mul.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a06:	d112      	bne.n	8002a2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff fef4 	bl	8002800 <SPI_WaitFlagStateUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e00f      	b.n	8002a4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d0f2      	beq.n	8002a2e <SPI_EndRxTxTransaction+0x52>
 8002a48:	e000      	b.n	8002a4c <SPI_EndRxTxTransaction+0x70>
        break;
 8002a4a:	bf00      	nop
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	165e9f81 	.word	0x165e9f81

08002a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e041      	b.n	8002af6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe f850 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f000 f8f4 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_ConfigClockSource+0x1c>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0b4      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x186>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b40:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	d03e      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0xd4>
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b58:	f200 8087 	bhi.w	8002c6a <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	f000 8086 	beq.w	8002c70 <HAL_TIM_ConfigClockSource+0x172>
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d87f      	bhi.n	8002c6a <HAL_TIM_ConfigClockSource+0x16c>
 8002b6a:	2b70      	cmp	r3, #112	; 0x70
 8002b6c:	d01a      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0xa6>
 8002b6e:	2b70      	cmp	r3, #112	; 0x70
 8002b70:	d87b      	bhi.n	8002c6a <HAL_TIM_ConfigClockSource+0x16c>
 8002b72:	2b60      	cmp	r3, #96	; 0x60
 8002b74:	d050      	beq.n	8002c18 <HAL_TIM_ConfigClockSource+0x11a>
 8002b76:	2b60      	cmp	r3, #96	; 0x60
 8002b78:	d877      	bhi.n	8002c6a <HAL_TIM_ConfigClockSource+0x16c>
 8002b7a:	2b50      	cmp	r3, #80	; 0x50
 8002b7c:	d03c      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0xfa>
 8002b7e:	2b50      	cmp	r3, #80	; 0x50
 8002b80:	d873      	bhi.n	8002c6a <HAL_TIM_ConfigClockSource+0x16c>
 8002b82:	2b40      	cmp	r3, #64	; 0x40
 8002b84:	d058      	beq.n	8002c38 <HAL_TIM_ConfigClockSource+0x13a>
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	d86f      	bhi.n	8002c6a <HAL_TIM_ConfigClockSource+0x16c>
 8002b8a:	2b30      	cmp	r3, #48	; 0x30
 8002b8c:	d064      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x15a>
 8002b8e:	2b30      	cmp	r3, #48	; 0x30
 8002b90:	d86b      	bhi.n	8002c6a <HAL_TIM_ConfigClockSource+0x16c>
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d060      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x15a>
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d867      	bhi.n	8002c6a <HAL_TIM_ConfigClockSource+0x16c>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d05c      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x15a>
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d05a      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x15a>
 8002ba2:	e062      	b.n	8002c6a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f000 f984 	bl	8002ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
      break;
 8002bd0:	e04f      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6899      	ldr	r1, [r3, #8]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f000 f96d 	bl	8002ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf4:	609a      	str	r2, [r3, #8]
      break;
 8002bf6:	e03c      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	461a      	mov	r2, r3
 8002c06:	f000 f8e1 	bl	8002dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2150      	movs	r1, #80	; 0x50
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f93a 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c16:	e02c      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f000 f900 	bl	8002e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2160      	movs	r1, #96	; 0x60
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f92a 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c36:	e01c      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	461a      	mov	r2, r3
 8002c46:	f000 f8c1 	bl	8002dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2140      	movs	r1, #64	; 0x40
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f91a 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c56:	e00c      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 f911 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c68:	e003      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6e:	e000      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a40      	ldr	r2, [pc, #256]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d00f      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3d      	ldr	r2, [pc, #244]	; (8002da4 <TIM_Base_SetConfig+0x118>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00b      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <TIM_Base_SetConfig+0x11c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <TIM_Base_SetConfig+0x120>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d108      	bne.n	8002cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cec:	d027      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <TIM_Base_SetConfig+0x118>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d023      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	; (8002da8 <TIM_Base_SetConfig+0x11c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <TIM_Base_SetConfig+0x120>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d017      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <TIM_Base_SetConfig+0x128>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <TIM_Base_SetConfig+0x12c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00f      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <TIM_Base_SetConfig+0x130>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <TIM_Base_SetConfig+0x134>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <TIM_Base_SetConfig+0x138>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <TIM_Base_SetConfig+0x13c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_Base_SetConfig+0xf8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d103      	bne.n	8002d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	615a      	str	r2, [r3, #20]
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40010400 	.word	0x40010400
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40014400 	.word	0x40014400
 8002dbc:	40014800 	.word	0x40014800
 8002dc0:	40001800 	.word	0x40001800
 8002dc4:	40001c00 	.word	0x40001c00
 8002dc8:	40002000 	.word	0x40002000

08002dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 030a 	bic.w	r3, r3, #10
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0210 	bic.w	r2, r3, #16
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	031b      	lsls	r3, r3, #12
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f043 0307 	orr.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	021a      	lsls	r2, r3, #8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e05a      	b.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d01d      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10c      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40000800 	.word	0x40000800
 8002fe8:	40000c00 	.word	0x40000c00
 8002fec:	40010400 	.word	0x40010400
 8002ff0:	40014000 	.word	0x40014000
 8002ff4:	40001800 	.word	0x40001800

08002ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e03f      	b.n	800308a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fda4 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f929 	bl	8003294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b08a      	sub	sp, #40	; 0x28
 8003096:	af02      	add	r7, sp, #8
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d17c      	bne.n	80031ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_Transmit+0x2c>
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e075      	b.n	80031ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_UART_Transmit+0x3e>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e06e      	b.n	80031ae <HAL_UART_Transmit+0x11c>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2221      	movs	r2, #33	; 0x21
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fd fe8b 	bl	8000e00 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d108      	bne.n	8003114 <HAL_UART_Transmit+0x82>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e003      	b.n	800311c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003124:	e02a      	b.n	800317c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f840 	bl	80031b6 <UART_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e036      	b.n	80031ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	3302      	adds	r3, #2
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	e007      	b.n	800316e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1cf      	bne.n	8003126 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	2140      	movs	r1, #64	; 0x40
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f810 	bl	80031b6 <UART_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e006      	b.n	80031ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b090      	sub	sp, #64	; 0x40
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c6:	e050      	b.n	800326a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d04c      	beq.n	800326a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80031d6:	f7fd fe13 	bl	8000e00 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d241      	bcs.n	800326a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003206:	637a      	str	r2, [r7, #52]	; 0x34
 8003208:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800320c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e5      	bne.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3314      	adds	r3, #20
 8003220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	613b      	str	r3, [r7, #16]
   return(result);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	63bb      	str	r3, [r7, #56]	; 0x38
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3314      	adds	r3, #20
 8003238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800323a:	623a      	str	r2, [r7, #32]
 800323c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	69f9      	ldr	r1, [r7, #28]
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	61bb      	str	r3, [r7, #24]
   return(result);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e5      	bne.n	800321a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e00f      	b.n	800328a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4013      	ands	r3, r2
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	bf0c      	ite	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	2300      	movne	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	429a      	cmp	r2, r3
 8003286:	d09f      	beq.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3740      	adds	r7, #64	; 0x40
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003298:	b0c0      	sub	sp, #256	; 0x100
 800329a:	af00      	add	r7, sp, #0
 800329c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	68d9      	ldr	r1, [r3, #12]
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	ea40 0301 	orr.w	r3, r0, r1
 80032bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032ec:	f021 010c 	bic.w	r1, r1, #12
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032fa:	430b      	orrs	r3, r1
 80032fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330e:	6999      	ldr	r1, [r3, #24]
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	ea40 0301 	orr.w	r3, r0, r1
 800331a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b8f      	ldr	r3, [pc, #572]	; (8003560 <UART_SetConfig+0x2cc>)
 8003324:	429a      	cmp	r2, r3
 8003326:	d005      	beq.n	8003334 <UART_SetConfig+0xa0>
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b8d      	ldr	r3, [pc, #564]	; (8003564 <UART_SetConfig+0x2d0>)
 8003330:	429a      	cmp	r2, r3
 8003332:	d104      	bne.n	800333e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003334:	f7fe f90a 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 8003338:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800333c:	e003      	b.n	8003346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800333e:	f7fe f8f1 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
 8003342:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003350:	f040 810c 	bne.w	800356c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003358:	2200      	movs	r2, #0
 800335a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800335e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003366:	4622      	mov	r2, r4
 8003368:	462b      	mov	r3, r5
 800336a:	1891      	adds	r1, r2, r2
 800336c:	65b9      	str	r1, [r7, #88]	; 0x58
 800336e:	415b      	adcs	r3, r3
 8003370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003376:	4621      	mov	r1, r4
 8003378:	eb12 0801 	adds.w	r8, r2, r1
 800337c:	4629      	mov	r1, r5
 800337e:	eb43 0901 	adc.w	r9, r3, r1
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800338e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003396:	4690      	mov	r8, r2
 8003398:	4699      	mov	r9, r3
 800339a:	4623      	mov	r3, r4
 800339c:	eb18 0303 	adds.w	r3, r8, r3
 80033a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033a4:	462b      	mov	r3, r5
 80033a6:	eb49 0303 	adc.w	r3, r9, r3
 80033aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033c2:	460b      	mov	r3, r1
 80033c4:	18db      	adds	r3, r3, r3
 80033c6:	653b      	str	r3, [r7, #80]	; 0x50
 80033c8:	4613      	mov	r3, r2
 80033ca:	eb42 0303 	adc.w	r3, r2, r3
 80033ce:	657b      	str	r3, [r7, #84]	; 0x54
 80033d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033d8:	f7fc ff6a 	bl	80002b0 <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4b61      	ldr	r3, [pc, #388]	; (8003568 <UART_SetConfig+0x2d4>)
 80033e2:	fba3 2302 	umull	r2, r3, r3, r2
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	011c      	lsls	r4, r3, #4
 80033ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033fc:	4642      	mov	r2, r8
 80033fe:	464b      	mov	r3, r9
 8003400:	1891      	adds	r1, r2, r2
 8003402:	64b9      	str	r1, [r7, #72]	; 0x48
 8003404:	415b      	adcs	r3, r3
 8003406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800340c:	4641      	mov	r1, r8
 800340e:	eb12 0a01 	adds.w	sl, r2, r1
 8003412:	4649      	mov	r1, r9
 8003414:	eb43 0b01 	adc.w	fp, r3, r1
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800342c:	4692      	mov	sl, r2
 800342e:	469b      	mov	fp, r3
 8003430:	4643      	mov	r3, r8
 8003432:	eb1a 0303 	adds.w	r3, sl, r3
 8003436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800343a:	464b      	mov	r3, r9
 800343c:	eb4b 0303 	adc.w	r3, fp, r3
 8003440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003450:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003458:	460b      	mov	r3, r1
 800345a:	18db      	adds	r3, r3, r3
 800345c:	643b      	str	r3, [r7, #64]	; 0x40
 800345e:	4613      	mov	r3, r2
 8003460:	eb42 0303 	adc.w	r3, r2, r3
 8003464:	647b      	str	r3, [r7, #68]	; 0x44
 8003466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800346a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800346e:	f7fc ff1f 	bl	80002b0 <__aeabi_uldivmod>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4611      	mov	r1, r2
 8003478:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <UART_SetConfig+0x2d4>)
 800347a:	fba3 2301 	umull	r2, r3, r3, r1
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2264      	movs	r2, #100	; 0x64
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	1acb      	subs	r3, r1, r3
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <UART_SetConfig+0x2d4>)
 8003490:	fba3 2302 	umull	r2, r3, r3, r2
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800349c:	441c      	add	r4, r3
 800349e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	1891      	adds	r1, r2, r2
 80034b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80034b8:	415b      	adcs	r3, r3
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034c0:	4641      	mov	r1, r8
 80034c2:	1851      	adds	r1, r2, r1
 80034c4:	6339      	str	r1, [r7, #48]	; 0x30
 80034c6:	4649      	mov	r1, r9
 80034c8:	414b      	adcs	r3, r1
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034d8:	4659      	mov	r1, fp
 80034da:	00cb      	lsls	r3, r1, #3
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e2:	4651      	mov	r1, sl
 80034e4:	00ca      	lsls	r2, r1, #3
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	4642      	mov	r2, r8
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f4:	464b      	mov	r3, r9
 80034f6:	460a      	mov	r2, r1
 80034f8:	eb42 0303 	adc.w	r3, r2, r3
 80034fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800350c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003514:	460b      	mov	r3, r1
 8003516:	18db      	adds	r3, r3, r3
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
 800351a:	4613      	mov	r3, r2
 800351c:	eb42 0303 	adc.w	r3, r2, r3
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800352a:	f7fc fec1 	bl	80002b0 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <UART_SetConfig+0x2d4>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	3332      	adds	r3, #50	; 0x32
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <UART_SetConfig+0x2d4>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	f003 0207 	and.w	r2, r3, #7
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4422      	add	r2, r4
 800355a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800355c:	e106      	b.n	800376c <UART_SetConfig+0x4d8>
 800355e:	bf00      	nop
 8003560:	40011000 	.word	0x40011000
 8003564:	40011400 	.word	0x40011400
 8003568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800356c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003570:	2200      	movs	r2, #0
 8003572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003576:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800357a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800357e:	4642      	mov	r2, r8
 8003580:	464b      	mov	r3, r9
 8003582:	1891      	adds	r1, r2, r2
 8003584:	6239      	str	r1, [r7, #32]
 8003586:	415b      	adcs	r3, r3
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
 800358a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800358e:	4641      	mov	r1, r8
 8003590:	1854      	adds	r4, r2, r1
 8003592:	4649      	mov	r1, r9
 8003594:	eb43 0501 	adc.w	r5, r3, r1
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	00eb      	lsls	r3, r5, #3
 80035a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a6:	00e2      	lsls	r2, r4, #3
 80035a8:	4614      	mov	r4, r2
 80035aa:	461d      	mov	r5, r3
 80035ac:	4643      	mov	r3, r8
 80035ae:	18e3      	adds	r3, r4, r3
 80035b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035b4:	464b      	mov	r3, r9
 80035b6:	eb45 0303 	adc.w	r3, r5, r3
 80035ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035da:	4629      	mov	r1, r5
 80035dc:	008b      	lsls	r3, r1, #2
 80035de:	4621      	mov	r1, r4
 80035e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035e4:	4621      	mov	r1, r4
 80035e6:	008a      	lsls	r2, r1, #2
 80035e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035ec:	f7fc fe60 	bl	80002b0 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4b60      	ldr	r3, [pc, #384]	; (8003778 <UART_SetConfig+0x4e4>)
 80035f6:	fba3 2302 	umull	r2, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	011c      	lsls	r4, r3, #4
 80035fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800360c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	1891      	adds	r1, r2, r2
 8003616:	61b9      	str	r1, [r7, #24]
 8003618:	415b      	adcs	r3, r3
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003620:	4641      	mov	r1, r8
 8003622:	1851      	adds	r1, r2, r1
 8003624:	6139      	str	r1, [r7, #16]
 8003626:	4649      	mov	r1, r9
 8003628:	414b      	adcs	r3, r1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003638:	4659      	mov	r1, fp
 800363a:	00cb      	lsls	r3, r1, #3
 800363c:	4651      	mov	r1, sl
 800363e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003642:	4651      	mov	r1, sl
 8003644:	00ca      	lsls	r2, r1, #3
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	4603      	mov	r3, r0
 800364c:	4642      	mov	r2, r8
 800364e:	189b      	adds	r3, r3, r2
 8003650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003654:	464b      	mov	r3, r9
 8003656:	460a      	mov	r2, r1
 8003658:	eb42 0303 	adc.w	r3, r2, r3
 800365c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	67bb      	str	r3, [r7, #120]	; 0x78
 800366a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003678:	4649      	mov	r1, r9
 800367a:	008b      	lsls	r3, r1, #2
 800367c:	4641      	mov	r1, r8
 800367e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003682:	4641      	mov	r1, r8
 8003684:	008a      	lsls	r2, r1, #2
 8003686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800368a:	f7fc fe11 	bl	80002b0 <__aeabi_uldivmod>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4611      	mov	r1, r2
 8003694:	4b38      	ldr	r3, [pc, #224]	; (8003778 <UART_SetConfig+0x4e4>)
 8003696:	fba3 2301 	umull	r2, r3, r3, r1
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2264      	movs	r2, #100	; 0x64
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	1acb      	subs	r3, r1, r3
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	3332      	adds	r3, #50	; 0x32
 80036a8:	4a33      	ldr	r2, [pc, #204]	; (8003778 <UART_SetConfig+0x4e4>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b4:	441c      	add	r4, r3
 80036b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ba:	2200      	movs	r2, #0
 80036bc:	673b      	str	r3, [r7, #112]	; 0x70
 80036be:	677a      	str	r2, [r7, #116]	; 0x74
 80036c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036c4:	4642      	mov	r2, r8
 80036c6:	464b      	mov	r3, r9
 80036c8:	1891      	adds	r1, r2, r2
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	415b      	adcs	r3, r3
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036d4:	4641      	mov	r1, r8
 80036d6:	1851      	adds	r1, r2, r1
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	4649      	mov	r1, r9
 80036dc:	414b      	adcs	r3, r1
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036ec:	4659      	mov	r1, fp
 80036ee:	00cb      	lsls	r3, r1, #3
 80036f0:	4651      	mov	r1, sl
 80036f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036f6:	4651      	mov	r1, sl
 80036f8:	00ca      	lsls	r2, r1, #3
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	4642      	mov	r2, r8
 8003702:	189b      	adds	r3, r3, r2
 8003704:	66bb      	str	r3, [r7, #104]	; 0x68
 8003706:	464b      	mov	r3, r9
 8003708:	460a      	mov	r2, r1
 800370a:	eb42 0303 	adc.w	r3, r2, r3
 800370e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	663b      	str	r3, [r7, #96]	; 0x60
 800371a:	667a      	str	r2, [r7, #100]	; 0x64
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003728:	4649      	mov	r1, r9
 800372a:	008b      	lsls	r3, r1, #2
 800372c:	4641      	mov	r1, r8
 800372e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003732:	4641      	mov	r1, r8
 8003734:	008a      	lsls	r2, r1, #2
 8003736:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800373a:	f7fc fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <UART_SetConfig+0x4e4>)
 8003744:	fba3 1302 	umull	r1, r3, r3, r2
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	2164      	movs	r1, #100	; 0x64
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	3332      	adds	r3, #50	; 0x32
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <UART_SetConfig+0x4e4>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	f003 020f 	and.w	r2, r3, #15
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4422      	add	r2, r4
 800376a:	609a      	str	r2, [r3, #8]
}
 800376c:	bf00      	nop
 800376e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003772:	46bd      	mov	sp, r7
 8003774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003778:	51eb851f 	.word	0x51eb851f

0800377c <siprintf>:
 800377c:	b40e      	push	{r1, r2, r3}
 800377e:	b500      	push	{lr}
 8003780:	b09c      	sub	sp, #112	; 0x70
 8003782:	ab1d      	add	r3, sp, #116	; 0x74
 8003784:	9002      	str	r0, [sp, #8]
 8003786:	9006      	str	r0, [sp, #24]
 8003788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800378c:	4809      	ldr	r0, [pc, #36]	; (80037b4 <siprintf+0x38>)
 800378e:	9107      	str	r1, [sp, #28]
 8003790:	9104      	str	r1, [sp, #16]
 8003792:	4909      	ldr	r1, [pc, #36]	; (80037b8 <siprintf+0x3c>)
 8003794:	f853 2b04 	ldr.w	r2, [r3], #4
 8003798:	9105      	str	r1, [sp, #20]
 800379a:	6800      	ldr	r0, [r0, #0]
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	a902      	add	r1, sp, #8
 80037a0:	f000 f992 	bl	8003ac8 <_svfiprintf_r>
 80037a4:	9b02      	ldr	r3, [sp, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	b01c      	add	sp, #112	; 0x70
 80037ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80037b0:	b003      	add	sp, #12
 80037b2:	4770      	bx	lr
 80037b4:	20000058 	.word	0x20000058
 80037b8:	ffff0208 	.word	0xffff0208

080037bc <memset>:
 80037bc:	4402      	add	r2, r0
 80037be:	4603      	mov	r3, r0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d100      	bne.n	80037c6 <memset+0xa>
 80037c4:	4770      	bx	lr
 80037c6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ca:	e7f9      	b.n	80037c0 <memset+0x4>

080037cc <__errno>:
 80037cc:	4b01      	ldr	r3, [pc, #4]	; (80037d4 <__errno+0x8>)
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000058 	.word	0x20000058

080037d8 <__libc_init_array>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4d0d      	ldr	r5, [pc, #52]	; (8003810 <__libc_init_array+0x38>)
 80037dc:	4c0d      	ldr	r4, [pc, #52]	; (8003814 <__libc_init_array+0x3c>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	2600      	movs	r6, #0
 80037e4:	42a6      	cmp	r6, r4
 80037e6:	d109      	bne.n	80037fc <__libc_init_array+0x24>
 80037e8:	4d0b      	ldr	r5, [pc, #44]	; (8003818 <__libc_init_array+0x40>)
 80037ea:	4c0c      	ldr	r4, [pc, #48]	; (800381c <__libc_init_array+0x44>)
 80037ec:	f000 fc6a 	bl	80040c4 <_init>
 80037f0:	1b64      	subs	r4, r4, r5
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	2600      	movs	r6, #0
 80037f6:	42a6      	cmp	r6, r4
 80037f8:	d105      	bne.n	8003806 <__libc_init_array+0x2e>
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003800:	4798      	blx	r3
 8003802:	3601      	adds	r6, #1
 8003804:	e7ee      	b.n	80037e4 <__libc_init_array+0xc>
 8003806:	f855 3b04 	ldr.w	r3, [r5], #4
 800380a:	4798      	blx	r3
 800380c:	3601      	adds	r6, #1
 800380e:	e7f2      	b.n	80037f6 <__libc_init_array+0x1e>
 8003810:	08004154 	.word	0x08004154
 8003814:	08004154 	.word	0x08004154
 8003818:	08004154 	.word	0x08004154
 800381c:	08004158 	.word	0x08004158

08003820 <__retarget_lock_acquire_recursive>:
 8003820:	4770      	bx	lr

08003822 <__retarget_lock_release_recursive>:
 8003822:	4770      	bx	lr

08003824 <_free_r>:
 8003824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003826:	2900      	cmp	r1, #0
 8003828:	d044      	beq.n	80038b4 <_free_r+0x90>
 800382a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800382e:	9001      	str	r0, [sp, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f1a1 0404 	sub.w	r4, r1, #4
 8003836:	bfb8      	it	lt
 8003838:	18e4      	addlt	r4, r4, r3
 800383a:	f000 f8df 	bl	80039fc <__malloc_lock>
 800383e:	4a1e      	ldr	r2, [pc, #120]	; (80038b8 <_free_r+0x94>)
 8003840:	9801      	ldr	r0, [sp, #4]
 8003842:	6813      	ldr	r3, [r2, #0]
 8003844:	b933      	cbnz	r3, 8003854 <_free_r+0x30>
 8003846:	6063      	str	r3, [r4, #4]
 8003848:	6014      	str	r4, [r2, #0]
 800384a:	b003      	add	sp, #12
 800384c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003850:	f000 b8da 	b.w	8003a08 <__malloc_unlock>
 8003854:	42a3      	cmp	r3, r4
 8003856:	d908      	bls.n	800386a <_free_r+0x46>
 8003858:	6825      	ldr	r5, [r4, #0]
 800385a:	1961      	adds	r1, r4, r5
 800385c:	428b      	cmp	r3, r1
 800385e:	bf01      	itttt	eq
 8003860:	6819      	ldreq	r1, [r3, #0]
 8003862:	685b      	ldreq	r3, [r3, #4]
 8003864:	1949      	addeq	r1, r1, r5
 8003866:	6021      	streq	r1, [r4, #0]
 8003868:	e7ed      	b.n	8003846 <_free_r+0x22>
 800386a:	461a      	mov	r2, r3
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	b10b      	cbz	r3, 8003874 <_free_r+0x50>
 8003870:	42a3      	cmp	r3, r4
 8003872:	d9fa      	bls.n	800386a <_free_r+0x46>
 8003874:	6811      	ldr	r1, [r2, #0]
 8003876:	1855      	adds	r5, r2, r1
 8003878:	42a5      	cmp	r5, r4
 800387a:	d10b      	bne.n	8003894 <_free_r+0x70>
 800387c:	6824      	ldr	r4, [r4, #0]
 800387e:	4421      	add	r1, r4
 8003880:	1854      	adds	r4, r2, r1
 8003882:	42a3      	cmp	r3, r4
 8003884:	6011      	str	r1, [r2, #0]
 8003886:	d1e0      	bne.n	800384a <_free_r+0x26>
 8003888:	681c      	ldr	r4, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	6053      	str	r3, [r2, #4]
 800388e:	440c      	add	r4, r1
 8003890:	6014      	str	r4, [r2, #0]
 8003892:	e7da      	b.n	800384a <_free_r+0x26>
 8003894:	d902      	bls.n	800389c <_free_r+0x78>
 8003896:	230c      	movs	r3, #12
 8003898:	6003      	str	r3, [r0, #0]
 800389a:	e7d6      	b.n	800384a <_free_r+0x26>
 800389c:	6825      	ldr	r5, [r4, #0]
 800389e:	1961      	adds	r1, r4, r5
 80038a0:	428b      	cmp	r3, r1
 80038a2:	bf04      	itt	eq
 80038a4:	6819      	ldreq	r1, [r3, #0]
 80038a6:	685b      	ldreq	r3, [r3, #4]
 80038a8:	6063      	str	r3, [r4, #4]
 80038aa:	bf04      	itt	eq
 80038ac:	1949      	addeq	r1, r1, r5
 80038ae:	6021      	streq	r1, [r4, #0]
 80038b0:	6054      	str	r4, [r2, #4]
 80038b2:	e7ca      	b.n	800384a <_free_r+0x26>
 80038b4:	b003      	add	sp, #12
 80038b6:	bd30      	pop	{r4, r5, pc}
 80038b8:	200002f4 	.word	0x200002f4

080038bc <sbrk_aligned>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4e0e      	ldr	r6, [pc, #56]	; (80038f8 <sbrk_aligned+0x3c>)
 80038c0:	460c      	mov	r4, r1
 80038c2:	6831      	ldr	r1, [r6, #0]
 80038c4:	4605      	mov	r5, r0
 80038c6:	b911      	cbnz	r1, 80038ce <sbrk_aligned+0x12>
 80038c8:	f000 fba6 	bl	8004018 <_sbrk_r>
 80038cc:	6030      	str	r0, [r6, #0]
 80038ce:	4621      	mov	r1, r4
 80038d0:	4628      	mov	r0, r5
 80038d2:	f000 fba1 	bl	8004018 <_sbrk_r>
 80038d6:	1c43      	adds	r3, r0, #1
 80038d8:	d00a      	beq.n	80038f0 <sbrk_aligned+0x34>
 80038da:	1cc4      	adds	r4, r0, #3
 80038dc:	f024 0403 	bic.w	r4, r4, #3
 80038e0:	42a0      	cmp	r0, r4
 80038e2:	d007      	beq.n	80038f4 <sbrk_aligned+0x38>
 80038e4:	1a21      	subs	r1, r4, r0
 80038e6:	4628      	mov	r0, r5
 80038e8:	f000 fb96 	bl	8004018 <_sbrk_r>
 80038ec:	3001      	adds	r0, #1
 80038ee:	d101      	bne.n	80038f4 <sbrk_aligned+0x38>
 80038f0:	f04f 34ff 	mov.w	r4, #4294967295
 80038f4:	4620      	mov	r0, r4
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	200002f8 	.word	0x200002f8

080038fc <_malloc_r>:
 80038fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003900:	1ccd      	adds	r5, r1, #3
 8003902:	f025 0503 	bic.w	r5, r5, #3
 8003906:	3508      	adds	r5, #8
 8003908:	2d0c      	cmp	r5, #12
 800390a:	bf38      	it	cc
 800390c:	250c      	movcc	r5, #12
 800390e:	2d00      	cmp	r5, #0
 8003910:	4607      	mov	r7, r0
 8003912:	db01      	blt.n	8003918 <_malloc_r+0x1c>
 8003914:	42a9      	cmp	r1, r5
 8003916:	d905      	bls.n	8003924 <_malloc_r+0x28>
 8003918:	230c      	movs	r3, #12
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	2600      	movs	r6, #0
 800391e:	4630      	mov	r0, r6
 8003920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003924:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80039f8 <_malloc_r+0xfc>
 8003928:	f000 f868 	bl	80039fc <__malloc_lock>
 800392c:	f8d8 3000 	ldr.w	r3, [r8]
 8003930:	461c      	mov	r4, r3
 8003932:	bb5c      	cbnz	r4, 800398c <_malloc_r+0x90>
 8003934:	4629      	mov	r1, r5
 8003936:	4638      	mov	r0, r7
 8003938:	f7ff ffc0 	bl	80038bc <sbrk_aligned>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	4604      	mov	r4, r0
 8003940:	d155      	bne.n	80039ee <_malloc_r+0xf2>
 8003942:	f8d8 4000 	ldr.w	r4, [r8]
 8003946:	4626      	mov	r6, r4
 8003948:	2e00      	cmp	r6, #0
 800394a:	d145      	bne.n	80039d8 <_malloc_r+0xdc>
 800394c:	2c00      	cmp	r4, #0
 800394e:	d048      	beq.n	80039e2 <_malloc_r+0xe6>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	4631      	mov	r1, r6
 8003954:	4638      	mov	r0, r7
 8003956:	eb04 0903 	add.w	r9, r4, r3
 800395a:	f000 fb5d 	bl	8004018 <_sbrk_r>
 800395e:	4581      	cmp	r9, r0
 8003960:	d13f      	bne.n	80039e2 <_malloc_r+0xe6>
 8003962:	6821      	ldr	r1, [r4, #0]
 8003964:	1a6d      	subs	r5, r5, r1
 8003966:	4629      	mov	r1, r5
 8003968:	4638      	mov	r0, r7
 800396a:	f7ff ffa7 	bl	80038bc <sbrk_aligned>
 800396e:	3001      	adds	r0, #1
 8003970:	d037      	beq.n	80039e2 <_malloc_r+0xe6>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	442b      	add	r3, r5
 8003976:	6023      	str	r3, [r4, #0]
 8003978:	f8d8 3000 	ldr.w	r3, [r8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d038      	beq.n	80039f2 <_malloc_r+0xf6>
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	42a2      	cmp	r2, r4
 8003984:	d12b      	bne.n	80039de <_malloc_r+0xe2>
 8003986:	2200      	movs	r2, #0
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	e00f      	b.n	80039ac <_malloc_r+0xb0>
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	1b52      	subs	r2, r2, r5
 8003990:	d41f      	bmi.n	80039d2 <_malloc_r+0xd6>
 8003992:	2a0b      	cmp	r2, #11
 8003994:	d917      	bls.n	80039c6 <_malloc_r+0xca>
 8003996:	1961      	adds	r1, r4, r5
 8003998:	42a3      	cmp	r3, r4
 800399a:	6025      	str	r5, [r4, #0]
 800399c:	bf18      	it	ne
 800399e:	6059      	strne	r1, [r3, #4]
 80039a0:	6863      	ldr	r3, [r4, #4]
 80039a2:	bf08      	it	eq
 80039a4:	f8c8 1000 	streq.w	r1, [r8]
 80039a8:	5162      	str	r2, [r4, r5]
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	4638      	mov	r0, r7
 80039ae:	f104 060b 	add.w	r6, r4, #11
 80039b2:	f000 f829 	bl	8003a08 <__malloc_unlock>
 80039b6:	f026 0607 	bic.w	r6, r6, #7
 80039ba:	1d23      	adds	r3, r4, #4
 80039bc:	1af2      	subs	r2, r6, r3
 80039be:	d0ae      	beq.n	800391e <_malloc_r+0x22>
 80039c0:	1b9b      	subs	r3, r3, r6
 80039c2:	50a3      	str	r3, [r4, r2]
 80039c4:	e7ab      	b.n	800391e <_malloc_r+0x22>
 80039c6:	42a3      	cmp	r3, r4
 80039c8:	6862      	ldr	r2, [r4, #4]
 80039ca:	d1dd      	bne.n	8003988 <_malloc_r+0x8c>
 80039cc:	f8c8 2000 	str.w	r2, [r8]
 80039d0:	e7ec      	b.n	80039ac <_malloc_r+0xb0>
 80039d2:	4623      	mov	r3, r4
 80039d4:	6864      	ldr	r4, [r4, #4]
 80039d6:	e7ac      	b.n	8003932 <_malloc_r+0x36>
 80039d8:	4634      	mov	r4, r6
 80039da:	6876      	ldr	r6, [r6, #4]
 80039dc:	e7b4      	b.n	8003948 <_malloc_r+0x4c>
 80039de:	4613      	mov	r3, r2
 80039e0:	e7cc      	b.n	800397c <_malloc_r+0x80>
 80039e2:	230c      	movs	r3, #12
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4638      	mov	r0, r7
 80039e8:	f000 f80e 	bl	8003a08 <__malloc_unlock>
 80039ec:	e797      	b.n	800391e <_malloc_r+0x22>
 80039ee:	6025      	str	r5, [r4, #0]
 80039f0:	e7dc      	b.n	80039ac <_malloc_r+0xb0>
 80039f2:	605b      	str	r3, [r3, #4]
 80039f4:	deff      	udf	#255	; 0xff
 80039f6:	bf00      	nop
 80039f8:	200002f4 	.word	0x200002f4

080039fc <__malloc_lock>:
 80039fc:	4801      	ldr	r0, [pc, #4]	; (8003a04 <__malloc_lock+0x8>)
 80039fe:	f7ff bf0f 	b.w	8003820 <__retarget_lock_acquire_recursive>
 8003a02:	bf00      	nop
 8003a04:	200002f0 	.word	0x200002f0

08003a08 <__malloc_unlock>:
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <__malloc_unlock+0x8>)
 8003a0a:	f7ff bf0a 	b.w	8003822 <__retarget_lock_release_recursive>
 8003a0e:	bf00      	nop
 8003a10:	200002f0 	.word	0x200002f0

08003a14 <__ssputs_r>:
 8003a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a18:	688e      	ldr	r6, [r1, #8]
 8003a1a:	461f      	mov	r7, r3
 8003a1c:	42be      	cmp	r6, r7
 8003a1e:	680b      	ldr	r3, [r1, #0]
 8003a20:	4682      	mov	sl, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	4690      	mov	r8, r2
 8003a26:	d82c      	bhi.n	8003a82 <__ssputs_r+0x6e>
 8003a28:	898a      	ldrh	r2, [r1, #12]
 8003a2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a2e:	d026      	beq.n	8003a7e <__ssputs_r+0x6a>
 8003a30:	6965      	ldr	r5, [r4, #20]
 8003a32:	6909      	ldr	r1, [r1, #16]
 8003a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a38:	eba3 0901 	sub.w	r9, r3, r1
 8003a3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a40:	1c7b      	adds	r3, r7, #1
 8003a42:	444b      	add	r3, r9
 8003a44:	106d      	asrs	r5, r5, #1
 8003a46:	429d      	cmp	r5, r3
 8003a48:	bf38      	it	cc
 8003a4a:	461d      	movcc	r5, r3
 8003a4c:	0553      	lsls	r3, r2, #21
 8003a4e:	d527      	bpl.n	8003aa0 <__ssputs_r+0x8c>
 8003a50:	4629      	mov	r1, r5
 8003a52:	f7ff ff53 	bl	80038fc <_malloc_r>
 8003a56:	4606      	mov	r6, r0
 8003a58:	b360      	cbz	r0, 8003ab4 <__ssputs_r+0xa0>
 8003a5a:	6921      	ldr	r1, [r4, #16]
 8003a5c:	464a      	mov	r2, r9
 8003a5e:	f000 faeb 	bl	8004038 <memcpy>
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	6126      	str	r6, [r4, #16]
 8003a70:	6165      	str	r5, [r4, #20]
 8003a72:	444e      	add	r6, r9
 8003a74:	eba5 0509 	sub.w	r5, r5, r9
 8003a78:	6026      	str	r6, [r4, #0]
 8003a7a:	60a5      	str	r5, [r4, #8]
 8003a7c:	463e      	mov	r6, r7
 8003a7e:	42be      	cmp	r6, r7
 8003a80:	d900      	bls.n	8003a84 <__ssputs_r+0x70>
 8003a82:	463e      	mov	r6, r7
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	4632      	mov	r2, r6
 8003a88:	4641      	mov	r1, r8
 8003a8a:	f000 faab 	bl	8003fe4 <memmove>
 8003a8e:	68a3      	ldr	r3, [r4, #8]
 8003a90:	1b9b      	subs	r3, r3, r6
 8003a92:	60a3      	str	r3, [r4, #8]
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	4433      	add	r3, r6
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	f000 fad7 	bl	8004054 <_realloc_r>
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d1e0      	bne.n	8003a6e <__ssputs_r+0x5a>
 8003aac:	6921      	ldr	r1, [r4, #16]
 8003aae:	4650      	mov	r0, sl
 8003ab0:	f7ff feb8 	bl	8003824 <_free_r>
 8003ab4:	230c      	movs	r3, #12
 8003ab6:	f8ca 3000 	str.w	r3, [sl]
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac0:	81a3      	strh	r3, [r4, #12]
 8003ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac6:	e7e9      	b.n	8003a9c <__ssputs_r+0x88>

08003ac8 <_svfiprintf_r>:
 8003ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003acc:	4698      	mov	r8, r3
 8003ace:	898b      	ldrh	r3, [r1, #12]
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	b09d      	sub	sp, #116	; 0x74
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	460d      	mov	r5, r1
 8003ad8:	4614      	mov	r4, r2
 8003ada:	d50e      	bpl.n	8003afa <_svfiprintf_r+0x32>
 8003adc:	690b      	ldr	r3, [r1, #16]
 8003ade:	b963      	cbnz	r3, 8003afa <_svfiprintf_r+0x32>
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	f7ff ff0b 	bl	80038fc <_malloc_r>
 8003ae6:	6028      	str	r0, [r5, #0]
 8003ae8:	6128      	str	r0, [r5, #16]
 8003aea:	b920      	cbnz	r0, 8003af6 <_svfiprintf_r+0x2e>
 8003aec:	230c      	movs	r3, #12
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	e0d0      	b.n	8003c98 <_svfiprintf_r+0x1d0>
 8003af6:	2340      	movs	r3, #64	; 0x40
 8003af8:	616b      	str	r3, [r5, #20]
 8003afa:	2300      	movs	r3, #0
 8003afc:	9309      	str	r3, [sp, #36]	; 0x24
 8003afe:	2320      	movs	r3, #32
 8003b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b08:	2330      	movs	r3, #48	; 0x30
 8003b0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cb0 <_svfiprintf_r+0x1e8>
 8003b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b12:	f04f 0901 	mov.w	r9, #1
 8003b16:	4623      	mov	r3, r4
 8003b18:	469a      	mov	sl, r3
 8003b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b1e:	b10a      	cbz	r2, 8003b24 <_svfiprintf_r+0x5c>
 8003b20:	2a25      	cmp	r2, #37	; 0x25
 8003b22:	d1f9      	bne.n	8003b18 <_svfiprintf_r+0x50>
 8003b24:	ebba 0b04 	subs.w	fp, sl, r4
 8003b28:	d00b      	beq.n	8003b42 <_svfiprintf_r+0x7a>
 8003b2a:	465b      	mov	r3, fp
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	4629      	mov	r1, r5
 8003b30:	4638      	mov	r0, r7
 8003b32:	f7ff ff6f 	bl	8003a14 <__ssputs_r>
 8003b36:	3001      	adds	r0, #1
 8003b38:	f000 80a9 	beq.w	8003c8e <_svfiprintf_r+0x1c6>
 8003b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b3e:	445a      	add	r2, fp
 8003b40:	9209      	str	r2, [sp, #36]	; 0x24
 8003b42:	f89a 3000 	ldrb.w	r3, [sl]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80a1 	beq.w	8003c8e <_svfiprintf_r+0x1c6>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b56:	f10a 0a01 	add.w	sl, sl, #1
 8003b5a:	9304      	str	r3, [sp, #16]
 8003b5c:	9307      	str	r3, [sp, #28]
 8003b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b62:	931a      	str	r3, [sp, #104]	; 0x68
 8003b64:	4654      	mov	r4, sl
 8003b66:	2205      	movs	r2, #5
 8003b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b6c:	4850      	ldr	r0, [pc, #320]	; (8003cb0 <_svfiprintf_r+0x1e8>)
 8003b6e:	f7fc fb4f 	bl	8000210 <memchr>
 8003b72:	9a04      	ldr	r2, [sp, #16]
 8003b74:	b9d8      	cbnz	r0, 8003bae <_svfiprintf_r+0xe6>
 8003b76:	06d0      	lsls	r0, r2, #27
 8003b78:	bf44      	itt	mi
 8003b7a:	2320      	movmi	r3, #32
 8003b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b80:	0711      	lsls	r1, r2, #28
 8003b82:	bf44      	itt	mi
 8003b84:	232b      	movmi	r3, #43	; 0x2b
 8003b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b90:	d015      	beq.n	8003bbe <_svfiprintf_r+0xf6>
 8003b92:	9a07      	ldr	r2, [sp, #28]
 8003b94:	4654      	mov	r4, sl
 8003b96:	2000      	movs	r0, #0
 8003b98:	f04f 0c0a 	mov.w	ip, #10
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ba2:	3b30      	subs	r3, #48	; 0x30
 8003ba4:	2b09      	cmp	r3, #9
 8003ba6:	d94d      	bls.n	8003c44 <_svfiprintf_r+0x17c>
 8003ba8:	b1b0      	cbz	r0, 8003bd8 <_svfiprintf_r+0x110>
 8003baa:	9207      	str	r2, [sp, #28]
 8003bac:	e014      	b.n	8003bd8 <_svfiprintf_r+0x110>
 8003bae:	eba0 0308 	sub.w	r3, r0, r8
 8003bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	46a2      	mov	sl, r4
 8003bbc:	e7d2      	b.n	8003b64 <_svfiprintf_r+0x9c>
 8003bbe:	9b03      	ldr	r3, [sp, #12]
 8003bc0:	1d19      	adds	r1, r3, #4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	9103      	str	r1, [sp, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bfbb      	ittet	lt
 8003bca:	425b      	neglt	r3, r3
 8003bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd0:	9307      	strge	r3, [sp, #28]
 8003bd2:	9307      	strlt	r3, [sp, #28]
 8003bd4:	bfb8      	it	lt
 8003bd6:	9204      	strlt	r2, [sp, #16]
 8003bd8:	7823      	ldrb	r3, [r4, #0]
 8003bda:	2b2e      	cmp	r3, #46	; 0x2e
 8003bdc:	d10c      	bne.n	8003bf8 <_svfiprintf_r+0x130>
 8003bde:	7863      	ldrb	r3, [r4, #1]
 8003be0:	2b2a      	cmp	r3, #42	; 0x2a
 8003be2:	d134      	bne.n	8003c4e <_svfiprintf_r+0x186>
 8003be4:	9b03      	ldr	r3, [sp, #12]
 8003be6:	1d1a      	adds	r2, r3, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	9203      	str	r2, [sp, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bfb8      	it	lt
 8003bf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bf4:	3402      	adds	r4, #2
 8003bf6:	9305      	str	r3, [sp, #20]
 8003bf8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003cc0 <_svfiprintf_r+0x1f8>
 8003bfc:	7821      	ldrb	r1, [r4, #0]
 8003bfe:	2203      	movs	r2, #3
 8003c00:	4650      	mov	r0, sl
 8003c02:	f7fc fb05 	bl	8000210 <memchr>
 8003c06:	b138      	cbz	r0, 8003c18 <_svfiprintf_r+0x150>
 8003c08:	9b04      	ldr	r3, [sp, #16]
 8003c0a:	eba0 000a 	sub.w	r0, r0, sl
 8003c0e:	2240      	movs	r2, #64	; 0x40
 8003c10:	4082      	lsls	r2, r0
 8003c12:	4313      	orrs	r3, r2
 8003c14:	3401      	adds	r4, #1
 8003c16:	9304      	str	r3, [sp, #16]
 8003c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c1c:	4825      	ldr	r0, [pc, #148]	; (8003cb4 <_svfiprintf_r+0x1ec>)
 8003c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c22:	2206      	movs	r2, #6
 8003c24:	f7fc faf4 	bl	8000210 <memchr>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d038      	beq.n	8003c9e <_svfiprintf_r+0x1d6>
 8003c2c:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <_svfiprintf_r+0x1f0>)
 8003c2e:	bb1b      	cbnz	r3, 8003c78 <_svfiprintf_r+0x1b0>
 8003c30:	9b03      	ldr	r3, [sp, #12]
 8003c32:	3307      	adds	r3, #7
 8003c34:	f023 0307 	bic.w	r3, r3, #7
 8003c38:	3308      	adds	r3, #8
 8003c3a:	9303      	str	r3, [sp, #12]
 8003c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c3e:	4433      	add	r3, r6
 8003c40:	9309      	str	r3, [sp, #36]	; 0x24
 8003c42:	e768      	b.n	8003b16 <_svfiprintf_r+0x4e>
 8003c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c48:	460c      	mov	r4, r1
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	e7a6      	b.n	8003b9c <_svfiprintf_r+0xd4>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	3401      	adds	r4, #1
 8003c52:	9305      	str	r3, [sp, #20]
 8003c54:	4619      	mov	r1, r3
 8003c56:	f04f 0c0a 	mov.w	ip, #10
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c60:	3a30      	subs	r2, #48	; 0x30
 8003c62:	2a09      	cmp	r2, #9
 8003c64:	d903      	bls.n	8003c6e <_svfiprintf_r+0x1a6>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0c6      	beq.n	8003bf8 <_svfiprintf_r+0x130>
 8003c6a:	9105      	str	r1, [sp, #20]
 8003c6c:	e7c4      	b.n	8003bf8 <_svfiprintf_r+0x130>
 8003c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c72:	4604      	mov	r4, r0
 8003c74:	2301      	movs	r3, #1
 8003c76:	e7f0      	b.n	8003c5a <_svfiprintf_r+0x192>
 8003c78:	ab03      	add	r3, sp, #12
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <_svfiprintf_r+0x1f4>)
 8003c80:	a904      	add	r1, sp, #16
 8003c82:	4638      	mov	r0, r7
 8003c84:	f3af 8000 	nop.w
 8003c88:	1c42      	adds	r2, r0, #1
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	d1d6      	bne.n	8003c3c <_svfiprintf_r+0x174>
 8003c8e:	89ab      	ldrh	r3, [r5, #12]
 8003c90:	065b      	lsls	r3, r3, #25
 8003c92:	f53f af2d 	bmi.w	8003af0 <_svfiprintf_r+0x28>
 8003c96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c98:	b01d      	add	sp, #116	; 0x74
 8003c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9e:	ab03      	add	r3, sp, #12
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	462a      	mov	r2, r5
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <_svfiprintf_r+0x1f4>)
 8003ca6:	a904      	add	r1, sp, #16
 8003ca8:	4638      	mov	r0, r7
 8003caa:	f000 f879 	bl	8003da0 <_printf_i>
 8003cae:	e7eb      	b.n	8003c88 <_svfiprintf_r+0x1c0>
 8003cb0:	08004118 	.word	0x08004118
 8003cb4:	08004122 	.word	0x08004122
 8003cb8:	00000000 	.word	0x00000000
 8003cbc:	08003a15 	.word	0x08003a15
 8003cc0:	0800411e 	.word	0x0800411e

08003cc4 <_printf_common>:
 8003cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc8:	4616      	mov	r6, r2
 8003cca:	4699      	mov	r9, r3
 8003ccc:	688a      	ldr	r2, [r1, #8]
 8003cce:	690b      	ldr	r3, [r1, #16]
 8003cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	bfb8      	it	lt
 8003cd8:	4613      	movlt	r3, r2
 8003cda:	6033      	str	r3, [r6, #0]
 8003cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	b10a      	cbz	r2, 8003cea <_printf_common+0x26>
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	6033      	str	r3, [r6, #0]
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	0699      	lsls	r1, r3, #26
 8003cee:	bf42      	ittt	mi
 8003cf0:	6833      	ldrmi	r3, [r6, #0]
 8003cf2:	3302      	addmi	r3, #2
 8003cf4:	6033      	strmi	r3, [r6, #0]
 8003cf6:	6825      	ldr	r5, [r4, #0]
 8003cf8:	f015 0506 	ands.w	r5, r5, #6
 8003cfc:	d106      	bne.n	8003d0c <_printf_common+0x48>
 8003cfe:	f104 0a19 	add.w	sl, r4, #25
 8003d02:	68e3      	ldr	r3, [r4, #12]
 8003d04:	6832      	ldr	r2, [r6, #0]
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	42ab      	cmp	r3, r5
 8003d0a:	dc26      	bgt.n	8003d5a <_printf_common+0x96>
 8003d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d10:	1e13      	subs	r3, r2, #0
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	bf18      	it	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	0692      	lsls	r2, r2, #26
 8003d1a:	d42b      	bmi.n	8003d74 <_printf_common+0xb0>
 8003d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d20:	4649      	mov	r1, r9
 8003d22:	4638      	mov	r0, r7
 8003d24:	47c0      	blx	r8
 8003d26:	3001      	adds	r0, #1
 8003d28:	d01e      	beq.n	8003d68 <_printf_common+0xa4>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	6922      	ldr	r2, [r4, #16]
 8003d2e:	f003 0306 	and.w	r3, r3, #6
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	bf02      	ittt	eq
 8003d36:	68e5      	ldreq	r5, [r4, #12]
 8003d38:	6833      	ldreq	r3, [r6, #0]
 8003d3a:	1aed      	subeq	r5, r5, r3
 8003d3c:	68a3      	ldr	r3, [r4, #8]
 8003d3e:	bf0c      	ite	eq
 8003d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d44:	2500      	movne	r5, #0
 8003d46:	4293      	cmp	r3, r2
 8003d48:	bfc4      	itt	gt
 8003d4a:	1a9b      	subgt	r3, r3, r2
 8003d4c:	18ed      	addgt	r5, r5, r3
 8003d4e:	2600      	movs	r6, #0
 8003d50:	341a      	adds	r4, #26
 8003d52:	42b5      	cmp	r5, r6
 8003d54:	d11a      	bne.n	8003d8c <_printf_common+0xc8>
 8003d56:	2000      	movs	r0, #0
 8003d58:	e008      	b.n	8003d6c <_printf_common+0xa8>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4652      	mov	r2, sl
 8003d5e:	4649      	mov	r1, r9
 8003d60:	4638      	mov	r0, r7
 8003d62:	47c0      	blx	r8
 8003d64:	3001      	adds	r0, #1
 8003d66:	d103      	bne.n	8003d70 <_printf_common+0xac>
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d70:	3501      	adds	r5, #1
 8003d72:	e7c6      	b.n	8003d02 <_printf_common+0x3e>
 8003d74:	18e1      	adds	r1, r4, r3
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	2030      	movs	r0, #48	; 0x30
 8003d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d7e:	4422      	add	r2, r4
 8003d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d88:	3302      	adds	r3, #2
 8003d8a:	e7c7      	b.n	8003d1c <_printf_common+0x58>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4622      	mov	r2, r4
 8003d90:	4649      	mov	r1, r9
 8003d92:	4638      	mov	r0, r7
 8003d94:	47c0      	blx	r8
 8003d96:	3001      	adds	r0, #1
 8003d98:	d0e6      	beq.n	8003d68 <_printf_common+0xa4>
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7d9      	b.n	8003d52 <_printf_common+0x8e>
	...

08003da0 <_printf_i>:
 8003da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003da4:	7e0f      	ldrb	r7, [r1, #24]
 8003da6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003da8:	2f78      	cmp	r7, #120	; 0x78
 8003daa:	4691      	mov	r9, r2
 8003dac:	4680      	mov	r8, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	469a      	mov	sl, r3
 8003db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003db6:	d807      	bhi.n	8003dc8 <_printf_i+0x28>
 8003db8:	2f62      	cmp	r7, #98	; 0x62
 8003dba:	d80a      	bhi.n	8003dd2 <_printf_i+0x32>
 8003dbc:	2f00      	cmp	r7, #0
 8003dbe:	f000 80d4 	beq.w	8003f6a <_printf_i+0x1ca>
 8003dc2:	2f58      	cmp	r7, #88	; 0x58
 8003dc4:	f000 80c0 	beq.w	8003f48 <_printf_i+0x1a8>
 8003dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dd0:	e03a      	b.n	8003e48 <_printf_i+0xa8>
 8003dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dd6:	2b15      	cmp	r3, #21
 8003dd8:	d8f6      	bhi.n	8003dc8 <_printf_i+0x28>
 8003dda:	a101      	add	r1, pc, #4	; (adr r1, 8003de0 <_printf_i+0x40>)
 8003ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003de0:	08003e39 	.word	0x08003e39
 8003de4:	08003e4d 	.word	0x08003e4d
 8003de8:	08003dc9 	.word	0x08003dc9
 8003dec:	08003dc9 	.word	0x08003dc9
 8003df0:	08003dc9 	.word	0x08003dc9
 8003df4:	08003dc9 	.word	0x08003dc9
 8003df8:	08003e4d 	.word	0x08003e4d
 8003dfc:	08003dc9 	.word	0x08003dc9
 8003e00:	08003dc9 	.word	0x08003dc9
 8003e04:	08003dc9 	.word	0x08003dc9
 8003e08:	08003dc9 	.word	0x08003dc9
 8003e0c:	08003f51 	.word	0x08003f51
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003f0b 	.word	0x08003f0b
 8003e18:	08003dc9 	.word	0x08003dc9
 8003e1c:	08003dc9 	.word	0x08003dc9
 8003e20:	08003f73 	.word	0x08003f73
 8003e24:	08003dc9 	.word	0x08003dc9
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003dc9 	.word	0x08003dc9
 8003e30:	08003dc9 	.word	0x08003dc9
 8003e34:	08003f13 	.word	0x08003f13
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	602a      	str	r2, [r5, #0]
 8003e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e09f      	b.n	8003f8c <_printf_i+0x1ec>
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	682b      	ldr	r3, [r5, #0]
 8003e50:	0607      	lsls	r7, r0, #24
 8003e52:	f103 0104 	add.w	r1, r3, #4
 8003e56:	6029      	str	r1, [r5, #0]
 8003e58:	d501      	bpl.n	8003e5e <_printf_i+0xbe>
 8003e5a:	681e      	ldr	r6, [r3, #0]
 8003e5c:	e003      	b.n	8003e66 <_printf_i+0xc6>
 8003e5e:	0646      	lsls	r6, r0, #25
 8003e60:	d5fb      	bpl.n	8003e5a <_printf_i+0xba>
 8003e62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e66:	2e00      	cmp	r6, #0
 8003e68:	da03      	bge.n	8003e72 <_printf_i+0xd2>
 8003e6a:	232d      	movs	r3, #45	; 0x2d
 8003e6c:	4276      	negs	r6, r6
 8003e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e72:	485a      	ldr	r0, [pc, #360]	; (8003fdc <_printf_i+0x23c>)
 8003e74:	230a      	movs	r3, #10
 8003e76:	e012      	b.n	8003e9e <_printf_i+0xfe>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	1d19      	adds	r1, r3, #4
 8003e7e:	6029      	str	r1, [r5, #0]
 8003e80:	0605      	lsls	r5, r0, #24
 8003e82:	d501      	bpl.n	8003e88 <_printf_i+0xe8>
 8003e84:	681e      	ldr	r6, [r3, #0]
 8003e86:	e002      	b.n	8003e8e <_printf_i+0xee>
 8003e88:	0641      	lsls	r1, r0, #25
 8003e8a:	d5fb      	bpl.n	8003e84 <_printf_i+0xe4>
 8003e8c:	881e      	ldrh	r6, [r3, #0]
 8003e8e:	4853      	ldr	r0, [pc, #332]	; (8003fdc <_printf_i+0x23c>)
 8003e90:	2f6f      	cmp	r7, #111	; 0x6f
 8003e92:	bf0c      	ite	eq
 8003e94:	2308      	moveq	r3, #8
 8003e96:	230a      	movne	r3, #10
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e9e:	6865      	ldr	r5, [r4, #4]
 8003ea0:	60a5      	str	r5, [r4, #8]
 8003ea2:	2d00      	cmp	r5, #0
 8003ea4:	bfa2      	ittt	ge
 8003ea6:	6821      	ldrge	r1, [r4, #0]
 8003ea8:	f021 0104 	bicge.w	r1, r1, #4
 8003eac:	6021      	strge	r1, [r4, #0]
 8003eae:	b90e      	cbnz	r6, 8003eb4 <_printf_i+0x114>
 8003eb0:	2d00      	cmp	r5, #0
 8003eb2:	d04b      	beq.n	8003f4c <_printf_i+0x1ac>
 8003eb4:	4615      	mov	r5, r2
 8003eb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003eba:	fb03 6711 	mls	r7, r3, r1, r6
 8003ebe:	5dc7      	ldrb	r7, [r0, r7]
 8003ec0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ec4:	4637      	mov	r7, r6
 8003ec6:	42bb      	cmp	r3, r7
 8003ec8:	460e      	mov	r6, r1
 8003eca:	d9f4      	bls.n	8003eb6 <_printf_i+0x116>
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d10b      	bne.n	8003ee8 <_printf_i+0x148>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	07de      	lsls	r6, r3, #31
 8003ed4:	d508      	bpl.n	8003ee8 <_printf_i+0x148>
 8003ed6:	6923      	ldr	r3, [r4, #16]
 8003ed8:	6861      	ldr	r1, [r4, #4]
 8003eda:	4299      	cmp	r1, r3
 8003edc:	bfde      	ittt	le
 8003ede:	2330      	movle	r3, #48	; 0x30
 8003ee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ee4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ee8:	1b52      	subs	r2, r2, r5
 8003eea:	6122      	str	r2, [r4, #16]
 8003eec:	f8cd a000 	str.w	sl, [sp]
 8003ef0:	464b      	mov	r3, r9
 8003ef2:	aa03      	add	r2, sp, #12
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	f7ff fee4 	bl	8003cc4 <_printf_common>
 8003efc:	3001      	adds	r0, #1
 8003efe:	d14a      	bne.n	8003f96 <_printf_i+0x1f6>
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	b004      	add	sp, #16
 8003f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	f043 0320 	orr.w	r3, r3, #32
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	4833      	ldr	r0, [pc, #204]	; (8003fe0 <_printf_i+0x240>)
 8003f14:	2778      	movs	r7, #120	; 0x78
 8003f16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	6829      	ldr	r1, [r5, #0]
 8003f1e:	061f      	lsls	r7, r3, #24
 8003f20:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f24:	d402      	bmi.n	8003f2c <_printf_i+0x18c>
 8003f26:	065f      	lsls	r7, r3, #25
 8003f28:	bf48      	it	mi
 8003f2a:	b2b6      	uxthmi	r6, r6
 8003f2c:	07df      	lsls	r7, r3, #31
 8003f2e:	bf48      	it	mi
 8003f30:	f043 0320 	orrmi.w	r3, r3, #32
 8003f34:	6029      	str	r1, [r5, #0]
 8003f36:	bf48      	it	mi
 8003f38:	6023      	strmi	r3, [r4, #0]
 8003f3a:	b91e      	cbnz	r6, 8003f44 <_printf_i+0x1a4>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	f023 0320 	bic.w	r3, r3, #32
 8003f42:	6023      	str	r3, [r4, #0]
 8003f44:	2310      	movs	r3, #16
 8003f46:	e7a7      	b.n	8003e98 <_printf_i+0xf8>
 8003f48:	4824      	ldr	r0, [pc, #144]	; (8003fdc <_printf_i+0x23c>)
 8003f4a:	e7e4      	b.n	8003f16 <_printf_i+0x176>
 8003f4c:	4615      	mov	r5, r2
 8003f4e:	e7bd      	b.n	8003ecc <_printf_i+0x12c>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	6826      	ldr	r6, [r4, #0]
 8003f54:	6961      	ldr	r1, [r4, #20]
 8003f56:	1d18      	adds	r0, r3, #4
 8003f58:	6028      	str	r0, [r5, #0]
 8003f5a:	0635      	lsls	r5, r6, #24
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	d501      	bpl.n	8003f64 <_printf_i+0x1c4>
 8003f60:	6019      	str	r1, [r3, #0]
 8003f62:	e002      	b.n	8003f6a <_printf_i+0x1ca>
 8003f64:	0670      	lsls	r0, r6, #25
 8003f66:	d5fb      	bpl.n	8003f60 <_printf_i+0x1c0>
 8003f68:	8019      	strh	r1, [r3, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	6123      	str	r3, [r4, #16]
 8003f6e:	4615      	mov	r5, r2
 8003f70:	e7bc      	b.n	8003eec <_printf_i+0x14c>
 8003f72:	682b      	ldr	r3, [r5, #0]
 8003f74:	1d1a      	adds	r2, r3, #4
 8003f76:	602a      	str	r2, [r5, #0]
 8003f78:	681d      	ldr	r5, [r3, #0]
 8003f7a:	6862      	ldr	r2, [r4, #4]
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7fc f946 	bl	8000210 <memchr>
 8003f84:	b108      	cbz	r0, 8003f8a <_printf_i+0x1ea>
 8003f86:	1b40      	subs	r0, r0, r5
 8003f88:	6060      	str	r0, [r4, #4]
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	6123      	str	r3, [r4, #16]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f94:	e7aa      	b.n	8003eec <_printf_i+0x14c>
 8003f96:	6923      	ldr	r3, [r4, #16]
 8003f98:	462a      	mov	r2, r5
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	47d0      	blx	sl
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d0ad      	beq.n	8003f00 <_printf_i+0x160>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	079b      	lsls	r3, r3, #30
 8003fa8:	d413      	bmi.n	8003fd2 <_printf_i+0x232>
 8003faa:	68e0      	ldr	r0, [r4, #12]
 8003fac:	9b03      	ldr	r3, [sp, #12]
 8003fae:	4298      	cmp	r0, r3
 8003fb0:	bfb8      	it	lt
 8003fb2:	4618      	movlt	r0, r3
 8003fb4:	e7a6      	b.n	8003f04 <_printf_i+0x164>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4632      	mov	r2, r6
 8003fba:	4649      	mov	r1, r9
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	47d0      	blx	sl
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d09d      	beq.n	8003f00 <_printf_i+0x160>
 8003fc4:	3501      	adds	r5, #1
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	9903      	ldr	r1, [sp, #12]
 8003fca:	1a5b      	subs	r3, r3, r1
 8003fcc:	42ab      	cmp	r3, r5
 8003fce:	dcf2      	bgt.n	8003fb6 <_printf_i+0x216>
 8003fd0:	e7eb      	b.n	8003faa <_printf_i+0x20a>
 8003fd2:	2500      	movs	r5, #0
 8003fd4:	f104 0619 	add.w	r6, r4, #25
 8003fd8:	e7f5      	b.n	8003fc6 <_printf_i+0x226>
 8003fda:	bf00      	nop
 8003fdc:	08004129 	.word	0x08004129
 8003fe0:	0800413a 	.word	0x0800413a

08003fe4 <memmove>:
 8003fe4:	4288      	cmp	r0, r1
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	eb01 0402 	add.w	r4, r1, r2
 8003fec:	d902      	bls.n	8003ff4 <memmove+0x10>
 8003fee:	4284      	cmp	r4, r0
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	d807      	bhi.n	8004004 <memmove+0x20>
 8003ff4:	1e43      	subs	r3, r0, #1
 8003ff6:	42a1      	cmp	r1, r4
 8003ff8:	d008      	beq.n	800400c <memmove+0x28>
 8003ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004002:	e7f8      	b.n	8003ff6 <memmove+0x12>
 8004004:	4402      	add	r2, r0
 8004006:	4601      	mov	r1, r0
 8004008:	428a      	cmp	r2, r1
 800400a:	d100      	bne.n	800400e <memmove+0x2a>
 800400c:	bd10      	pop	{r4, pc}
 800400e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004016:	e7f7      	b.n	8004008 <memmove+0x24>

08004018 <_sbrk_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4d06      	ldr	r5, [pc, #24]	; (8004034 <_sbrk_r+0x1c>)
 800401c:	2300      	movs	r3, #0
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	f7fc fe14 	bl	8000c50 <_sbrk>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_sbrk_r+0x1a>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_sbrk_r+0x1a>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	200002ec 	.word	0x200002ec

08004038 <memcpy>:
 8004038:	440a      	add	r2, r1
 800403a:	4291      	cmp	r1, r2
 800403c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004040:	d100      	bne.n	8004044 <memcpy+0xc>
 8004042:	4770      	bx	lr
 8004044:	b510      	push	{r4, lr}
 8004046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800404a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800404e:	4291      	cmp	r1, r2
 8004050:	d1f9      	bne.n	8004046 <memcpy+0xe>
 8004052:	bd10      	pop	{r4, pc}

08004054 <_realloc_r>:
 8004054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004058:	4680      	mov	r8, r0
 800405a:	4614      	mov	r4, r2
 800405c:	460e      	mov	r6, r1
 800405e:	b921      	cbnz	r1, 800406a <_realloc_r+0x16>
 8004060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004064:	4611      	mov	r1, r2
 8004066:	f7ff bc49 	b.w	80038fc <_malloc_r>
 800406a:	b92a      	cbnz	r2, 8004078 <_realloc_r+0x24>
 800406c:	f7ff fbda 	bl	8003824 <_free_r>
 8004070:	4625      	mov	r5, r4
 8004072:	4628      	mov	r0, r5
 8004074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004078:	f000 f81b 	bl	80040b2 <_malloc_usable_size_r>
 800407c:	4284      	cmp	r4, r0
 800407e:	4607      	mov	r7, r0
 8004080:	d802      	bhi.n	8004088 <_realloc_r+0x34>
 8004082:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004086:	d812      	bhi.n	80040ae <_realloc_r+0x5a>
 8004088:	4621      	mov	r1, r4
 800408a:	4640      	mov	r0, r8
 800408c:	f7ff fc36 	bl	80038fc <_malloc_r>
 8004090:	4605      	mov	r5, r0
 8004092:	2800      	cmp	r0, #0
 8004094:	d0ed      	beq.n	8004072 <_realloc_r+0x1e>
 8004096:	42bc      	cmp	r4, r7
 8004098:	4622      	mov	r2, r4
 800409a:	4631      	mov	r1, r6
 800409c:	bf28      	it	cs
 800409e:	463a      	movcs	r2, r7
 80040a0:	f7ff ffca 	bl	8004038 <memcpy>
 80040a4:	4631      	mov	r1, r6
 80040a6:	4640      	mov	r0, r8
 80040a8:	f7ff fbbc 	bl	8003824 <_free_r>
 80040ac:	e7e1      	b.n	8004072 <_realloc_r+0x1e>
 80040ae:	4635      	mov	r5, r6
 80040b0:	e7df      	b.n	8004072 <_realloc_r+0x1e>

080040b2 <_malloc_usable_size_r>:
 80040b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b6:	1f18      	subs	r0, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bfbc      	itt	lt
 80040bc:	580b      	ldrlt	r3, [r1, r0]
 80040be:	18c0      	addlt	r0, r0, r3
 80040c0:	4770      	bx	lr
	...

080040c4 <_init>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr

080040d0 <_fini>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	bf00      	nop
 80040d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d6:	bc08      	pop	{r3}
 80040d8:	469e      	mov	lr, r3
 80040da:	4770      	bx	lr
