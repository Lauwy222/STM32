
Week15Sinus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004250  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004418  08004418  00014418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004608  08004608  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004610  08004610  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  2000000c  08004624  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08004624  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c6a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001920  00000000  00000000  00029ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  0002b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000667  00000000  00000000  0002be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022495  00000000  00000000  0002c4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b3a3  00000000  00000000  0004e964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5ddf  00000000  00000000  00059d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002594  00000000  00000000  0012fae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0013207c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004400 	.word	0x08004400

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004400 	.word	0x08004400

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b970 	b.w	8000e3c <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9e08      	ldr	r6, [sp, #32]
 8000b7a:	460d      	mov	r5, r1
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	460f      	mov	r7, r1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d14a      	bne.n	8000c1a <__udivmoddi4+0xa6>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4694      	mov	ip, r2
 8000b88:	d965      	bls.n	8000c56 <__udivmoddi4+0xe2>
 8000b8a:	fab2 f382 	clz	r3, r2
 8000b8e:	b143      	cbz	r3, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b94:	f1c3 0220 	rsb	r2, r3, #32
 8000b98:	409f      	lsls	r7, r3
 8000b9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9e:	4317      	orrs	r7, r2
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba6:	fa1f f58c 	uxth.w	r5, ip
 8000baa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bae:	0c22      	lsrs	r2, r4, #16
 8000bb0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb8:	fb01 f005 	mul.w	r0, r1, r5
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x62>
 8000bc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc8:	f080 811c 	bcs.w	8000e04 <__udivmoddi4+0x290>
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	f240 8119 	bls.w	8000e04 <__udivmoddi4+0x290>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	4462      	add	r2, ip
 8000bd6:	1a12      	subs	r2, r2, r0
 8000bd8:	b2a4      	uxth	r4, r4
 8000bda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be6:	fb00 f505 	mul.w	r5, r0, r5
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x90>
 8000bee:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf6:	f080 8107 	bcs.w	8000e08 <__udivmoddi4+0x294>
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	f240 8104 	bls.w	8000e08 <__udivmoddi4+0x294>
 8000c00:	4464      	add	r4, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c08:	1b64      	subs	r4, r4, r5
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11e      	cbz	r6, 8000c16 <__udivmoddi4+0xa2>
 8000c0e:	40dc      	lsrs	r4, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	e9c6 4300 	strd	r4, r3, [r6]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0xbc>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80ed 	beq.w	8000dfe <__udivmoddi4+0x28a>
 8000c24:	2100      	movs	r1, #0
 8000c26:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	fab3 f183 	clz	r1, r3
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d149      	bne.n	8000ccc <__udivmoddi4+0x158>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d302      	bcc.n	8000c42 <__udivmoddi4+0xce>
 8000c3c:	4282      	cmp	r2, r0
 8000c3e:	f200 80f8 	bhi.w	8000e32 <__udivmoddi4+0x2be>
 8000c42:	1a84      	subs	r4, r0, r2
 8000c44:	eb65 0203 	sbc.w	r2, r5, r3
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0e2      	beq.n	8000c16 <__udivmoddi4+0xa2>
 8000c50:	e9c6 4700 	strd	r4, r7, [r6]
 8000c54:	e7df      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xe6>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f382 	clz	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 8090 	bne.w	8000d84 <__udivmoddi4+0x210>
 8000c64:	1a8a      	subs	r2, r1, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f fe8c 	uxth.w	lr, ip
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c74:	fb07 2015 	mls	r0, r7, r5, r2
 8000c78:	0c22      	lsrs	r2, r4, #16
 8000c7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7e:	fb0e f005 	mul.w	r0, lr, r5
 8000c82:	4290      	cmp	r0, r2
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x124>
 8000c86:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x122>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f200 80cb 	bhi.w	8000e2c <__udivmoddi4+0x2b8>
 8000c96:	4645      	mov	r5, r8
 8000c98:	1a12      	subs	r2, r2, r0
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x14e>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	d202      	bcs.n	8000cc0 <__udivmoddi4+0x14c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f200 80bb 	bhi.w	8000e36 <__udivmoddi4+0x2c2>
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	eba4 040e 	sub.w	r4, r4, lr
 8000cc6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cca:	e79f      	b.n	8000c0c <__udivmoddi4+0x98>
 8000ccc:	f1c1 0720 	rsb	r7, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cda:	fa05 f401 	lsl.w	r4, r5, r1
 8000cde:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce2:	40fd      	lsrs	r5, r7
 8000ce4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf6:	0c1c      	lsrs	r4, r3, #16
 8000cf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cfc:	fb08 f50e 	mul.w	r5, r8, lr
 8000d00:	42a5      	cmp	r5, r4
 8000d02:	fa02 f201 	lsl.w	r2, r2, r1
 8000d06:	fa00 f001 	lsl.w	r0, r0, r1
 8000d0a:	d90b      	bls.n	8000d24 <__udivmoddi4+0x1b0>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d14:	f080 8088 	bcs.w	8000e28 <__udivmoddi4+0x2b4>
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	f240 8085 	bls.w	8000e28 <__udivmoddi4+0x2b4>
 8000d1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d22:	4464      	add	r4, ip
 8000d24:	1b64      	subs	r4, r4, r5
 8000d26:	b29d      	uxth	r5, r3
 8000d28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1da>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d44:	d26c      	bcs.n	8000e20 <__udivmoddi4+0x2ac>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	d96a      	bls.n	8000e20 <__udivmoddi4+0x2ac>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	4464      	add	r4, ip
 8000d4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d52:	fba3 9502 	umull	r9, r5, r3, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	42ac      	cmp	r4, r5
 8000d5c:	46c8      	mov	r8, r9
 8000d5e:	46ae      	mov	lr, r5
 8000d60:	d356      	bcc.n	8000e10 <__udivmoddi4+0x29c>
 8000d62:	d053      	beq.n	8000e0c <__udivmoddi4+0x298>
 8000d64:	b156      	cbz	r6, 8000d7c <__udivmoddi4+0x208>
 8000d66:	ebb0 0208 	subs.w	r2, r0, r8
 8000d6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d72:	40ca      	lsrs	r2, r1
 8000d74:	40cc      	lsrs	r4, r1
 8000d76:	4317      	orrs	r7, r2
 8000d78:	e9c6 7400 	strd	r7, r4, [r6]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	f1c3 0120 	rsb	r1, r3, #32
 8000d88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d90:	fa25 f101 	lsr.w	r1, r5, r1
 8000d94:	409d      	lsls	r5, r3
 8000d96:	432a      	orrs	r2, r5
 8000d98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9c:	fa1f fe8c 	uxth.w	lr, ip
 8000da0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da4:	fb07 1510 	mls	r5, r7, r0, r1
 8000da8:	0c11      	lsrs	r1, r2, #16
 8000daa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dae:	fb00 f50e 	mul.w	r5, r0, lr
 8000db2:	428d      	cmp	r5, r1
 8000db4:	fa04 f403 	lsl.w	r4, r4, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x258>
 8000dba:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc2:	d22f      	bcs.n	8000e24 <__udivmoddi4+0x2b0>
 8000dc4:	428d      	cmp	r5, r1
 8000dc6:	d92d      	bls.n	8000e24 <__udivmoddi4+0x2b0>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4461      	add	r1, ip
 8000dcc:	1b49      	subs	r1, r1, r5
 8000dce:	b292      	uxth	r2, r2
 8000dd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ddc:	fb05 f10e 	mul.w	r1, r5, lr
 8000de0:	4291      	cmp	r1, r2
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x282>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dec:	d216      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000dee:	4291      	cmp	r1, r2
 8000df0:	d914      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000df2:	3d02      	subs	r5, #2
 8000df4:	4462      	add	r2, ip
 8000df6:	1a52      	subs	r2, r2, r1
 8000df8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dfc:	e738      	b.n	8000c70 <__udivmoddi4+0xfc>
 8000dfe:	4631      	mov	r1, r6
 8000e00:	4630      	mov	r0, r6
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000e04:	4639      	mov	r1, r7
 8000e06:	e6e6      	b.n	8000bd6 <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e6fb      	b.n	8000c04 <__udivmoddi4+0x90>
 8000e0c:	4548      	cmp	r0, r9
 8000e0e:	d2a9      	bcs.n	8000d64 <__udivmoddi4+0x1f0>
 8000e10:	ebb9 0802 	subs.w	r8, r9, r2
 8000e14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	e7a3      	b.n	8000d64 <__udivmoddi4+0x1f0>
 8000e1c:	4645      	mov	r5, r8
 8000e1e:	e7ea      	b.n	8000df6 <__udivmoddi4+0x282>
 8000e20:	462b      	mov	r3, r5
 8000e22:	e794      	b.n	8000d4e <__udivmoddi4+0x1da>
 8000e24:	4640      	mov	r0, r8
 8000e26:	e7d1      	b.n	8000dcc <__udivmoddi4+0x258>
 8000e28:	46d0      	mov	r8, sl
 8000e2a:	e77b      	b.n	8000d24 <__udivmoddi4+0x1b0>
 8000e2c:	3d02      	subs	r5, #2
 8000e2e:	4462      	add	r2, ip
 8000e30:	e732      	b.n	8000c98 <__udivmoddi4+0x124>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e70a      	b.n	8000c4c <__udivmoddi4+0xd8>
 8000e36:	4464      	add	r4, ip
 8000e38:	3802      	subs	r0, #2
 8000e3a:	e742      	b.n	8000cc2 <__udivmoddi4+0x14e>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b598      	push	{r3, r4, r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fb64 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f87c 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f000 f98e 	bl	800116c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e50:	f000 f962 	bl	8001118 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000e54:	f000 f936 	bl	80010c4 <MX_DAC_Init>
  MX_ADC1_Init();
 8000e58:	f000 f8e2 	bl	8001020 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // of DAC_CHANNEL_2
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4834      	ldr	r0, [pc, #208]	; (8000f30 <main+0xf0>)
 8000e60:	f000 ff41 	bl	8001ce6 <HAL_DAC_Start>


  	     for (i = 0; i < 256; i++) {
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <main+0xf4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e03e      	b.n	8000eea <main+0xaa>
  	        sintab[i] = 2047.0 * sin(i*2*M_PI/256.0) + 2048.0;
 8000e6c:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <main+0xf4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb1a 	bl	80004ac <__aeabi_i2d>
 8000e78:	a329      	add	r3, pc, #164	; (adr r3, 8000f20 <main+0xe0>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fb7f 	bl	8000580 <__aeabi_dmul>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <main+0xf8>)
 8000e90:	f7ff fca0 	bl	80007d4 <__aeabi_ddiv>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	ec43 2b17 	vmov	d7, r2, r3
 8000e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8000ea0:	eef0 0a67 	vmov.f32	s1, s15
 8000ea4:	f002 fa6c 	bl	8003380 <sin>
 8000ea8:	ec51 0b10 	vmov	r0, r1, d0
 8000eac:	a31e      	add	r3, pc, #120	; (adr r3, 8000f28 <main+0xe8>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff fb65 	bl	8000580 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <main+0xfc>)
 8000ec4:	f7ff f9a6 	bl	8000214 <__adddf3>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4919      	ldr	r1, [pc, #100]	; (8000f34 <main+0xf4>)
 8000ece:	680c      	ldr	r4, [r1, #0]
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fe16 	bl	8000b04 <__aeabi_d2uiz>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <main+0x100>)
 8000edc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  	     for (i = 0; i < 256; i++) {
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <main+0xf4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <main+0xf4>)
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <main+0xf4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	ddbc      	ble.n	8000e6c <main+0x2c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	         HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sintab[i]);
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <main+0xf4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <main+0x100>)
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <main+0xf0>)
 8000f02:	f000 ff42 	bl	8001d8a <HAL_DAC_SetValue>
	         i = i + 1;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <main+0xf4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <main+0xf4>)
 8000f0e:	6013      	str	r3, [r2, #0]
	         i = i & 255; // 256 is macht van 2, dus i = i & 255;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <main+0xf4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <main+0xf4>)
 8000f18:	6013      	str	r3, [r2, #0]
	         HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sintab[i]);
 8000f1a:	e7ea      	b.n	8000ef2 <main+0xb2>
 8000f1c:	f3af 8000 	nop.w
 8000f20:	54442d18 	.word	0x54442d18
 8000f24:	400921fb 	.word	0x400921fb
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	409ffc00 	.word	0x409ffc00
 8000f30:	20000474 	.word	0x20000474
 8000f34:	20000028 	.word	0x20000028
 8000f38:	40700000 	.word	0x40700000
 8000f3c:	40a00000 	.word	0x40a00000
 8000f40:	2000002c 	.word	0x2000002c

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	2234      	movs	r2, #52	; 0x34
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 f9e6 	bl	8003324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <SystemClock_Config+0xd4>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a29      	ldr	r2, [pc, #164]	; (8001018 <SystemClock_Config+0xd4>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <SystemClock_Config+0xd4>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f84:	2300      	movs	r3, #0
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <SystemClock_Config+0xd8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <SystemClock_Config+0xd8>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <SystemClock_Config+0xd8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fac:	2310      	movs	r3, #16
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fc46 	bl	8002864 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fde:	f000 f933 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 f8e6 	bl	80021d0 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800100a:	f000 f91d 	bl	8001248 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <MX_ADC1_Init+0x9c>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_ADC1_Init+0x98>)
 800103a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800103e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <MX_ADC1_Init+0xa0>)
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_ADC1_Init+0x98>)
 800106e:	2201      	movs	r2, #1
 8001070:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_ADC1_Init+0x98>)
 800107c:	2201      	movs	r2, #1
 800107e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001082:	f000 fab7 	bl	80015f4 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800108c:	f000 f8dc 	bl	8001248 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001090:	2300      	movs	r3, #0
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_ADC1_Init+0x98>)
 80010a2:	f000 faeb 	bl	800167c <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010ac:	f000 f8cc 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000042c 	.word	0x2000042c
 80010bc:	40012000 	.word	0x40012000
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_DAC_Init+0x4c>)
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <MX_DAC_Init+0x50>)
 80010d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_DAC_Init+0x4c>)
 80010da:	f000 fde2 	bl	8001ca2 <HAL_DAC_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010e4:	f000 f8b0 	bl	8001248 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <MX_DAC_Init+0x4c>)
 80010f8:	f000 fe6c 	bl	8001dd4 <HAL_DAC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001102:	f000 f8a1 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000474 	.word	0x20000474
 8001114:	40007400 	.word	0x40007400

08001118 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_USART2_UART_Init+0x50>)
 8001120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001150:	f001 fe26 	bl	8002da0 <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800115a:	f000 f875 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000488 	.word	0x20000488
 8001168:	40004400 	.word	0x40004400

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a2c      	ldr	r2, [pc, #176]	; (800123c <MX_GPIO_Init+0xd0>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a25      	ldr	r2, [pc, #148]	; (800123c <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <MX_GPIO_Init+0xd0>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2120      	movs	r1, #32
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <MX_GPIO_Init+0xd4>)
 80011f8:	f000 ffd0 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001202:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <MX_GPIO_Init+0xd8>)
 8001214:	f000 fe2e 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001218:	2320      	movs	r3, #32
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_GPIO_Init+0xd4>)
 8001230:	f000 fe20 	bl	8001e74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020800 	.word	0x40020800

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001292:	2007      	movs	r0, #7
 8001294:	f000 fcd2 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_ADC_MspInit+0x7c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d127      	bne.n	8001316 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_ADC_MspInit+0x80>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <HAL_ADC_MspInit+0x80>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_ADC_MspInit+0x80>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_ADC_MspInit+0x80>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_ADC_MspInit+0x80>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_ADC_MspInit+0x80>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fe:	2301      	movs	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_ADC_MspInit+0x84>)
 8001312:	f000 fdaf 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40012000 	.word	0x40012000
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_DAC_MspInit+0x7c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d127      	bne.n	800139e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <HAL_DAC_MspInit+0x80>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a15      	ldr	r2, [pc, #84]	; (80013ac <HAL_DAC_MspInit+0x80>)
 8001358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_DAC_MspInit+0x80>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_DAC_MspInit+0x80>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_DAC_MspInit+0x80>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_DAC_MspInit+0x80>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001386:	2310      	movs	r3, #16
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138a:	2303      	movs	r3, #3
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <HAL_DAC_MspInit+0x84>)
 800139a:	f000 fd6b 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	; 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40007400 	.word	0x40007400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_UART_MspInit+0x84>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12b      	bne.n	800142e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_UART_MspInit+0x88>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_UART_MspInit+0x88>)
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_UART_MspInit+0x88>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_UART_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a10      	ldr	r2, [pc, #64]	; (800143c <HAL_UART_MspInit+0x88>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_UART_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800140e:	230c      	movs	r3, #12
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141e:	2307      	movs	r3, #7
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <HAL_UART_MspInit+0x8c>)
 800142a:	f000 fd23 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40004400 	.word	0x40004400
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f890 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <SystemInit+0x20>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <SystemInit+0x20>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c2:	490e      	ldr	r1, [pc, #56]	; (80014fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d8:	4c0b      	ldr	r4, [pc, #44]	; (8001508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e6:	f7ff ffd7 	bl	8001498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f001 ff23 	bl	8003334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff fca7 	bl	8000e40 <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001500:	08004618 	.word	0x08004618
  ldr r2, =_sbss
 8001504:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001508:	200004d0 	.word	0x200004d0

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_Init+0x40>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_Init+0x40>)
 8001526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_Init+0x40>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 fb7f 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff fe86 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fb89 	bl	8001c8a <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 fb5f 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	200004cc 	.word	0x200004cc

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200004cc 	.word	0x200004cc

080015f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e033      	b.n	8001672 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fe46 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	d118      	bne.n	8001664 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800163a:	f023 0302 	bic.w	r3, r3, #2
 800163e:	f043 0202 	orr.w	r2, r3, #2
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f94a 	bl	80018e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f023 0303 	bic.w	r3, r3, #3
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
 8001662:	e001      	b.n	8001668 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1c>
 8001694:	2302      	movs	r3, #2
 8001696:	e113      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x244>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d925      	bls.n	80016f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68d9      	ldr	r1, [r3, #12]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	3b1e      	subs	r3, #30
 80016be:	2207      	movs	r2, #7
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43da      	mvns	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	400a      	ands	r2, r1
 80016cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68d9      	ldr	r1, [r3, #12]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4403      	add	r3, r0
 80016e6:	3b1e      	subs	r3, #30
 80016e8:	409a      	lsls	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	e022      	b.n	800173a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6919      	ldr	r1, [r3, #16]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	2207      	movs	r2, #7
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	400a      	ands	r2, r1
 8001716:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6919      	ldr	r1, [r3, #16]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	4603      	mov	r3, r0
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4403      	add	r3, r0
 8001730:	409a      	lsls	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b06      	cmp	r3, #6
 8001740:	d824      	bhi.n	800178c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3b05      	subs	r3, #5
 8001754:	221f      	movs	r2, #31
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b05      	subs	r3, #5
 800177e:	fa00 f203 	lsl.w	r2, r0, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
 800178a:	e04c      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d824      	bhi.n	80017de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b23      	subs	r3, #35	; 0x23
 80017a6:	221f      	movs	r2, #31
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43da      	mvns	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	400a      	ands	r2, r1
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	3b23      	subs	r3, #35	; 0x23
 80017d0:	fa00 f203 	lsl.w	r2, r0, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
 80017dc:	e023      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3b41      	subs	r3, #65	; 0x41
 80017f0:	221f      	movs	r2, #31
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	400a      	ands	r2, r1
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b41      	subs	r3, #65	; 0x41
 800181a:	fa00 f203 	lsl.w	r2, r0, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_ADC_ConfigChannel+0x250>)
 8001828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <HAL_ADC_ConfigChannel+0x254>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d10f      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d8>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b12      	cmp	r3, #18
 800183a:	d10b      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_ADC_ConfigChannel+0x254>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12b      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <HAL_ADC_ConfigChannel+0x258>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d003      	beq.n	8001870 <HAL_ADC_ConfigChannel+0x1f4>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b11      	cmp	r3, #17
 800186e:	d122      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_ADC_ConfigChannel+0x258>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d111      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_ADC_ConfigChannel+0x25c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_ADC_ConfigChannel+0x260>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	0c9a      	lsrs	r2, r3, #18
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40012300 	.word	0x40012300
 80018d0:	40012000 	.word	0x40012000
 80018d4:	10000012 	.word	0x10000012
 80018d8:	20000000 	.word	0x20000000
 80018dc:	431bde83 	.word	0x431bde83

080018e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e8:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <ADC_Init+0x1f0>)
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	431a      	orrs	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	021a      	lsls	r2, r3, #8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <ADC_Init+0x1f4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d022      	beq.n	80019be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6899      	ldr	r1, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	e00f      	b.n	80019de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0202 	bic.w	r2, r2, #2
 80019ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6899      	ldr	r1, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e1b      	ldrb	r3, [r3, #24]
 80019f8:	005a      	lsls	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01b      	beq.n	8001a44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	3b01      	subs	r3, #1
 8001a38:	035a      	lsls	r2, r3, #13
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	e007      	b.n	8001a54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	051a      	lsls	r2, r3, #20
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6899      	ldr	r1, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a96:	025a      	lsls	r2, r3, #9
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6899      	ldr	r1, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	029a      	lsls	r2, r3, #10
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40012300 	.word	0x40012300
 8001ad4:	0f000001 	.word	0x0f000001

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff47 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff5c 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffb0 	bl	8001bf8 <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e014      	b.n	8001cde <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	791b      	ldrb	r3, [r3, #4]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d105      	bne.n	8001cca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fb31 	bl	800132c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	795b      	ldrb	r3, [r3, #5]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_DAC_Start+0x16>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e040      	b.n	8001d7e <HAL_DAC_Start+0x98>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2202      	movs	r2, #2
 8001d06:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2201      	movs	r2, #1
 8001d16:	409a      	lsls	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10f      	bne.n	8001d46 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001d30:	2b3c      	cmp	r3, #60	; 0x3c
 8001d32:	d11d      	bne.n	8001d70 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	e014      	b.n	8001d70 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	213c      	movs	r1, #60	; 0x3c
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d107      	bne.n	8001d70 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0202 	orr.w	r2, r2, #2
 8001d6e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	3308      	adds	r3, #8
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e004      	b.n	8001dbe <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	3314      	adds	r3, #20
 8001dbc:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	795b      	ldrb	r3, [r3, #5]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_DAC_ConfigChannel+0x18>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e03c      	b.n	8001e66 <HAL_DAC_ConfigChannel+0x92>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2202      	movs	r2, #2
 8001df6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4013      	ands	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	22c0      	movs	r2, #192	; 0xc0
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e165      	b.n	800215c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8154 	bne.w	8002156 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d005      	beq.n	8001ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d130      	bne.n	8001f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0201 	and.w	r2, r3, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d017      	beq.n	8001f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80ae 	beq.w	8002156 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a5c      	ldr	r2, [pc, #368]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b5a      	ldr	r3, [pc, #360]	; (8002174 <HAL_GPIO_Init+0x300>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002016:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_GPIO_Init+0x304>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4f      	ldr	r2, [pc, #316]	; (800217c <HAL_GPIO_Init+0x308>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x21a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <HAL_GPIO_Init+0x30c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x216>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <HAL_GPIO_Init+0x310>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x212>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_GPIO_Init+0x314>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x20e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4b      	ldr	r2, [pc, #300]	; (800218c <HAL_GPIO_Init+0x318>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x20a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4a      	ldr	r2, [pc, #296]	; (8002190 <HAL_GPIO_Init+0x31c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x206>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_GPIO_Init+0x320>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x202>
 8002072:	2306      	movs	r3, #6
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 8002076:	2307      	movs	r3, #7
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800208e:	2300      	movs	r3, #0
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a0:	4935      	ldr	r1, [pc, #212]	; (8002178 <HAL_GPIO_Init+0x304>)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ae:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d2:	4a31      	ldr	r2, [pc, #196]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d8:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002126:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_GPIO_Init+0x324>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b0f      	cmp	r3, #15
 8002160:	f67f ae96 	bls.w	8001e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40013800 	.word	0x40013800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021800 	.word	0x40021800
 8002198:	40013c00 	.word	0x40013c00

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b8:	e003      	b.n	80021c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0cc      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e4:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d90c      	bls.n	800220c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b65      	ldr	r3, [pc, #404]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b8      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002224:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800222e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	494d      	ldr	r1, [pc, #308]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d044      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d119      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e07f      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d003      	beq.n	800228e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228a:	2b03      	cmp	r3, #3
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06f      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e067      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b37      	ldr	r3, [pc, #220]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4934      	ldr	r1, [pc, #208]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c0:	f7ff f98c 	bl	80015dc <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	e00a      	b.n	80022de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7ff f988 	bl	80015dc <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e04f      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	4b2b      	ldr	r3, [pc, #172]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 020c 	and.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1eb      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b25      	ldr	r3, [pc, #148]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d20c      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e032      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4916      	ldr	r1, [pc, #88]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	490e      	ldr	r1, [pc, #56]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002356:	f000 f855 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 800235a:	4602      	mov	r2, r0
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	490a      	ldr	r1, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f8ec 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023c00 	.word	0x40023c00
 800238c:	40023800 	.word	0x40023800
 8002390:	08004418 	.word	0x08004418
 8002394:	20000000 	.word	0x20000000
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000000 	.word	0x20000000

080023b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023b8:	f7ff fff0 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0a9b      	lsrs	r3, r3, #10
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4903      	ldr	r1, [pc, #12]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08004428 	.word	0x08004428

080023dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023e0:	f7ff ffdc 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0b5b      	lsrs	r3, r3, #13
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4903      	ldr	r1, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	08004428 	.word	0x08004428

08002404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002408:	b0ae      	sub	sp, #184	; 0xb8
 800240a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242a:	4bcb      	ldr	r3, [pc, #812]	; (8002758 <HAL_RCC_GetSysClockFreq+0x354>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b0c      	cmp	r3, #12
 8002434:	f200 8206 	bhi.w	8002844 <HAL_RCC_GetSysClockFreq+0x440>
 8002438:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <HAL_RCC_GetSysClockFreq+0x3c>)
 800243a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243e:	bf00      	nop
 8002440:	08002475 	.word	0x08002475
 8002444:	08002845 	.word	0x08002845
 8002448:	08002845 	.word	0x08002845
 800244c:	08002845 	.word	0x08002845
 8002450:	0800247d 	.word	0x0800247d
 8002454:	08002845 	.word	0x08002845
 8002458:	08002845 	.word	0x08002845
 800245c:	08002845 	.word	0x08002845
 8002460:	08002485 	.word	0x08002485
 8002464:	08002845 	.word	0x08002845
 8002468:	08002845 	.word	0x08002845
 800246c:	08002845 	.word	0x08002845
 8002470:	08002675 	.word	0x08002675
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4bb9      	ldr	r3, [pc, #740]	; (800275c <HAL_RCC_GetSysClockFreq+0x358>)
 8002476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800247a:	e1e7      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247c:	4bb8      	ldr	r3, [pc, #736]	; (8002760 <HAL_RCC_GetSysClockFreq+0x35c>)
 800247e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002482:	e1e3      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002484:	4bb4      	ldr	r3, [pc, #720]	; (8002758 <HAL_RCC_GetSysClockFreq+0x354>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002490:	4bb1      	ldr	r3, [pc, #708]	; (8002758 <HAL_RCC_GetSysClockFreq+0x354>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d071      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249c:	4bae      	ldr	r3, [pc, #696]	; (8002758 <HAL_RCC_GetSysClockFreq+0x354>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024c2:	4622      	mov	r2, r4
 80024c4:	462b      	mov	r3, r5
 80024c6:	f04f 0000 	mov.w	r0, #0
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	0159      	lsls	r1, r3, #5
 80024d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d4:	0150      	lsls	r0, r2, #5
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4621      	mov	r1, r4
 80024dc:	1a51      	subs	r1, r2, r1
 80024de:	6439      	str	r1, [r7, #64]	; 0x40
 80024e0:	4629      	mov	r1, r5
 80024e2:	eb63 0301 	sbc.w	r3, r3, r1
 80024e6:	647b      	str	r3, [r7, #68]	; 0x44
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80024f4:	4649      	mov	r1, r9
 80024f6:	018b      	lsls	r3, r1, #6
 80024f8:	4641      	mov	r1, r8
 80024fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024fe:	4641      	mov	r1, r8
 8002500:	018a      	lsls	r2, r1, #6
 8002502:	4641      	mov	r1, r8
 8002504:	1a51      	subs	r1, r2, r1
 8002506:	63b9      	str	r1, [r7, #56]	; 0x38
 8002508:	4649      	mov	r1, r9
 800250a:	eb63 0301 	sbc.w	r3, r3, r1
 800250e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800251c:	4649      	mov	r1, r9
 800251e:	00cb      	lsls	r3, r1, #3
 8002520:	4641      	mov	r1, r8
 8002522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002526:	4641      	mov	r1, r8
 8002528:	00ca      	lsls	r2, r1, #3
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	4603      	mov	r3, r0
 8002530:	4622      	mov	r2, r4
 8002532:	189b      	adds	r3, r3, r2
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
 8002536:	462b      	mov	r3, r5
 8002538:	460a      	mov	r2, r1
 800253a:	eb42 0303 	adc.w	r3, r2, r3
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800254c:	4629      	mov	r1, r5
 800254e:	024b      	lsls	r3, r1, #9
 8002550:	4621      	mov	r1, r4
 8002552:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002556:	4621      	mov	r1, r4
 8002558:	024a      	lsls	r2, r1, #9
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002562:	2200      	movs	r2, #0
 8002564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800256c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002570:	f7fe fae8 	bl	8000b44 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4613      	mov	r3, r2
 800257a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800257e:	e067      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002580:	4b75      	ldr	r3, [pc, #468]	; (8002758 <HAL_RCC_GetSysClockFreq+0x354>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800258c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002598:	67bb      	str	r3, [r7, #120]	; 0x78
 800259a:	2300      	movs	r3, #0
 800259c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800259e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80025a2:	4622      	mov	r2, r4
 80025a4:	462b      	mov	r3, r5
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b4:	0150      	lsls	r0, r2, #5
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4621      	mov	r1, r4
 80025bc:	1a51      	subs	r1, r2, r1
 80025be:	62b9      	str	r1, [r7, #40]	; 0x28
 80025c0:	4629      	mov	r1, r5
 80025c2:	eb63 0301 	sbc.w	r3, r3, r1
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025d4:	4649      	mov	r1, r9
 80025d6:	018b      	lsls	r3, r1, #6
 80025d8:	4641      	mov	r1, r8
 80025da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025de:	4641      	mov	r1, r8
 80025e0:	018a      	lsls	r2, r1, #6
 80025e2:	4641      	mov	r1, r8
 80025e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80025e8:	4649      	mov	r1, r9
 80025ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002602:	4692      	mov	sl, r2
 8002604:	469b      	mov	fp, r3
 8002606:	4623      	mov	r3, r4
 8002608:	eb1a 0303 	adds.w	r3, sl, r3
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	462b      	mov	r3, r5
 8002610:	eb4b 0303 	adc.w	r3, fp, r3
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002622:	4629      	mov	r1, r5
 8002624:	028b      	lsls	r3, r1, #10
 8002626:	4621      	mov	r1, r4
 8002628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800262c:	4621      	mov	r1, r4
 800262e:	028a      	lsls	r2, r1, #10
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002638:	2200      	movs	r2, #0
 800263a:	673b      	str	r3, [r7, #112]	; 0x70
 800263c:	677a      	str	r2, [r7, #116]	; 0x74
 800263e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002642:	f7fe fa7f 	bl	8000b44 <__aeabi_uldivmod>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4613      	mov	r3, r2
 800264c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002650:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_GetSysClockFreq+0x354>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	3301      	adds	r3, #1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002672:	e0eb      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002674:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_RCC_GetSysClockFreq+0x354>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800267c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002680:	4b35      	ldr	r3, [pc, #212]	; (8002758 <HAL_RCC_GetSysClockFreq+0x354>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d06b      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268c:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_RCC_GetSysClockFreq+0x354>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	2200      	movs	r2, #0
 8002694:	66bb      	str	r3, [r7, #104]	; 0x68
 8002696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800269a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269e:	663b      	str	r3, [r7, #96]	; 0x60
 80026a0:	2300      	movs	r3, #0
 80026a2:	667b      	str	r3, [r7, #100]	; 0x64
 80026a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80026a8:	4622      	mov	r2, r4
 80026aa:	462b      	mov	r3, r5
 80026ac:	f04f 0000 	mov.w	r0, #0
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	0159      	lsls	r1, r3, #5
 80026b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ba:	0150      	lsls	r0, r2, #5
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4621      	mov	r1, r4
 80026c2:	1a51      	subs	r1, r2, r1
 80026c4:	61b9      	str	r1, [r7, #24]
 80026c6:	4629      	mov	r1, r5
 80026c8:	eb63 0301 	sbc.w	r3, r3, r1
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026da:	4659      	mov	r1, fp
 80026dc:	018b      	lsls	r3, r1, #6
 80026de:	4651      	mov	r1, sl
 80026e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e4:	4651      	mov	r1, sl
 80026e6:	018a      	lsls	r2, r1, #6
 80026e8:	4651      	mov	r1, sl
 80026ea:	ebb2 0801 	subs.w	r8, r2, r1
 80026ee:	4659      	mov	r1, fp
 80026f0:	eb63 0901 	sbc.w	r9, r3, r1
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002700:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002704:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002708:	4690      	mov	r8, r2
 800270a:	4699      	mov	r9, r3
 800270c:	4623      	mov	r3, r4
 800270e:	eb18 0303 	adds.w	r3, r8, r3
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	462b      	mov	r3, r5
 8002716:	eb49 0303 	adc.w	r3, r9, r3
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002728:	4629      	mov	r1, r5
 800272a:	024b      	lsls	r3, r1, #9
 800272c:	4621      	mov	r1, r4
 800272e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002732:	4621      	mov	r1, r4
 8002734:	024a      	lsls	r2, r1, #9
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800273e:	2200      	movs	r2, #0
 8002740:	65bb      	str	r3, [r7, #88]	; 0x58
 8002742:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002744:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002748:	f7fe f9fc 	bl	8000b44 <__aeabi_uldivmod>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4613      	mov	r3, r2
 8002752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002756:	e065      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x420>
 8002758:	40023800 	.word	0x40023800
 800275c:	00f42400 	.word	0x00f42400
 8002760:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002764:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_RCC_GetSysClockFreq+0x458>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	2200      	movs	r2, #0
 800276c:	4618      	mov	r0, r3
 800276e:	4611      	mov	r1, r2
 8002770:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002774:	653b      	str	r3, [r7, #80]	; 0x50
 8002776:	2300      	movs	r3, #0
 8002778:	657b      	str	r3, [r7, #84]	; 0x54
 800277a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800277e:	4642      	mov	r2, r8
 8002780:	464b      	mov	r3, r9
 8002782:	f04f 0000 	mov.w	r0, #0
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	0159      	lsls	r1, r3, #5
 800278c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002790:	0150      	lsls	r0, r2, #5
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4641      	mov	r1, r8
 8002798:	1a51      	subs	r1, r2, r1
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	4649      	mov	r1, r9
 800279e:	eb63 0301 	sbc.w	r3, r3, r1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027b0:	4659      	mov	r1, fp
 80027b2:	018b      	lsls	r3, r1, #6
 80027b4:	4651      	mov	r1, sl
 80027b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ba:	4651      	mov	r1, sl
 80027bc:	018a      	lsls	r2, r1, #6
 80027be:	4651      	mov	r1, sl
 80027c0:	1a54      	subs	r4, r2, r1
 80027c2:	4659      	mov	r1, fp
 80027c4:	eb63 0501 	sbc.w	r5, r3, r1
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	00eb      	lsls	r3, r5, #3
 80027d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d6:	00e2      	lsls	r2, r4, #3
 80027d8:	4614      	mov	r4, r2
 80027da:	461d      	mov	r5, r3
 80027dc:	4643      	mov	r3, r8
 80027de:	18e3      	adds	r3, r4, r3
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	464b      	mov	r3, r9
 80027e4:	eb45 0303 	adc.w	r3, r5, r3
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027f6:	4629      	mov	r1, r5
 80027f8:	028b      	lsls	r3, r1, #10
 80027fa:	4621      	mov	r1, r4
 80027fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002800:	4621      	mov	r1, r4
 8002802:	028a      	lsls	r2, r1, #10
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800280c:	2200      	movs	r2, #0
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002810:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002812:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002816:	f7fe f995 	bl	8000b44 <__aeabi_uldivmod>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4613      	mov	r3, r2
 8002820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002824:	4b0d      	ldr	r3, [pc, #52]	; (800285c <HAL_RCC_GetSysClockFreq+0x458>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	0f1b      	lsrs	r3, r3, #28
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002842:	e003      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800284a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002850:	4618      	mov	r0, r3
 8002852:	37b8      	adds	r7, #184	; 0xb8
 8002854:	46bd      	mov	sp, r7
 8002856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	00f42400 	.word	0x00f42400

08002864 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e28d      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8083 	beq.w	800298a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002884:	4b94      	ldr	r3, [pc, #592]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b04      	cmp	r3, #4
 800288e:	d019      	beq.n	80028c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002890:	4b91      	ldr	r3, [pc, #580]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002898:	2b08      	cmp	r3, #8
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800289c:	4b8e      	ldr	r3, [pc, #568]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a8:	d00c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b8b      	ldr	r3, [pc, #556]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d112      	bne.n	80028dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b6:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c2:	d10b      	bne.n	80028dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	4b84      	ldr	r3, [pc, #528]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d05b      	beq.n	8002988 <HAL_RCC_OscConfig+0x124>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d157      	bne.n	8002988 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e25a      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e4:	d106      	bne.n	80028f4 <HAL_RCC_OscConfig+0x90>
 80028e6:	4b7c      	ldr	r3, [pc, #496]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a7b      	ldr	r2, [pc, #492]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e01d      	b.n	8002930 <HAL_RCC_OscConfig+0xcc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0xb4>
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a75      	ldr	r2, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a72      	ldr	r2, [pc, #456]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0xcc>
 8002918:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6e      	ldr	r2, [pc, #440]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b6c      	ldr	r3, [pc, #432]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a6b      	ldr	r2, [pc, #428]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fe50 	bl	80015dc <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe fe4c 	bl	80015dc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e21f      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b61      	ldr	r3, [pc, #388]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0xdc>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fe3c 	bl	80015dc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fe38 	bl	80015dc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e20b      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x104>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d06f      	beq.n	8002a76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d017      	beq.n	80029d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029a2:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d105      	bne.n	80029ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x186>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1d3      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4937      	ldr	r1, [pc, #220]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e03a      	b.n	8002a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_RCC_OscConfig+0x278>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fde5 	bl	80015dc <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fde1 	bl	80015dc <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1b4      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4925      	ldr	r1, [pc, #148]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x278>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fdc4 	bl	80015dc <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe fdc0 	bl	80015dc <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e193      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d036      	beq.n	8002af0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCC_OscConfig+0x27c>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe fda4 	bl	80015dc <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fe fda0 	bl	80015dc <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e173      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x234>
 8002ab6:	e01b      	b.n	8002af0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_OscConfig+0x27c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe fd8d 	bl	80015dc <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e00e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fd89 	bl	80015dc <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d907      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e15c      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	42470000 	.word	0x42470000
 8002ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ea      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8097 	beq.w	8002c2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b7f      	ldr	r3, [pc, #508]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a7e      	ldr	r2, [pc, #504]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b7c      	ldr	r3, [pc, #496]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b79      	ldr	r3, [pc, #484]	; (8002d14 <HAL_RCC_OscConfig+0x4b0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x4b0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a75      	ldr	r2, [pc, #468]	; (8002d14 <HAL_RCC_OscConfig+0x4b0>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7fe fd49 	bl	80015dc <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7fe fd45 	bl	80015dc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e118      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b6c      	ldr	r3, [pc, #432]	; (8002d14 <HAL_RCC_OscConfig+0x4b0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x31e>
 8002b74:	4b66      	ldr	r3, [pc, #408]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x358>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x340>
 8002b8a:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a60      	ldr	r2, [pc, #384]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	4b5e      	ldr	r3, [pc, #376]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	4a5d      	ldr	r2, [pc, #372]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0x358>
 8002ba4:	4b5a      	ldr	r3, [pc, #360]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a59      	ldr	r2, [pc, #356]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb0:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a56      	ldr	r2, [pc, #344]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002bb6:	f023 0304 	bic.w	r3, r3, #4
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fd0a 	bl	80015dc <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fd06 	bl	80015dc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0d7      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ee      	beq.n	8002bcc <HAL_RCC_OscConfig+0x368>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fcf4 	bl	80015dc <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fcf0 	bl	80015dc <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0c1      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	4b40      	ldr	r3, [pc, #256]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ee      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80ad 	beq.w	8002d90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c36:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d060      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d145      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b33      	ldr	r3, [pc, #204]	; (8002d18 <HAL_RCC_OscConfig+0x4b4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fcc4 	bl	80015dc <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fcc0 	bl	80015dc <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e093      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	071b      	lsls	r3, r3, #28
 8002ca2:	491b      	ldr	r1, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x4b4>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe fc95 	bl	80015dc <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe fc91 	bl	80015dc <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e064      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x452>
 8002cd4:	e05c      	b.n	8002d90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_RCC_OscConfig+0x4b4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fc7e 	bl	80015dc <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe fc7a 	bl	80015dc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e04d      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x480>
 8002d02:	e045      	b.n	8002d90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e040      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40007000 	.word	0x40007000
 8002d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <HAL_RCC_OscConfig+0x538>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d030      	beq.n	8002d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d129      	bne.n	8002d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d122      	bne.n	8002d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d119      	bne.n	8002d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	3b01      	subs	r3, #1
 8002d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d10f      	bne.n	8002d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800

08002da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e03f      	b.n	8002e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe faf4 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f829 	bl	8002e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e40:	b0c0      	sub	sp, #256	; 0x100
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	68d9      	ldr	r1, [r3, #12]
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	ea40 0301 	orr.w	r3, r0, r1
 8002e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e94:	f021 010c 	bic.w	r1, r1, #12
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	6999      	ldr	r1, [r3, #24]
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	ea40 0301 	orr.w	r3, r0, r1
 8002ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <UART_SetConfig+0x2cc>)
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d005      	beq.n	8002edc <UART_SetConfig+0xa0>
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b8d      	ldr	r3, [pc, #564]	; (800310c <UART_SetConfig+0x2d0>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d104      	bne.n	8002ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002edc:	f7ff fa7e 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 8002ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ee4:	e003      	b.n	8002eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ee6:	f7ff fa65 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 8002eea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef8:	f040 810c 	bne.w	8003114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f00:	2200      	movs	r2, #0
 8002f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	1891      	adds	r1, r2, r2
 8002f14:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f16:	415b      	adcs	r3, r3
 8002f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f1e:	4621      	mov	r1, r4
 8002f20:	eb12 0801 	adds.w	r8, r2, r1
 8002f24:	4629      	mov	r1, r5
 8002f26:	eb43 0901 	adc.w	r9, r3, r1
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f3e:	4690      	mov	r8, r2
 8002f40:	4699      	mov	r9, r3
 8002f42:	4623      	mov	r3, r4
 8002f44:	eb18 0303 	adds.w	r3, r8, r3
 8002f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f4c:	462b      	mov	r3, r5
 8002f4e:	eb49 0303 	adc.w	r3, r9, r3
 8002f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	18db      	adds	r3, r3, r3
 8002f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f70:	4613      	mov	r3, r2
 8002f72:	eb42 0303 	adc.w	r3, r2, r3
 8002f76:	657b      	str	r3, [r7, #84]	; 0x54
 8002f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f80:	f7fd fde0 	bl	8000b44 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4b61      	ldr	r3, [pc, #388]	; (8003110 <UART_SetConfig+0x2d4>)
 8002f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	011c      	lsls	r4, r3, #4
 8002f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	1891      	adds	r1, r2, r2
 8002faa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fac:	415b      	adcs	r3, r3
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fba:	4649      	mov	r1, r9
 8002fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fd4:	4692      	mov	sl, r2
 8002fd6:	469b      	mov	fp, r3
 8002fd8:	4643      	mov	r3, r8
 8002fda:	eb1a 0303 	adds.w	r3, sl, r3
 8002fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8002fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003000:	460b      	mov	r3, r1
 8003002:	18db      	adds	r3, r3, r3
 8003004:	643b      	str	r3, [r7, #64]	; 0x40
 8003006:	4613      	mov	r3, r2
 8003008:	eb42 0303 	adc.w	r3, r2, r3
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
 800300e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003016:	f7fd fd95 	bl	8000b44 <__aeabi_uldivmod>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4611      	mov	r1, r2
 8003020:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <UART_SetConfig+0x2d4>)
 8003022:	fba3 2301 	umull	r2, r3, r3, r1
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2264      	movs	r2, #100	; 0x64
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	1acb      	subs	r3, r1, r3
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003036:	4b36      	ldr	r3, [pc, #216]	; (8003110 <UART_SetConfig+0x2d4>)
 8003038:	fba3 2302 	umull	r2, r3, r3, r2
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003044:	441c      	add	r4, r3
 8003046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800304a:	2200      	movs	r2, #0
 800304c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003050:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003058:	4642      	mov	r2, r8
 800305a:	464b      	mov	r3, r9
 800305c:	1891      	adds	r1, r2, r2
 800305e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003060:	415b      	adcs	r3, r3
 8003062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003068:	4641      	mov	r1, r8
 800306a:	1851      	adds	r1, r2, r1
 800306c:	6339      	str	r1, [r7, #48]	; 0x30
 800306e:	4649      	mov	r1, r9
 8003070:	414b      	adcs	r3, r1
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003080:	4659      	mov	r1, fp
 8003082:	00cb      	lsls	r3, r1, #3
 8003084:	4651      	mov	r1, sl
 8003086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800308a:	4651      	mov	r1, sl
 800308c:	00ca      	lsls	r2, r1, #3
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	4603      	mov	r3, r0
 8003094:	4642      	mov	r2, r8
 8003096:	189b      	adds	r3, r3, r2
 8003098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800309c:	464b      	mov	r3, r9
 800309e:	460a      	mov	r2, r1
 80030a0:	eb42 0303 	adc.w	r3, r2, r3
 80030a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030bc:	460b      	mov	r3, r1
 80030be:	18db      	adds	r3, r3, r3
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c2:	4613      	mov	r3, r2
 80030c4:	eb42 0303 	adc.w	r3, r2, r3
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030d2:	f7fd fd37 	bl	8000b44 <__aeabi_uldivmod>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <UART_SetConfig+0x2d4>)
 80030dc:	fba3 1302 	umull	r1, r3, r3, r2
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	2164      	movs	r1, #100	; 0x64
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	3332      	adds	r3, #50	; 0x32
 80030ee:	4a08      	ldr	r2, [pc, #32]	; (8003110 <UART_SetConfig+0x2d4>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	f003 0207 	and.w	r2, r3, #7
 80030fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4422      	add	r2, r4
 8003102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003104:	e106      	b.n	8003314 <UART_SetConfig+0x4d8>
 8003106:	bf00      	nop
 8003108:	40011000 	.word	0x40011000
 800310c:	40011400 	.word	0x40011400
 8003110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800311e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003126:	4642      	mov	r2, r8
 8003128:	464b      	mov	r3, r9
 800312a:	1891      	adds	r1, r2, r2
 800312c:	6239      	str	r1, [r7, #32]
 800312e:	415b      	adcs	r3, r3
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003136:	4641      	mov	r1, r8
 8003138:	1854      	adds	r4, r2, r1
 800313a:	4649      	mov	r1, r9
 800313c:	eb43 0501 	adc.w	r5, r3, r1
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	00eb      	lsls	r3, r5, #3
 800314a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314e:	00e2      	lsls	r2, r4, #3
 8003150:	4614      	mov	r4, r2
 8003152:	461d      	mov	r5, r3
 8003154:	4643      	mov	r3, r8
 8003156:	18e3      	adds	r3, r4, r3
 8003158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800315c:	464b      	mov	r3, r9
 800315e:	eb45 0303 	adc.w	r3, r5, r3
 8003162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003182:	4629      	mov	r1, r5
 8003184:	008b      	lsls	r3, r1, #2
 8003186:	4621      	mov	r1, r4
 8003188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800318c:	4621      	mov	r1, r4
 800318e:	008a      	lsls	r2, r1, #2
 8003190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003194:	f7fd fcd6 	bl	8000b44 <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4b60      	ldr	r3, [pc, #384]	; (8003320 <UART_SetConfig+0x4e4>)
 800319e:	fba3 2302 	umull	r2, r3, r3, r2
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	011c      	lsls	r4, r3, #4
 80031a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	1891      	adds	r1, r2, r2
 80031be:	61b9      	str	r1, [r7, #24]
 80031c0:	415b      	adcs	r3, r3
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c8:	4641      	mov	r1, r8
 80031ca:	1851      	adds	r1, r2, r1
 80031cc:	6139      	str	r1, [r7, #16]
 80031ce:	4649      	mov	r1, r9
 80031d0:	414b      	adcs	r3, r1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031e0:	4659      	mov	r1, fp
 80031e2:	00cb      	lsls	r3, r1, #3
 80031e4:	4651      	mov	r1, sl
 80031e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ea:	4651      	mov	r1, sl
 80031ec:	00ca      	lsls	r2, r1, #3
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	4642      	mov	r2, r8
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031fc:	464b      	mov	r3, r9
 80031fe:	460a      	mov	r2, r1
 8003200:	eb42 0303 	adc.w	r3, r2, r3
 8003204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	67bb      	str	r3, [r7, #120]	; 0x78
 8003212:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003220:	4649      	mov	r1, r9
 8003222:	008b      	lsls	r3, r1, #2
 8003224:	4641      	mov	r1, r8
 8003226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322a:	4641      	mov	r1, r8
 800322c:	008a      	lsls	r2, r1, #2
 800322e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003232:	f7fd fc87 	bl	8000b44 <__aeabi_uldivmod>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4611      	mov	r1, r2
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <UART_SetConfig+0x4e4>)
 800323e:	fba3 2301 	umull	r2, r3, r3, r1
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2264      	movs	r2, #100	; 0x64
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	1acb      	subs	r3, r1, r3
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	3332      	adds	r3, #50	; 0x32
 8003250:	4a33      	ldr	r2, [pc, #204]	; (8003320 <UART_SetConfig+0x4e4>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800325c:	441c      	add	r4, r3
 800325e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003262:	2200      	movs	r2, #0
 8003264:	673b      	str	r3, [r7, #112]	; 0x70
 8003266:	677a      	str	r2, [r7, #116]	; 0x74
 8003268:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	1891      	adds	r1, r2, r2
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	415b      	adcs	r3, r3
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800327c:	4641      	mov	r1, r8
 800327e:	1851      	adds	r1, r2, r1
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	4649      	mov	r1, r9
 8003284:	414b      	adcs	r3, r1
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003294:	4659      	mov	r1, fp
 8003296:	00cb      	lsls	r3, r1, #3
 8003298:	4651      	mov	r1, sl
 800329a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800329e:	4651      	mov	r1, sl
 80032a0:	00ca      	lsls	r2, r1, #3
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	4642      	mov	r2, r8
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80032ae:	464b      	mov	r3, r9
 80032b0:	460a      	mov	r2, r1
 80032b2:	eb42 0303 	adc.w	r3, r2, r3
 80032b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	663b      	str	r3, [r7, #96]	; 0x60
 80032c2:	667a      	str	r2, [r7, #100]	; 0x64
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032d0:	4649      	mov	r1, r9
 80032d2:	008b      	lsls	r3, r1, #2
 80032d4:	4641      	mov	r1, r8
 80032d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032da:	4641      	mov	r1, r8
 80032dc:	008a      	lsls	r2, r1, #2
 80032de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032e2:	f7fd fc2f 	bl	8000b44 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <UART_SetConfig+0x4e4>)
 80032ec:	fba3 1302 	umull	r1, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2164      	movs	r1, #100	; 0x64
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	3332      	adds	r3, #50	; 0x32
 80032fe:	4a08      	ldr	r2, [pc, #32]	; (8003320 <UART_SetConfig+0x4e4>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	f003 020f 	and.w	r2, r3, #15
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4422      	add	r2, r4
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800331a:	46bd      	mov	sp, r7
 800331c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003320:	51eb851f 	.word	0x51eb851f

08003324 <memset>:
 8003324:	4402      	add	r2, r0
 8003326:	4603      	mov	r3, r0
 8003328:	4293      	cmp	r3, r2
 800332a:	d100      	bne.n	800332e <memset+0xa>
 800332c:	4770      	bx	lr
 800332e:	f803 1b01 	strb.w	r1, [r3], #1
 8003332:	e7f9      	b.n	8003328 <memset+0x4>

08003334 <__libc_init_array>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4d0d      	ldr	r5, [pc, #52]	; (800336c <__libc_init_array+0x38>)
 8003338:	4c0d      	ldr	r4, [pc, #52]	; (8003370 <__libc_init_array+0x3c>)
 800333a:	1b64      	subs	r4, r4, r5
 800333c:	10a4      	asrs	r4, r4, #2
 800333e:	2600      	movs	r6, #0
 8003340:	42a6      	cmp	r6, r4
 8003342:	d109      	bne.n	8003358 <__libc_init_array+0x24>
 8003344:	4d0b      	ldr	r5, [pc, #44]	; (8003374 <__libc_init_array+0x40>)
 8003346:	4c0c      	ldr	r4, [pc, #48]	; (8003378 <__libc_init_array+0x44>)
 8003348:	f001 f85a 	bl	8004400 <_init>
 800334c:	1b64      	subs	r4, r4, r5
 800334e:	10a4      	asrs	r4, r4, #2
 8003350:	2600      	movs	r6, #0
 8003352:	42a6      	cmp	r6, r4
 8003354:	d105      	bne.n	8003362 <__libc_init_array+0x2e>
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	f855 3b04 	ldr.w	r3, [r5], #4
 800335c:	4798      	blx	r3
 800335e:	3601      	adds	r6, #1
 8003360:	e7ee      	b.n	8003340 <__libc_init_array+0xc>
 8003362:	f855 3b04 	ldr.w	r3, [r5], #4
 8003366:	4798      	blx	r3
 8003368:	3601      	adds	r6, #1
 800336a:	e7f2      	b.n	8003352 <__libc_init_array+0x1e>
 800336c:	08004610 	.word	0x08004610
 8003370:	08004610 	.word	0x08004610
 8003374:	08004610 	.word	0x08004610
 8003378:	08004614 	.word	0x08004614
 800337c:	00000000 	.word	0x00000000

08003380 <sin>:
 8003380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003382:	ec53 2b10 	vmov	r2, r3, d0
 8003386:	4828      	ldr	r0, [pc, #160]	; (8003428 <sin+0xa8>)
 8003388:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800338c:	4281      	cmp	r1, r0
 800338e:	dc07      	bgt.n	80033a0 <sin+0x20>
 8003390:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003420 <sin+0xa0>
 8003394:	2000      	movs	r0, #0
 8003396:	b005      	add	sp, #20
 8003398:	f85d eb04 	ldr.w	lr, [sp], #4
 800339c:	f000 b910 	b.w	80035c0 <__kernel_sin>
 80033a0:	4822      	ldr	r0, [pc, #136]	; (800342c <sin+0xac>)
 80033a2:	4281      	cmp	r1, r0
 80033a4:	dd09      	ble.n	80033ba <sin+0x3a>
 80033a6:	ee10 0a10 	vmov	r0, s0
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7fc ff30 	bl	8000210 <__aeabi_dsub>
 80033b0:	ec41 0b10 	vmov	d0, r0, r1
 80033b4:	b005      	add	sp, #20
 80033b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80033ba:	4668      	mov	r0, sp
 80033bc:	f000 f9c0 	bl	8003740 <__ieee754_rem_pio2>
 80033c0:	f000 0003 	and.w	r0, r0, #3
 80033c4:	2801      	cmp	r0, #1
 80033c6:	d00c      	beq.n	80033e2 <sin+0x62>
 80033c8:	2802      	cmp	r0, #2
 80033ca:	d011      	beq.n	80033f0 <sin+0x70>
 80033cc:	b9f0      	cbnz	r0, 800340c <sin+0x8c>
 80033ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80033d2:	ed9d 0b00 	vldr	d0, [sp]
 80033d6:	2001      	movs	r0, #1
 80033d8:	f000 f8f2 	bl	80035c0 <__kernel_sin>
 80033dc:	ec51 0b10 	vmov	r0, r1, d0
 80033e0:	e7e6      	b.n	80033b0 <sin+0x30>
 80033e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80033e6:	ed9d 0b00 	vldr	d0, [sp]
 80033ea:	f000 f821 	bl	8003430 <__kernel_cos>
 80033ee:	e7f5      	b.n	80033dc <sin+0x5c>
 80033f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80033f4:	ed9d 0b00 	vldr	d0, [sp]
 80033f8:	2001      	movs	r0, #1
 80033fa:	f000 f8e1 	bl	80035c0 <__kernel_sin>
 80033fe:	ec53 2b10 	vmov	r2, r3, d0
 8003402:	ee10 0a10 	vmov	r0, s0
 8003406:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800340a:	e7d1      	b.n	80033b0 <sin+0x30>
 800340c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003410:	ed9d 0b00 	vldr	d0, [sp]
 8003414:	f000 f80c 	bl	8003430 <__kernel_cos>
 8003418:	e7f1      	b.n	80033fe <sin+0x7e>
 800341a:	bf00      	nop
 800341c:	f3af 8000 	nop.w
	...
 8003428:	3fe921fb 	.word	0x3fe921fb
 800342c:	7fefffff 	.word	0x7fefffff

08003430 <__kernel_cos>:
 8003430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	ec57 6b10 	vmov	r6, r7, d0
 8003438:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800343c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003440:	ed8d 1b00 	vstr	d1, [sp]
 8003444:	da07      	bge.n	8003456 <__kernel_cos+0x26>
 8003446:	ee10 0a10 	vmov	r0, s0
 800344a:	4639      	mov	r1, r7
 800344c:	f7fd fb32 	bl	8000ab4 <__aeabi_d2iz>
 8003450:	2800      	cmp	r0, #0
 8003452:	f000 8088 	beq.w	8003566 <__kernel_cos+0x136>
 8003456:	4632      	mov	r2, r6
 8003458:	463b      	mov	r3, r7
 800345a:	4630      	mov	r0, r6
 800345c:	4639      	mov	r1, r7
 800345e:	f7fd f88f 	bl	8000580 <__aeabi_dmul>
 8003462:	4b51      	ldr	r3, [pc, #324]	; (80035a8 <__kernel_cos+0x178>)
 8003464:	2200      	movs	r2, #0
 8003466:	4604      	mov	r4, r0
 8003468:	460d      	mov	r5, r1
 800346a:	f7fd f889 	bl	8000580 <__aeabi_dmul>
 800346e:	a340      	add	r3, pc, #256	; (adr r3, 8003570 <__kernel_cos+0x140>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	4682      	mov	sl, r0
 8003476:	468b      	mov	fp, r1
 8003478:	4620      	mov	r0, r4
 800347a:	4629      	mov	r1, r5
 800347c:	f7fd f880 	bl	8000580 <__aeabi_dmul>
 8003480:	a33d      	add	r3, pc, #244	; (adr r3, 8003578 <__kernel_cos+0x148>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fc fec5 	bl	8000214 <__adddf3>
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	f7fd f877 	bl	8000580 <__aeabi_dmul>
 8003492:	a33b      	add	r3, pc, #236	; (adr r3, 8003580 <__kernel_cos+0x150>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f7fc feba 	bl	8000210 <__aeabi_dsub>
 800349c:	4622      	mov	r2, r4
 800349e:	462b      	mov	r3, r5
 80034a0:	f7fd f86e 	bl	8000580 <__aeabi_dmul>
 80034a4:	a338      	add	r3, pc, #224	; (adr r3, 8003588 <__kernel_cos+0x158>)
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f7fc feb3 	bl	8000214 <__adddf3>
 80034ae:	4622      	mov	r2, r4
 80034b0:	462b      	mov	r3, r5
 80034b2:	f7fd f865 	bl	8000580 <__aeabi_dmul>
 80034b6:	a336      	add	r3, pc, #216	; (adr r3, 8003590 <__kernel_cos+0x160>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fc fea8 	bl	8000210 <__aeabi_dsub>
 80034c0:	4622      	mov	r2, r4
 80034c2:	462b      	mov	r3, r5
 80034c4:	f7fd f85c 	bl	8000580 <__aeabi_dmul>
 80034c8:	a333      	add	r3, pc, #204	; (adr r3, 8003598 <__kernel_cos+0x168>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fc fea1 	bl	8000214 <__adddf3>
 80034d2:	4622      	mov	r2, r4
 80034d4:	462b      	mov	r3, r5
 80034d6:	f7fd f853 	bl	8000580 <__aeabi_dmul>
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	f7fd f84f 	bl	8000580 <__aeabi_dmul>
 80034e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034e6:	4604      	mov	r4, r0
 80034e8:	460d      	mov	r5, r1
 80034ea:	4630      	mov	r0, r6
 80034ec:	4639      	mov	r1, r7
 80034ee:	f7fd f847 	bl	8000580 <__aeabi_dmul>
 80034f2:	460b      	mov	r3, r1
 80034f4:	4602      	mov	r2, r0
 80034f6:	4629      	mov	r1, r5
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7fc fe89 	bl	8000210 <__aeabi_dsub>
 80034fe:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <__kernel_cos+0x17c>)
 8003500:	4598      	cmp	r8, r3
 8003502:	4606      	mov	r6, r0
 8003504:	460f      	mov	r7, r1
 8003506:	dc10      	bgt.n	800352a <__kernel_cos+0xfa>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4650      	mov	r0, sl
 800350e:	4659      	mov	r1, fp
 8003510:	f7fc fe7e 	bl	8000210 <__aeabi_dsub>
 8003514:	460b      	mov	r3, r1
 8003516:	4926      	ldr	r1, [pc, #152]	; (80035b0 <__kernel_cos+0x180>)
 8003518:	4602      	mov	r2, r0
 800351a:	2000      	movs	r0, #0
 800351c:	f7fc fe78 	bl	8000210 <__aeabi_dsub>
 8003520:	ec41 0b10 	vmov	d0, r0, r1
 8003524:	b003      	add	sp, #12
 8003526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <__kernel_cos+0x184>)
 800352c:	4920      	ldr	r1, [pc, #128]	; (80035b0 <__kernel_cos+0x180>)
 800352e:	4598      	cmp	r8, r3
 8003530:	bfcc      	ite	gt
 8003532:	4d21      	ldrgt	r5, [pc, #132]	; (80035b8 <__kernel_cos+0x188>)
 8003534:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003538:	2400      	movs	r4, #0
 800353a:	4622      	mov	r2, r4
 800353c:	462b      	mov	r3, r5
 800353e:	2000      	movs	r0, #0
 8003540:	f7fc fe66 	bl	8000210 <__aeabi_dsub>
 8003544:	4622      	mov	r2, r4
 8003546:	4680      	mov	r8, r0
 8003548:	4689      	mov	r9, r1
 800354a:	462b      	mov	r3, r5
 800354c:	4650      	mov	r0, sl
 800354e:	4659      	mov	r1, fp
 8003550:	f7fc fe5e 	bl	8000210 <__aeabi_dsub>
 8003554:	4632      	mov	r2, r6
 8003556:	463b      	mov	r3, r7
 8003558:	f7fc fe5a 	bl	8000210 <__aeabi_dsub>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4640      	mov	r0, r8
 8003562:	4649      	mov	r1, r9
 8003564:	e7da      	b.n	800351c <__kernel_cos+0xec>
 8003566:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80035a0 <__kernel_cos+0x170>
 800356a:	e7db      	b.n	8003524 <__kernel_cos+0xf4>
 800356c:	f3af 8000 	nop.w
 8003570:	be8838d4 	.word	0xbe8838d4
 8003574:	bda8fae9 	.word	0xbda8fae9
 8003578:	bdb4b1c4 	.word	0xbdb4b1c4
 800357c:	3e21ee9e 	.word	0x3e21ee9e
 8003580:	809c52ad 	.word	0x809c52ad
 8003584:	3e927e4f 	.word	0x3e927e4f
 8003588:	19cb1590 	.word	0x19cb1590
 800358c:	3efa01a0 	.word	0x3efa01a0
 8003590:	16c15177 	.word	0x16c15177
 8003594:	3f56c16c 	.word	0x3f56c16c
 8003598:	5555554c 	.word	0x5555554c
 800359c:	3fa55555 	.word	0x3fa55555
 80035a0:	00000000 	.word	0x00000000
 80035a4:	3ff00000 	.word	0x3ff00000
 80035a8:	3fe00000 	.word	0x3fe00000
 80035ac:	3fd33332 	.word	0x3fd33332
 80035b0:	3ff00000 	.word	0x3ff00000
 80035b4:	3fe90000 	.word	0x3fe90000
 80035b8:	3fd20000 	.word	0x3fd20000
 80035bc:	00000000 	.word	0x00000000

080035c0 <__kernel_sin>:
 80035c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c4:	ed2d 8b04 	vpush	{d8-d9}
 80035c8:	eeb0 8a41 	vmov.f32	s16, s2
 80035cc:	eef0 8a61 	vmov.f32	s17, s3
 80035d0:	ec55 4b10 	vmov	r4, r5, d0
 80035d4:	b083      	sub	sp, #12
 80035d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80035da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80035de:	9001      	str	r0, [sp, #4]
 80035e0:	da06      	bge.n	80035f0 <__kernel_sin+0x30>
 80035e2:	ee10 0a10 	vmov	r0, s0
 80035e6:	4629      	mov	r1, r5
 80035e8:	f7fd fa64 	bl	8000ab4 <__aeabi_d2iz>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d051      	beq.n	8003694 <__kernel_sin+0xd4>
 80035f0:	4622      	mov	r2, r4
 80035f2:	462b      	mov	r3, r5
 80035f4:	4620      	mov	r0, r4
 80035f6:	4629      	mov	r1, r5
 80035f8:	f7fc ffc2 	bl	8000580 <__aeabi_dmul>
 80035fc:	4682      	mov	sl, r0
 80035fe:	468b      	mov	fp, r1
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4620      	mov	r0, r4
 8003606:	4629      	mov	r1, r5
 8003608:	f7fc ffba 	bl	8000580 <__aeabi_dmul>
 800360c:	a341      	add	r3, pc, #260	; (adr r3, 8003714 <__kernel_sin+0x154>)
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	4680      	mov	r8, r0
 8003614:	4689      	mov	r9, r1
 8003616:	4650      	mov	r0, sl
 8003618:	4659      	mov	r1, fp
 800361a:	f7fc ffb1 	bl	8000580 <__aeabi_dmul>
 800361e:	a33f      	add	r3, pc, #252	; (adr r3, 800371c <__kernel_sin+0x15c>)
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f7fc fdf4 	bl	8000210 <__aeabi_dsub>
 8003628:	4652      	mov	r2, sl
 800362a:	465b      	mov	r3, fp
 800362c:	f7fc ffa8 	bl	8000580 <__aeabi_dmul>
 8003630:	a33c      	add	r3, pc, #240	; (adr r3, 8003724 <__kernel_sin+0x164>)
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f7fc fded 	bl	8000214 <__adddf3>
 800363a:	4652      	mov	r2, sl
 800363c:	465b      	mov	r3, fp
 800363e:	f7fc ff9f 	bl	8000580 <__aeabi_dmul>
 8003642:	a33a      	add	r3, pc, #232	; (adr r3, 800372c <__kernel_sin+0x16c>)
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f7fc fde2 	bl	8000210 <__aeabi_dsub>
 800364c:	4652      	mov	r2, sl
 800364e:	465b      	mov	r3, fp
 8003650:	f7fc ff96 	bl	8000580 <__aeabi_dmul>
 8003654:	a337      	add	r3, pc, #220	; (adr r3, 8003734 <__kernel_sin+0x174>)
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f7fc fddb 	bl	8000214 <__adddf3>
 800365e:	9b01      	ldr	r3, [sp, #4]
 8003660:	4606      	mov	r6, r0
 8003662:	460f      	mov	r7, r1
 8003664:	b9eb      	cbnz	r3, 80036a2 <__kernel_sin+0xe2>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4650      	mov	r0, sl
 800366c:	4659      	mov	r1, fp
 800366e:	f7fc ff87 	bl	8000580 <__aeabi_dmul>
 8003672:	a325      	add	r3, pc, #148	; (adr r3, 8003708 <__kernel_sin+0x148>)
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f7fc fdca 	bl	8000210 <__aeabi_dsub>
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	f7fc ff7e 	bl	8000580 <__aeabi_dmul>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4620      	mov	r0, r4
 800368a:	4629      	mov	r1, r5
 800368c:	f7fc fdc2 	bl	8000214 <__adddf3>
 8003690:	4604      	mov	r4, r0
 8003692:	460d      	mov	r5, r1
 8003694:	ec45 4b10 	vmov	d0, r4, r5
 8003698:	b003      	add	sp, #12
 800369a:	ecbd 8b04 	vpop	{d8-d9}
 800369e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <__kernel_sin+0x150>)
 80036a4:	ec51 0b18 	vmov	r0, r1, d8
 80036a8:	2200      	movs	r2, #0
 80036aa:	f7fc ff69 	bl	8000580 <__aeabi_dmul>
 80036ae:	4632      	mov	r2, r6
 80036b0:	ec41 0b19 	vmov	d9, r0, r1
 80036b4:	463b      	mov	r3, r7
 80036b6:	4640      	mov	r0, r8
 80036b8:	4649      	mov	r1, r9
 80036ba:	f7fc ff61 	bl	8000580 <__aeabi_dmul>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	ec51 0b19 	vmov	r0, r1, d9
 80036c6:	f7fc fda3 	bl	8000210 <__aeabi_dsub>
 80036ca:	4652      	mov	r2, sl
 80036cc:	465b      	mov	r3, fp
 80036ce:	f7fc ff57 	bl	8000580 <__aeabi_dmul>
 80036d2:	ec53 2b18 	vmov	r2, r3, d8
 80036d6:	f7fc fd9b 	bl	8000210 <__aeabi_dsub>
 80036da:	a30b      	add	r3, pc, #44	; (adr r3, 8003708 <__kernel_sin+0x148>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	4606      	mov	r6, r0
 80036e2:	460f      	mov	r7, r1
 80036e4:	4640      	mov	r0, r8
 80036e6:	4649      	mov	r1, r9
 80036e8:	f7fc ff4a 	bl	8000580 <__aeabi_dmul>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4630      	mov	r0, r6
 80036f2:	4639      	mov	r1, r7
 80036f4:	f7fc fd8e 	bl	8000214 <__adddf3>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4620      	mov	r0, r4
 80036fe:	4629      	mov	r1, r5
 8003700:	f7fc fd86 	bl	8000210 <__aeabi_dsub>
 8003704:	e7c4      	b.n	8003690 <__kernel_sin+0xd0>
 8003706:	bf00      	nop
 8003708:	55555549 	.word	0x55555549
 800370c:	3fc55555 	.word	0x3fc55555
 8003710:	3fe00000 	.word	0x3fe00000
 8003714:	5acfd57c 	.word	0x5acfd57c
 8003718:	3de5d93a 	.word	0x3de5d93a
 800371c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003720:	3e5ae5e6 	.word	0x3e5ae5e6
 8003724:	57b1fe7d 	.word	0x57b1fe7d
 8003728:	3ec71de3 	.word	0x3ec71de3
 800372c:	19c161d5 	.word	0x19c161d5
 8003730:	3f2a01a0 	.word	0x3f2a01a0
 8003734:	1110f8a6 	.word	0x1110f8a6
 8003738:	3f811111 	.word	0x3f811111
 800373c:	00000000 	.word	0x00000000

08003740 <__ieee754_rem_pio2>:
 8003740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003744:	ed2d 8b02 	vpush	{d8}
 8003748:	ec55 4b10 	vmov	r4, r5, d0
 800374c:	4bca      	ldr	r3, [pc, #808]	; (8003a78 <__ieee754_rem_pio2+0x338>)
 800374e:	b08b      	sub	sp, #44	; 0x2c
 8003750:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003754:	4598      	cmp	r8, r3
 8003756:	4682      	mov	sl, r0
 8003758:	9502      	str	r5, [sp, #8]
 800375a:	dc08      	bgt.n	800376e <__ieee754_rem_pio2+0x2e>
 800375c:	2200      	movs	r2, #0
 800375e:	2300      	movs	r3, #0
 8003760:	ed80 0b00 	vstr	d0, [r0]
 8003764:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003768:	f04f 0b00 	mov.w	fp, #0
 800376c:	e028      	b.n	80037c0 <__ieee754_rem_pio2+0x80>
 800376e:	4bc3      	ldr	r3, [pc, #780]	; (8003a7c <__ieee754_rem_pio2+0x33c>)
 8003770:	4598      	cmp	r8, r3
 8003772:	dc78      	bgt.n	8003866 <__ieee754_rem_pio2+0x126>
 8003774:	9b02      	ldr	r3, [sp, #8]
 8003776:	4ec2      	ldr	r6, [pc, #776]	; (8003a80 <__ieee754_rem_pio2+0x340>)
 8003778:	2b00      	cmp	r3, #0
 800377a:	ee10 0a10 	vmov	r0, s0
 800377e:	a3b0      	add	r3, pc, #704	; (adr r3, 8003a40 <__ieee754_rem_pio2+0x300>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	4629      	mov	r1, r5
 8003786:	dd39      	ble.n	80037fc <__ieee754_rem_pio2+0xbc>
 8003788:	f7fc fd42 	bl	8000210 <__aeabi_dsub>
 800378c:	45b0      	cmp	r8, r6
 800378e:	4604      	mov	r4, r0
 8003790:	460d      	mov	r5, r1
 8003792:	d01b      	beq.n	80037cc <__ieee754_rem_pio2+0x8c>
 8003794:	a3ac      	add	r3, pc, #688	; (adr r3, 8003a48 <__ieee754_rem_pio2+0x308>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f7fc fd39 	bl	8000210 <__aeabi_dsub>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	e9ca 2300 	strd	r2, r3, [sl]
 80037a6:	4620      	mov	r0, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	f7fc fd31 	bl	8000210 <__aeabi_dsub>
 80037ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8003a48 <__ieee754_rem_pio2+0x308>)
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f7fc fd2c 	bl	8000210 <__aeabi_dsub>
 80037b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80037bc:	f04f 0b01 	mov.w	fp, #1
 80037c0:	4658      	mov	r0, fp
 80037c2:	b00b      	add	sp, #44	; 0x2c
 80037c4:	ecbd 8b02 	vpop	{d8}
 80037c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8003a50 <__ieee754_rem_pio2+0x310>)
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f7fc fd1d 	bl	8000210 <__aeabi_dsub>
 80037d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8003a58 <__ieee754_rem_pio2+0x318>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	4604      	mov	r4, r0
 80037de:	460d      	mov	r5, r1
 80037e0:	f7fc fd16 	bl	8000210 <__aeabi_dsub>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	e9ca 2300 	strd	r2, r3, [sl]
 80037ec:	4620      	mov	r0, r4
 80037ee:	4629      	mov	r1, r5
 80037f0:	f7fc fd0e 	bl	8000210 <__aeabi_dsub>
 80037f4:	a398      	add	r3, pc, #608	; (adr r3, 8003a58 <__ieee754_rem_pio2+0x318>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	e7db      	b.n	80037b4 <__ieee754_rem_pio2+0x74>
 80037fc:	f7fc fd0a 	bl	8000214 <__adddf3>
 8003800:	45b0      	cmp	r8, r6
 8003802:	4604      	mov	r4, r0
 8003804:	460d      	mov	r5, r1
 8003806:	d016      	beq.n	8003836 <__ieee754_rem_pio2+0xf6>
 8003808:	a38f      	add	r3, pc, #572	; (adr r3, 8003a48 <__ieee754_rem_pio2+0x308>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f7fc fd01 	bl	8000214 <__adddf3>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	e9ca 2300 	strd	r2, r3, [sl]
 800381a:	4620      	mov	r0, r4
 800381c:	4629      	mov	r1, r5
 800381e:	f7fc fcf7 	bl	8000210 <__aeabi_dsub>
 8003822:	a389      	add	r3, pc, #548	; (adr r3, 8003a48 <__ieee754_rem_pio2+0x308>)
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f7fc fcf4 	bl	8000214 <__adddf3>
 800382c:	f04f 3bff 	mov.w	fp, #4294967295
 8003830:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003834:	e7c4      	b.n	80037c0 <__ieee754_rem_pio2+0x80>
 8003836:	a386      	add	r3, pc, #536	; (adr r3, 8003a50 <__ieee754_rem_pio2+0x310>)
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f7fc fcea 	bl	8000214 <__adddf3>
 8003840:	a385      	add	r3, pc, #532	; (adr r3, 8003a58 <__ieee754_rem_pio2+0x318>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	4604      	mov	r4, r0
 8003848:	460d      	mov	r5, r1
 800384a:	f7fc fce3 	bl	8000214 <__adddf3>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	e9ca 2300 	strd	r2, r3, [sl]
 8003856:	4620      	mov	r0, r4
 8003858:	4629      	mov	r1, r5
 800385a:	f7fc fcd9 	bl	8000210 <__aeabi_dsub>
 800385e:	a37e      	add	r3, pc, #504	; (adr r3, 8003a58 <__ieee754_rem_pio2+0x318>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	e7e0      	b.n	8003828 <__ieee754_rem_pio2+0xe8>
 8003866:	4b87      	ldr	r3, [pc, #540]	; (8003a84 <__ieee754_rem_pio2+0x344>)
 8003868:	4598      	cmp	r8, r3
 800386a:	f300 80d8 	bgt.w	8003a1e <__ieee754_rem_pio2+0x2de>
 800386e:	f000 f96d 	bl	8003b4c <fabs>
 8003872:	ec55 4b10 	vmov	r4, r5, d0
 8003876:	ee10 0a10 	vmov	r0, s0
 800387a:	a379      	add	r3, pc, #484	; (adr r3, 8003a60 <__ieee754_rem_pio2+0x320>)
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	4629      	mov	r1, r5
 8003882:	f7fc fe7d 	bl	8000580 <__aeabi_dmul>
 8003886:	4b80      	ldr	r3, [pc, #512]	; (8003a88 <__ieee754_rem_pio2+0x348>)
 8003888:	2200      	movs	r2, #0
 800388a:	f7fc fcc3 	bl	8000214 <__adddf3>
 800388e:	f7fd f911 	bl	8000ab4 <__aeabi_d2iz>
 8003892:	4683      	mov	fp, r0
 8003894:	f7fc fe0a 	bl	80004ac <__aeabi_i2d>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	ec43 2b18 	vmov	d8, r2, r3
 80038a0:	a367      	add	r3, pc, #412	; (adr r3, 8003a40 <__ieee754_rem_pio2+0x300>)
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f7fc fe6b 	bl	8000580 <__aeabi_dmul>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4620      	mov	r0, r4
 80038b0:	4629      	mov	r1, r5
 80038b2:	f7fc fcad 	bl	8000210 <__aeabi_dsub>
 80038b6:	a364      	add	r3, pc, #400	; (adr r3, 8003a48 <__ieee754_rem_pio2+0x308>)
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	4606      	mov	r6, r0
 80038be:	460f      	mov	r7, r1
 80038c0:	ec51 0b18 	vmov	r0, r1, d8
 80038c4:	f7fc fe5c 	bl	8000580 <__aeabi_dmul>
 80038c8:	f1bb 0f1f 	cmp.w	fp, #31
 80038cc:	4604      	mov	r4, r0
 80038ce:	460d      	mov	r5, r1
 80038d0:	dc0d      	bgt.n	80038ee <__ieee754_rem_pio2+0x1ae>
 80038d2:	4b6e      	ldr	r3, [pc, #440]	; (8003a8c <__ieee754_rem_pio2+0x34c>)
 80038d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80038d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038dc:	4543      	cmp	r3, r8
 80038de:	d006      	beq.n	80038ee <__ieee754_rem_pio2+0x1ae>
 80038e0:	4622      	mov	r2, r4
 80038e2:	462b      	mov	r3, r5
 80038e4:	4630      	mov	r0, r6
 80038e6:	4639      	mov	r1, r7
 80038e8:	f7fc fc92 	bl	8000210 <__aeabi_dsub>
 80038ec:	e00e      	b.n	800390c <__ieee754_rem_pio2+0x1cc>
 80038ee:	462b      	mov	r3, r5
 80038f0:	4622      	mov	r2, r4
 80038f2:	4630      	mov	r0, r6
 80038f4:	4639      	mov	r1, r7
 80038f6:	f7fc fc8b 	bl	8000210 <__aeabi_dsub>
 80038fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80038fe:	9303      	str	r3, [sp, #12]
 8003900:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003904:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003908:	2b10      	cmp	r3, #16
 800390a:	dc02      	bgt.n	8003912 <__ieee754_rem_pio2+0x1d2>
 800390c:	e9ca 0100 	strd	r0, r1, [sl]
 8003910:	e039      	b.n	8003986 <__ieee754_rem_pio2+0x246>
 8003912:	a34f      	add	r3, pc, #316	; (adr r3, 8003a50 <__ieee754_rem_pio2+0x310>)
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	ec51 0b18 	vmov	r0, r1, d8
 800391c:	f7fc fe30 	bl	8000580 <__aeabi_dmul>
 8003920:	4604      	mov	r4, r0
 8003922:	460d      	mov	r5, r1
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4630      	mov	r0, r6
 800392a:	4639      	mov	r1, r7
 800392c:	f7fc fc70 	bl	8000210 <__aeabi_dsub>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4680      	mov	r8, r0
 8003936:	4689      	mov	r9, r1
 8003938:	4630      	mov	r0, r6
 800393a:	4639      	mov	r1, r7
 800393c:	f7fc fc68 	bl	8000210 <__aeabi_dsub>
 8003940:	4622      	mov	r2, r4
 8003942:	462b      	mov	r3, r5
 8003944:	f7fc fc64 	bl	8000210 <__aeabi_dsub>
 8003948:	a343      	add	r3, pc, #268	; (adr r3, 8003a58 <__ieee754_rem_pio2+0x318>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	4604      	mov	r4, r0
 8003950:	460d      	mov	r5, r1
 8003952:	ec51 0b18 	vmov	r0, r1, d8
 8003956:	f7fc fe13 	bl	8000580 <__aeabi_dmul>
 800395a:	4622      	mov	r2, r4
 800395c:	462b      	mov	r3, r5
 800395e:	f7fc fc57 	bl	8000210 <__aeabi_dsub>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4604      	mov	r4, r0
 8003968:	460d      	mov	r5, r1
 800396a:	4640      	mov	r0, r8
 800396c:	4649      	mov	r1, r9
 800396e:	f7fc fc4f 	bl	8000210 <__aeabi_dsub>
 8003972:	9a03      	ldr	r2, [sp, #12]
 8003974:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b31      	cmp	r3, #49	; 0x31
 800397c:	dc24      	bgt.n	80039c8 <__ieee754_rem_pio2+0x288>
 800397e:	e9ca 0100 	strd	r0, r1, [sl]
 8003982:	4646      	mov	r6, r8
 8003984:	464f      	mov	r7, r9
 8003986:	e9da 8900 	ldrd	r8, r9, [sl]
 800398a:	4630      	mov	r0, r6
 800398c:	4642      	mov	r2, r8
 800398e:	464b      	mov	r3, r9
 8003990:	4639      	mov	r1, r7
 8003992:	f7fc fc3d 	bl	8000210 <__aeabi_dsub>
 8003996:	462b      	mov	r3, r5
 8003998:	4622      	mov	r2, r4
 800399a:	f7fc fc39 	bl	8000210 <__aeabi_dsub>
 800399e:	9b02      	ldr	r3, [sp, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80039a6:	f6bf af0b 	bge.w	80037c0 <__ieee754_rem_pio2+0x80>
 80039aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80039ae:	f8ca 3004 	str.w	r3, [sl, #4]
 80039b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039b6:	f8ca 8000 	str.w	r8, [sl]
 80039ba:	f8ca 0008 	str.w	r0, [sl, #8]
 80039be:	f8ca 300c 	str.w	r3, [sl, #12]
 80039c2:	f1cb 0b00 	rsb	fp, fp, #0
 80039c6:	e6fb      	b.n	80037c0 <__ieee754_rem_pio2+0x80>
 80039c8:	a327      	add	r3, pc, #156	; (adr r3, 8003a68 <__ieee754_rem_pio2+0x328>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	ec51 0b18 	vmov	r0, r1, d8
 80039d2:	f7fc fdd5 	bl	8000580 <__aeabi_dmul>
 80039d6:	4604      	mov	r4, r0
 80039d8:	460d      	mov	r5, r1
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4640      	mov	r0, r8
 80039e0:	4649      	mov	r1, r9
 80039e2:	f7fc fc15 	bl	8000210 <__aeabi_dsub>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4606      	mov	r6, r0
 80039ec:	460f      	mov	r7, r1
 80039ee:	4640      	mov	r0, r8
 80039f0:	4649      	mov	r1, r9
 80039f2:	f7fc fc0d 	bl	8000210 <__aeabi_dsub>
 80039f6:	4622      	mov	r2, r4
 80039f8:	462b      	mov	r3, r5
 80039fa:	f7fc fc09 	bl	8000210 <__aeabi_dsub>
 80039fe:	a31c      	add	r3, pc, #112	; (adr r3, 8003a70 <__ieee754_rem_pio2+0x330>)
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	4604      	mov	r4, r0
 8003a06:	460d      	mov	r5, r1
 8003a08:	ec51 0b18 	vmov	r0, r1, d8
 8003a0c:	f7fc fdb8 	bl	8000580 <__aeabi_dmul>
 8003a10:	4622      	mov	r2, r4
 8003a12:	462b      	mov	r3, r5
 8003a14:	f7fc fbfc 	bl	8000210 <__aeabi_dsub>
 8003a18:	4604      	mov	r4, r0
 8003a1a:	460d      	mov	r5, r1
 8003a1c:	e760      	b.n	80038e0 <__ieee754_rem_pio2+0x1a0>
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <__ieee754_rem_pio2+0x350>)
 8003a20:	4598      	cmp	r8, r3
 8003a22:	dd37      	ble.n	8003a94 <__ieee754_rem_pio2+0x354>
 8003a24:	ee10 2a10 	vmov	r2, s0
 8003a28:	462b      	mov	r3, r5
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	f7fc fbef 	bl	8000210 <__aeabi_dsub>
 8003a32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003a36:	e9ca 0100 	strd	r0, r1, [sl]
 8003a3a:	e695      	b.n	8003768 <__ieee754_rem_pio2+0x28>
 8003a3c:	f3af 8000 	nop.w
 8003a40:	54400000 	.word	0x54400000
 8003a44:	3ff921fb 	.word	0x3ff921fb
 8003a48:	1a626331 	.word	0x1a626331
 8003a4c:	3dd0b461 	.word	0x3dd0b461
 8003a50:	1a600000 	.word	0x1a600000
 8003a54:	3dd0b461 	.word	0x3dd0b461
 8003a58:	2e037073 	.word	0x2e037073
 8003a5c:	3ba3198a 	.word	0x3ba3198a
 8003a60:	6dc9c883 	.word	0x6dc9c883
 8003a64:	3fe45f30 	.word	0x3fe45f30
 8003a68:	2e000000 	.word	0x2e000000
 8003a6c:	3ba3198a 	.word	0x3ba3198a
 8003a70:	252049c1 	.word	0x252049c1
 8003a74:	397b839a 	.word	0x397b839a
 8003a78:	3fe921fb 	.word	0x3fe921fb
 8003a7c:	4002d97b 	.word	0x4002d97b
 8003a80:	3ff921fb 	.word	0x3ff921fb
 8003a84:	413921fb 	.word	0x413921fb
 8003a88:	3fe00000 	.word	0x3fe00000
 8003a8c:	08004430 	.word	0x08004430
 8003a90:	7fefffff 	.word	0x7fefffff
 8003a94:	ea4f 5628 	mov.w	r6, r8, asr #20
 8003a98:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8003a9c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	460d      	mov	r5, r1
 8003aa4:	f7fd f806 	bl	8000ab4 <__aeabi_d2iz>
 8003aa8:	f7fc fd00 	bl	80004ac <__aeabi_i2d>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ab8:	f7fc fbaa 	bl	8000210 <__aeabi_dsub>
 8003abc:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <__ieee754_rem_pio2+0x404>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f7fc fd5e 	bl	8000580 <__aeabi_dmul>
 8003ac4:	460d      	mov	r5, r1
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	f7fc fff4 	bl	8000ab4 <__aeabi_d2iz>
 8003acc:	f7fc fcee 	bl	80004ac <__aeabi_i2d>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003adc:	f7fc fb98 	bl	8000210 <__aeabi_dsub>
 8003ae0:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <__ieee754_rem_pio2+0x404>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f7fc fd4c 	bl	8000580 <__aeabi_dmul>
 8003ae8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003aec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8003af0:	2703      	movs	r7, #3
 8003af2:	2400      	movs	r4, #0
 8003af4:	2500      	movs	r5, #0
 8003af6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8003afa:	4622      	mov	r2, r4
 8003afc:	462b      	mov	r3, r5
 8003afe:	46b9      	mov	r9, r7
 8003b00:	3f01      	subs	r7, #1
 8003b02:	f7fc ffa5 	bl	8000a50 <__aeabi_dcmpeq>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d1f5      	bne.n	8003af6 <__ieee754_rem_pio2+0x3b6>
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <__ieee754_rem_pio2+0x408>)
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	2302      	movs	r3, #2
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	4632      	mov	r2, r6
 8003b14:	464b      	mov	r3, r9
 8003b16:	4651      	mov	r1, sl
 8003b18:	a804      	add	r0, sp, #16
 8003b1a:	f000 f821 	bl	8003b60 <__kernel_rem_pio2>
 8003b1e:	9b02      	ldr	r3, [sp, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	4683      	mov	fp, r0
 8003b24:	f6bf ae4c 	bge.w	80037c0 <__ieee754_rem_pio2+0x80>
 8003b28:	e9da 2100 	ldrd	r2, r1, [sl]
 8003b2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b30:	e9ca 2300 	strd	r2, r3, [sl]
 8003b34:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b3c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003b40:	e73f      	b.n	80039c2 <__ieee754_rem_pio2+0x282>
 8003b42:	bf00      	nop
 8003b44:	41700000 	.word	0x41700000
 8003b48:	080044b0 	.word	0x080044b0

08003b4c <fabs>:
 8003b4c:	ec51 0b10 	vmov	r0, r1, d0
 8003b50:	ee10 2a10 	vmov	r2, s0
 8003b54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003b58:	ec43 2b10 	vmov	d0, r2, r3
 8003b5c:	4770      	bx	lr
	...

08003b60 <__kernel_rem_pio2>:
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	ed2d 8b02 	vpush	{d8}
 8003b68:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003b6c:	f112 0f14 	cmn.w	r2, #20
 8003b70:	9306      	str	r3, [sp, #24]
 8003b72:	9104      	str	r1, [sp, #16]
 8003b74:	4bc2      	ldr	r3, [pc, #776]	; (8003e80 <__kernel_rem_pio2+0x320>)
 8003b76:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003b78:	9009      	str	r0, [sp, #36]	; 0x24
 8003b7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	9b06      	ldr	r3, [sp, #24]
 8003b82:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b86:	bfa8      	it	ge
 8003b88:	1ed4      	subge	r4, r2, #3
 8003b8a:	9305      	str	r3, [sp, #20]
 8003b8c:	bfb2      	itee	lt
 8003b8e:	2400      	movlt	r4, #0
 8003b90:	2318      	movge	r3, #24
 8003b92:	fb94 f4f3 	sdivge	r4, r4, r3
 8003b96:	f06f 0317 	mvn.w	r3, #23
 8003b9a:	fb04 3303 	mla	r3, r4, r3, r3
 8003b9e:	eb03 0a02 	add.w	sl, r3, r2
 8003ba2:	9b00      	ldr	r3, [sp, #0]
 8003ba4:	9a05      	ldr	r2, [sp, #20]
 8003ba6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8003e70 <__kernel_rem_pio2+0x310>
 8003baa:	eb03 0802 	add.w	r8, r3, r2
 8003bae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003bb0:	1aa7      	subs	r7, r4, r2
 8003bb2:	ae20      	add	r6, sp, #128	; 0x80
 8003bb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003bb8:	2500      	movs	r5, #0
 8003bba:	4545      	cmp	r5, r8
 8003bbc:	dd13      	ble.n	8003be6 <__kernel_rem_pio2+0x86>
 8003bbe:	9b06      	ldr	r3, [sp, #24]
 8003bc0:	aa20      	add	r2, sp, #128	; 0x80
 8003bc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003bc6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003bca:	f04f 0800 	mov.w	r8, #0
 8003bce:	9b00      	ldr	r3, [sp, #0]
 8003bd0:	4598      	cmp	r8, r3
 8003bd2:	dc31      	bgt.n	8003c38 <__kernel_rem_pio2+0xd8>
 8003bd4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8003e70 <__kernel_rem_pio2+0x310>
 8003bd8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003bdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003be0:	462f      	mov	r7, r5
 8003be2:	2600      	movs	r6, #0
 8003be4:	e01b      	b.n	8003c1e <__kernel_rem_pio2+0xbe>
 8003be6:	42ef      	cmn	r7, r5
 8003be8:	d407      	bmi.n	8003bfa <__kernel_rem_pio2+0x9a>
 8003bea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003bee:	f7fc fc5d 	bl	80004ac <__aeabi_i2d>
 8003bf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003bf6:	3501      	adds	r5, #1
 8003bf8:	e7df      	b.n	8003bba <__kernel_rem_pio2+0x5a>
 8003bfa:	ec51 0b18 	vmov	r0, r1, d8
 8003bfe:	e7f8      	b.n	8003bf2 <__kernel_rem_pio2+0x92>
 8003c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003c08:	f7fc fcba 	bl	8000580 <__aeabi_dmul>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c14:	f7fc fafe 	bl	8000214 <__adddf3>
 8003c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c1c:	3601      	adds	r6, #1
 8003c1e:	9b05      	ldr	r3, [sp, #20]
 8003c20:	429e      	cmp	r6, r3
 8003c22:	f1a7 0708 	sub.w	r7, r7, #8
 8003c26:	ddeb      	ble.n	8003c00 <__kernel_rem_pio2+0xa0>
 8003c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003c2c:	f108 0801 	add.w	r8, r8, #1
 8003c30:	ecab 7b02 	vstmia	fp!, {d7}
 8003c34:	3508      	adds	r5, #8
 8003c36:	e7ca      	b.n	8003bce <__kernel_rem_pio2+0x6e>
 8003c38:	9b00      	ldr	r3, [sp, #0]
 8003c3a:	aa0c      	add	r2, sp, #48	; 0x30
 8003c3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c42:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003c44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003c48:	9c00      	ldr	r4, [sp, #0]
 8003c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8003c4c:	00e3      	lsls	r3, r4, #3
 8003c4e:	9308      	str	r3, [sp, #32]
 8003c50:	ab98      	add	r3, sp, #608	; 0x260
 8003c52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003c56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003c5a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8003c5e:	ab70      	add	r3, sp, #448	; 0x1c0
 8003c60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003c64:	46c3      	mov	fp, r8
 8003c66:	46a1      	mov	r9, r4
 8003c68:	f1b9 0f00 	cmp.w	r9, #0
 8003c6c:	f1a5 0508 	sub.w	r5, r5, #8
 8003c70:	dc77      	bgt.n	8003d62 <__kernel_rem_pio2+0x202>
 8003c72:	ec47 6b10 	vmov	d0, r6, r7
 8003c76:	4650      	mov	r0, sl
 8003c78:	f000 fac2 	bl	8004200 <scalbn>
 8003c7c:	ec57 6b10 	vmov	r6, r7, d0
 8003c80:	2200      	movs	r2, #0
 8003c82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003c86:	ee10 0a10 	vmov	r0, s0
 8003c8a:	4639      	mov	r1, r7
 8003c8c:	f7fc fc78 	bl	8000580 <__aeabi_dmul>
 8003c90:	ec41 0b10 	vmov	d0, r0, r1
 8003c94:	f000 fb34 	bl	8004300 <floor>
 8003c98:	4b7a      	ldr	r3, [pc, #488]	; (8003e84 <__kernel_rem_pio2+0x324>)
 8003c9a:	ec51 0b10 	vmov	r0, r1, d0
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f7fc fc6e 	bl	8000580 <__aeabi_dmul>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4630      	mov	r0, r6
 8003caa:	4639      	mov	r1, r7
 8003cac:	f7fc fab0 	bl	8000210 <__aeabi_dsub>
 8003cb0:	460f      	mov	r7, r1
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	f7fc fefe 	bl	8000ab4 <__aeabi_d2iz>
 8003cb8:	9002      	str	r0, [sp, #8]
 8003cba:	f7fc fbf7 	bl	80004ac <__aeabi_i2d>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	4639      	mov	r1, r7
 8003cc6:	f7fc faa3 	bl	8000210 <__aeabi_dsub>
 8003cca:	f1ba 0f00 	cmp.w	sl, #0
 8003cce:	4606      	mov	r6, r0
 8003cd0:	460f      	mov	r7, r1
 8003cd2:	dd6d      	ble.n	8003db0 <__kernel_rem_pio2+0x250>
 8003cd4:	1e61      	subs	r1, r4, #1
 8003cd6:	ab0c      	add	r3, sp, #48	; 0x30
 8003cd8:	9d02      	ldr	r5, [sp, #8]
 8003cda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003cde:	f1ca 0018 	rsb	r0, sl, #24
 8003ce2:	fa43 f200 	asr.w	r2, r3, r0
 8003ce6:	4415      	add	r5, r2
 8003ce8:	4082      	lsls	r2, r0
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	aa0c      	add	r2, sp, #48	; 0x30
 8003cee:	9502      	str	r5, [sp, #8]
 8003cf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003cf4:	f1ca 0217 	rsb	r2, sl, #23
 8003cf8:	fa43 fb02 	asr.w	fp, r3, r2
 8003cfc:	f1bb 0f00 	cmp.w	fp, #0
 8003d00:	dd65      	ble.n	8003dce <__kernel_rem_pio2+0x26e>
 8003d02:	9b02      	ldr	r3, [sp, #8]
 8003d04:	2200      	movs	r2, #0
 8003d06:	3301      	adds	r3, #1
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	4615      	mov	r5, r2
 8003d0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003d10:	4294      	cmp	r4, r2
 8003d12:	f300 809f 	bgt.w	8003e54 <__kernel_rem_pio2+0x2f4>
 8003d16:	f1ba 0f00 	cmp.w	sl, #0
 8003d1a:	dd07      	ble.n	8003d2c <__kernel_rem_pio2+0x1cc>
 8003d1c:	f1ba 0f01 	cmp.w	sl, #1
 8003d20:	f000 80c1 	beq.w	8003ea6 <__kernel_rem_pio2+0x346>
 8003d24:	f1ba 0f02 	cmp.w	sl, #2
 8003d28:	f000 80c7 	beq.w	8003eba <__kernel_rem_pio2+0x35a>
 8003d2c:	f1bb 0f02 	cmp.w	fp, #2
 8003d30:	d14d      	bne.n	8003dce <__kernel_rem_pio2+0x26e>
 8003d32:	4632      	mov	r2, r6
 8003d34:	463b      	mov	r3, r7
 8003d36:	4954      	ldr	r1, [pc, #336]	; (8003e88 <__kernel_rem_pio2+0x328>)
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7fc fa69 	bl	8000210 <__aeabi_dsub>
 8003d3e:	4606      	mov	r6, r0
 8003d40:	460f      	mov	r7, r1
 8003d42:	2d00      	cmp	r5, #0
 8003d44:	d043      	beq.n	8003dce <__kernel_rem_pio2+0x26e>
 8003d46:	4650      	mov	r0, sl
 8003d48:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8003e78 <__kernel_rem_pio2+0x318>
 8003d4c:	f000 fa58 	bl	8004200 <scalbn>
 8003d50:	4630      	mov	r0, r6
 8003d52:	4639      	mov	r1, r7
 8003d54:	ec53 2b10 	vmov	r2, r3, d0
 8003d58:	f7fc fa5a 	bl	8000210 <__aeabi_dsub>
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	460f      	mov	r7, r1
 8003d60:	e035      	b.n	8003dce <__kernel_rem_pio2+0x26e>
 8003d62:	4b4a      	ldr	r3, [pc, #296]	; (8003e8c <__kernel_rem_pio2+0x32c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	4630      	mov	r0, r6
 8003d68:	4639      	mov	r1, r7
 8003d6a:	f7fc fc09 	bl	8000580 <__aeabi_dmul>
 8003d6e:	f7fc fea1 	bl	8000ab4 <__aeabi_d2iz>
 8003d72:	f7fc fb9b 	bl	80004ac <__aeabi_i2d>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	ec43 2b18 	vmov	d8, r2, r3
 8003d7e:	4b44      	ldr	r3, [pc, #272]	; (8003e90 <__kernel_rem_pio2+0x330>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	f7fc fbfd 	bl	8000580 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	f7fc fa3f 	bl	8000210 <__aeabi_dsub>
 8003d92:	f7fc fe8f 	bl	8000ab4 <__aeabi_d2iz>
 8003d96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d9a:	f84b 0b04 	str.w	r0, [fp], #4
 8003d9e:	ec51 0b18 	vmov	r0, r1, d8
 8003da2:	f7fc fa37 	bl	8000214 <__adddf3>
 8003da6:	f109 39ff 	add.w	r9, r9, #4294967295
 8003daa:	4606      	mov	r6, r0
 8003dac:	460f      	mov	r7, r1
 8003dae:	e75b      	b.n	8003c68 <__kernel_rem_pio2+0x108>
 8003db0:	d106      	bne.n	8003dc0 <__kernel_rem_pio2+0x260>
 8003db2:	1e63      	subs	r3, r4, #1
 8003db4:	aa0c      	add	r2, sp, #48	; 0x30
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8003dbe:	e79d      	b.n	8003cfc <__kernel_rem_pio2+0x19c>
 8003dc0:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <__kernel_rem_pio2+0x334>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f7fc fe62 	bl	8000a8c <__aeabi_dcmpge>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d140      	bne.n	8003e4e <__kernel_rem_pio2+0x2ee>
 8003dcc:	4683      	mov	fp, r0
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	4639      	mov	r1, r7
 8003dd6:	f7fc fe3b 	bl	8000a50 <__aeabi_dcmpeq>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	f000 80c1 	beq.w	8003f62 <__kernel_rem_pio2+0x402>
 8003de0:	1e65      	subs	r5, r4, #1
 8003de2:	462b      	mov	r3, r5
 8003de4:	2200      	movs	r2, #0
 8003de6:	9900      	ldr	r1, [sp, #0]
 8003de8:	428b      	cmp	r3, r1
 8003dea:	da6d      	bge.n	8003ec8 <__kernel_rem_pio2+0x368>
 8003dec:	2a00      	cmp	r2, #0
 8003dee:	f000 808a 	beq.w	8003f06 <__kernel_rem_pio2+0x3a6>
 8003df2:	ab0c      	add	r3, sp, #48	; 0x30
 8003df4:	f1aa 0a18 	sub.w	sl, sl, #24
 8003df8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80ae 	beq.w	8003f5e <__kernel_rem_pio2+0x3fe>
 8003e02:	4650      	mov	r0, sl
 8003e04:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003e78 <__kernel_rem_pio2+0x318>
 8003e08:	f000 f9fa 	bl	8004200 <scalbn>
 8003e0c:	1c6b      	adds	r3, r5, #1
 8003e0e:	00da      	lsls	r2, r3, #3
 8003e10:	9205      	str	r2, [sp, #20]
 8003e12:	ec57 6b10 	vmov	r6, r7, d0
 8003e16:	aa70      	add	r2, sp, #448	; 0x1c0
 8003e18:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003e8c <__kernel_rem_pio2+0x32c>
 8003e1c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8003e20:	462c      	mov	r4, r5
 8003e22:	f04f 0800 	mov.w	r8, #0
 8003e26:	2c00      	cmp	r4, #0
 8003e28:	f280 80d4 	bge.w	8003fd4 <__kernel_rem_pio2+0x474>
 8003e2c:	462c      	mov	r4, r5
 8003e2e:	2c00      	cmp	r4, #0
 8003e30:	f2c0 8102 	blt.w	8004038 <__kernel_rem_pio2+0x4d8>
 8003e34:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <__kernel_rem_pio2+0x338>)
 8003e36:	461e      	mov	r6, r3
 8003e38:	ab70      	add	r3, sp, #448	; 0x1c0
 8003e3a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8003e3e:	1b2b      	subs	r3, r5, r4
 8003e40:	f04f 0900 	mov.w	r9, #0
 8003e44:	f04f 0a00 	mov.w	sl, #0
 8003e48:	2700      	movs	r7, #0
 8003e4a:	9306      	str	r3, [sp, #24]
 8003e4c:	e0e6      	b.n	800401c <__kernel_rem_pio2+0x4bc>
 8003e4e:	f04f 0b02 	mov.w	fp, #2
 8003e52:	e756      	b.n	8003d02 <__kernel_rem_pio2+0x1a2>
 8003e54:	f8d8 3000 	ldr.w	r3, [r8]
 8003e58:	bb05      	cbnz	r5, 8003e9c <__kernel_rem_pio2+0x33c>
 8003e5a:	b123      	cbz	r3, 8003e66 <__kernel_rem_pio2+0x306>
 8003e5c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003e60:	f8c8 3000 	str.w	r3, [r8]
 8003e64:	2301      	movs	r3, #1
 8003e66:	3201      	adds	r2, #1
 8003e68:	f108 0804 	add.w	r8, r8, #4
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	e74f      	b.n	8003d10 <__kernel_rem_pio2+0x1b0>
	...
 8003e7c:	3ff00000 	.word	0x3ff00000
 8003e80:	080045f8 	.word	0x080045f8
 8003e84:	40200000 	.word	0x40200000
 8003e88:	3ff00000 	.word	0x3ff00000
 8003e8c:	3e700000 	.word	0x3e700000
 8003e90:	41700000 	.word	0x41700000
 8003e94:	3fe00000 	.word	0x3fe00000
 8003e98:	080045b8 	.word	0x080045b8
 8003e9c:	1acb      	subs	r3, r1, r3
 8003e9e:	f8c8 3000 	str.w	r3, [r8]
 8003ea2:	462b      	mov	r3, r5
 8003ea4:	e7df      	b.n	8003e66 <__kernel_rem_pio2+0x306>
 8003ea6:	1e62      	subs	r2, r4, #1
 8003ea8:	ab0c      	add	r3, sp, #48	; 0x30
 8003eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003eb2:	a90c      	add	r1, sp, #48	; 0x30
 8003eb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003eb8:	e738      	b.n	8003d2c <__kernel_rem_pio2+0x1cc>
 8003eba:	1e62      	subs	r2, r4, #1
 8003ebc:	ab0c      	add	r3, sp, #48	; 0x30
 8003ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003ec6:	e7f4      	b.n	8003eb2 <__kernel_rem_pio2+0x352>
 8003ec8:	a90c      	add	r1, sp, #48	; 0x30
 8003eca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	e788      	b.n	8003de6 <__kernel_rem_pio2+0x286>
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003eda:	2900      	cmp	r1, #0
 8003edc:	d0fa      	beq.n	8003ed4 <__kernel_rem_pio2+0x374>
 8003ede:	9a08      	ldr	r2, [sp, #32]
 8003ee0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8003ee4:	446a      	add	r2, sp
 8003ee6:	3a98      	subs	r2, #152	; 0x98
 8003ee8:	9208      	str	r2, [sp, #32]
 8003eea:	9a06      	ldr	r2, [sp, #24]
 8003eec:	a920      	add	r1, sp, #128	; 0x80
 8003eee:	18a2      	adds	r2, r4, r2
 8003ef0:	18e3      	adds	r3, r4, r3
 8003ef2:	f104 0801 	add.w	r8, r4, #1
 8003ef6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8003efa:	9302      	str	r3, [sp, #8]
 8003efc:	9b02      	ldr	r3, [sp, #8]
 8003efe:	4543      	cmp	r3, r8
 8003f00:	da04      	bge.n	8003f0c <__kernel_rem_pio2+0x3ac>
 8003f02:	461c      	mov	r4, r3
 8003f04:	e6a2      	b.n	8003c4c <__kernel_rem_pio2+0xec>
 8003f06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e7e4      	b.n	8003ed6 <__kernel_rem_pio2+0x376>
 8003f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f0e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003f12:	f7fc facb 	bl	80004ac <__aeabi_i2d>
 8003f16:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f1c:	46ab      	mov	fp, r5
 8003f1e:	461c      	mov	r4, r3
 8003f20:	f04f 0900 	mov.w	r9, #0
 8003f24:	2600      	movs	r6, #0
 8003f26:	2700      	movs	r7, #0
 8003f28:	9b05      	ldr	r3, [sp, #20]
 8003f2a:	4599      	cmp	r9, r3
 8003f2c:	dd06      	ble.n	8003f3c <__kernel_rem_pio2+0x3dc>
 8003f2e:	9b08      	ldr	r3, [sp, #32]
 8003f30:	e8e3 6702 	strd	r6, r7, [r3], #8
 8003f34:	f108 0801 	add.w	r8, r8, #1
 8003f38:	9308      	str	r3, [sp, #32]
 8003f3a:	e7df      	b.n	8003efc <__kernel_rem_pio2+0x39c>
 8003f3c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003f40:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003f44:	f7fc fb1c 	bl	8000580 <__aeabi_dmul>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	4639      	mov	r1, r7
 8003f50:	f7fc f960 	bl	8000214 <__adddf3>
 8003f54:	f109 0901 	add.w	r9, r9, #1
 8003f58:	4606      	mov	r6, r0
 8003f5a:	460f      	mov	r7, r1
 8003f5c:	e7e4      	b.n	8003f28 <__kernel_rem_pio2+0x3c8>
 8003f5e:	3d01      	subs	r5, #1
 8003f60:	e747      	b.n	8003df2 <__kernel_rem_pio2+0x292>
 8003f62:	ec47 6b10 	vmov	d0, r6, r7
 8003f66:	f1ca 0000 	rsb	r0, sl, #0
 8003f6a:	f000 f949 	bl	8004200 <scalbn>
 8003f6e:	ec57 6b10 	vmov	r6, r7, d0
 8003f72:	4ba0      	ldr	r3, [pc, #640]	; (80041f4 <__kernel_rem_pio2+0x694>)
 8003f74:	ee10 0a10 	vmov	r0, s0
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4639      	mov	r1, r7
 8003f7c:	f7fc fd86 	bl	8000a8c <__aeabi_dcmpge>
 8003f80:	b1f8      	cbz	r0, 8003fc2 <__kernel_rem_pio2+0x462>
 8003f82:	4b9d      	ldr	r3, [pc, #628]	; (80041f8 <__kernel_rem_pio2+0x698>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	4630      	mov	r0, r6
 8003f88:	4639      	mov	r1, r7
 8003f8a:	f7fc faf9 	bl	8000580 <__aeabi_dmul>
 8003f8e:	f7fc fd91 	bl	8000ab4 <__aeabi_d2iz>
 8003f92:	4680      	mov	r8, r0
 8003f94:	f7fc fa8a 	bl	80004ac <__aeabi_i2d>
 8003f98:	4b96      	ldr	r3, [pc, #600]	; (80041f4 <__kernel_rem_pio2+0x694>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f7fc faf0 	bl	8000580 <__aeabi_dmul>
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4639      	mov	r1, r7
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f7fc f932 	bl	8000210 <__aeabi_dsub>
 8003fac:	f7fc fd82 	bl	8000ab4 <__aeabi_d2iz>
 8003fb0:	1c65      	adds	r5, r4, #1
 8003fb2:	ab0c      	add	r3, sp, #48	; 0x30
 8003fb4:	f10a 0a18 	add.w	sl, sl, #24
 8003fb8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003fbc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003fc0:	e71f      	b.n	8003e02 <__kernel_rem_pio2+0x2a2>
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	4639      	mov	r1, r7
 8003fc6:	f7fc fd75 	bl	8000ab4 <__aeabi_d2iz>
 8003fca:	ab0c      	add	r3, sp, #48	; 0x30
 8003fcc:	4625      	mov	r5, r4
 8003fce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003fd2:	e716      	b.n	8003e02 <__kernel_rem_pio2+0x2a2>
 8003fd4:	ab0c      	add	r3, sp, #48	; 0x30
 8003fd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003fda:	f7fc fa67 	bl	80004ac <__aeabi_i2d>
 8003fde:	4632      	mov	r2, r6
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	f7fc facd 	bl	8000580 <__aeabi_dmul>
 8003fe6:	4642      	mov	r2, r8
 8003fe8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8003fec:	464b      	mov	r3, r9
 8003fee:	4630      	mov	r0, r6
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	f7fc fac5 	bl	8000580 <__aeabi_dmul>
 8003ff6:	3c01      	subs	r4, #1
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	460f      	mov	r7, r1
 8003ffc:	e713      	b.n	8003e26 <__kernel_rem_pio2+0x2c6>
 8003ffe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004002:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8004006:	f7fc fabb 	bl	8000580 <__aeabi_dmul>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4648      	mov	r0, r9
 8004010:	4651      	mov	r1, sl
 8004012:	f7fc f8ff 	bl	8000214 <__adddf3>
 8004016:	3701      	adds	r7, #1
 8004018:	4681      	mov	r9, r0
 800401a:	468a      	mov	sl, r1
 800401c:	9b00      	ldr	r3, [sp, #0]
 800401e:	429f      	cmp	r7, r3
 8004020:	dc02      	bgt.n	8004028 <__kernel_rem_pio2+0x4c8>
 8004022:	9b06      	ldr	r3, [sp, #24]
 8004024:	429f      	cmp	r7, r3
 8004026:	ddea      	ble.n	8003ffe <__kernel_rem_pio2+0x49e>
 8004028:	9a06      	ldr	r2, [sp, #24]
 800402a:	ab48      	add	r3, sp, #288	; 0x120
 800402c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004030:	e9c6 9a00 	strd	r9, sl, [r6]
 8004034:	3c01      	subs	r4, #1
 8004036:	e6fa      	b.n	8003e2e <__kernel_rem_pio2+0x2ce>
 8004038:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800403a:	2b02      	cmp	r3, #2
 800403c:	dc0b      	bgt.n	8004056 <__kernel_rem_pio2+0x4f6>
 800403e:	2b00      	cmp	r3, #0
 8004040:	dc39      	bgt.n	80040b6 <__kernel_rem_pio2+0x556>
 8004042:	d05d      	beq.n	8004100 <__kernel_rem_pio2+0x5a0>
 8004044:	9b02      	ldr	r3, [sp, #8]
 8004046:	f003 0007 	and.w	r0, r3, #7
 800404a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800404e:	ecbd 8b02 	vpop	{d8}
 8004052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004056:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004058:	2b03      	cmp	r3, #3
 800405a:	d1f3      	bne.n	8004044 <__kernel_rem_pio2+0x4e4>
 800405c:	9b05      	ldr	r3, [sp, #20]
 800405e:	9500      	str	r5, [sp, #0]
 8004060:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004064:	eb0d 0403 	add.w	r4, sp, r3
 8004068:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800406c:	46a2      	mov	sl, r4
 800406e:	9b00      	ldr	r3, [sp, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f1aa 0a08 	sub.w	sl, sl, #8
 8004076:	dc69      	bgt.n	800414c <__kernel_rem_pio2+0x5ec>
 8004078:	46aa      	mov	sl, r5
 800407a:	f1ba 0f01 	cmp.w	sl, #1
 800407e:	f1a4 0408 	sub.w	r4, r4, #8
 8004082:	f300 8083 	bgt.w	800418c <__kernel_rem_pio2+0x62c>
 8004086:	9c05      	ldr	r4, [sp, #20]
 8004088:	ab48      	add	r3, sp, #288	; 0x120
 800408a:	441c      	add	r4, r3
 800408c:	2000      	movs	r0, #0
 800408e:	2100      	movs	r1, #0
 8004090:	2d01      	cmp	r5, #1
 8004092:	f300 809a 	bgt.w	80041ca <__kernel_rem_pio2+0x66a>
 8004096:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800409a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800409e:	f1bb 0f00 	cmp.w	fp, #0
 80040a2:	f040 8098 	bne.w	80041d6 <__kernel_rem_pio2+0x676>
 80040a6:	9b04      	ldr	r3, [sp, #16]
 80040a8:	e9c3 7800 	strd	r7, r8, [r3]
 80040ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80040b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80040b4:	e7c6      	b.n	8004044 <__kernel_rem_pio2+0x4e4>
 80040b6:	9e05      	ldr	r6, [sp, #20]
 80040b8:	ab48      	add	r3, sp, #288	; 0x120
 80040ba:	441e      	add	r6, r3
 80040bc:	462c      	mov	r4, r5
 80040be:	2000      	movs	r0, #0
 80040c0:	2100      	movs	r1, #0
 80040c2:	2c00      	cmp	r4, #0
 80040c4:	da33      	bge.n	800412e <__kernel_rem_pio2+0x5ce>
 80040c6:	f1bb 0f00 	cmp.w	fp, #0
 80040ca:	d036      	beq.n	800413a <__kernel_rem_pio2+0x5da>
 80040cc:	4602      	mov	r2, r0
 80040ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040d2:	9c04      	ldr	r4, [sp, #16]
 80040d4:	e9c4 2300 	strd	r2, r3, [r4]
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80040e0:	f7fc f896 	bl	8000210 <__aeabi_dsub>
 80040e4:	ae4a      	add	r6, sp, #296	; 0x128
 80040e6:	2401      	movs	r4, #1
 80040e8:	42a5      	cmp	r5, r4
 80040ea:	da29      	bge.n	8004140 <__kernel_rem_pio2+0x5e0>
 80040ec:	f1bb 0f00 	cmp.w	fp, #0
 80040f0:	d002      	beq.n	80040f8 <__kernel_rem_pio2+0x598>
 80040f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040f6:	4619      	mov	r1, r3
 80040f8:	9b04      	ldr	r3, [sp, #16]
 80040fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80040fe:	e7a1      	b.n	8004044 <__kernel_rem_pio2+0x4e4>
 8004100:	9c05      	ldr	r4, [sp, #20]
 8004102:	ab48      	add	r3, sp, #288	; 0x120
 8004104:	441c      	add	r4, r3
 8004106:	2000      	movs	r0, #0
 8004108:	2100      	movs	r1, #0
 800410a:	2d00      	cmp	r5, #0
 800410c:	da09      	bge.n	8004122 <__kernel_rem_pio2+0x5c2>
 800410e:	f1bb 0f00 	cmp.w	fp, #0
 8004112:	d002      	beq.n	800411a <__kernel_rem_pio2+0x5ba>
 8004114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004118:	4619      	mov	r1, r3
 800411a:	9b04      	ldr	r3, [sp, #16]
 800411c:	e9c3 0100 	strd	r0, r1, [r3]
 8004120:	e790      	b.n	8004044 <__kernel_rem_pio2+0x4e4>
 8004122:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004126:	f7fc f875 	bl	8000214 <__adddf3>
 800412a:	3d01      	subs	r5, #1
 800412c:	e7ed      	b.n	800410a <__kernel_rem_pio2+0x5aa>
 800412e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004132:	f7fc f86f 	bl	8000214 <__adddf3>
 8004136:	3c01      	subs	r4, #1
 8004138:	e7c3      	b.n	80040c2 <__kernel_rem_pio2+0x562>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	e7c8      	b.n	80040d2 <__kernel_rem_pio2+0x572>
 8004140:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004144:	f7fc f866 	bl	8000214 <__adddf3>
 8004148:	3401      	adds	r4, #1
 800414a:	e7cd      	b.n	80040e8 <__kernel_rem_pio2+0x588>
 800414c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004150:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004154:	9b00      	ldr	r3, [sp, #0]
 8004156:	3b01      	subs	r3, #1
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	4632      	mov	r2, r6
 800415c:	463b      	mov	r3, r7
 800415e:	4640      	mov	r0, r8
 8004160:	4649      	mov	r1, r9
 8004162:	f7fc f857 	bl	8000214 <__adddf3>
 8004166:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4640      	mov	r0, r8
 8004170:	4649      	mov	r1, r9
 8004172:	f7fc f84d 	bl	8000210 <__aeabi_dsub>
 8004176:	4632      	mov	r2, r6
 8004178:	463b      	mov	r3, r7
 800417a:	f7fc f84b 	bl	8000214 <__adddf3>
 800417e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004182:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004186:	ed8a 7b00 	vstr	d7, [sl]
 800418a:	e770      	b.n	800406e <__kernel_rem_pio2+0x50e>
 800418c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004190:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004194:	4640      	mov	r0, r8
 8004196:	4632      	mov	r2, r6
 8004198:	463b      	mov	r3, r7
 800419a:	4649      	mov	r1, r9
 800419c:	f7fc f83a 	bl	8000214 <__adddf3>
 80041a0:	e9cd 0100 	strd	r0, r1, [sp]
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4640      	mov	r0, r8
 80041aa:	4649      	mov	r1, r9
 80041ac:	f7fc f830 	bl	8000210 <__aeabi_dsub>
 80041b0:	4632      	mov	r2, r6
 80041b2:	463b      	mov	r3, r7
 80041b4:	f7fc f82e 	bl	8000214 <__adddf3>
 80041b8:	ed9d 7b00 	vldr	d7, [sp]
 80041bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80041c0:	ed84 7b00 	vstr	d7, [r4]
 80041c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041c8:	e757      	b.n	800407a <__kernel_rem_pio2+0x51a>
 80041ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80041ce:	f7fc f821 	bl	8000214 <__adddf3>
 80041d2:	3d01      	subs	r5, #1
 80041d4:	e75c      	b.n	8004090 <__kernel_rem_pio2+0x530>
 80041d6:	9b04      	ldr	r3, [sp, #16]
 80041d8:	9a04      	ldr	r2, [sp, #16]
 80041da:	601f      	str	r7, [r3, #0]
 80041dc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80041e0:	605c      	str	r4, [r3, #4]
 80041e2:	609d      	str	r5, [r3, #8]
 80041e4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80041e8:	60d3      	str	r3, [r2, #12]
 80041ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041ee:	6110      	str	r0, [r2, #16]
 80041f0:	6153      	str	r3, [r2, #20]
 80041f2:	e727      	b.n	8004044 <__kernel_rem_pio2+0x4e4>
 80041f4:	41700000 	.word	0x41700000
 80041f8:	3e700000 	.word	0x3e700000
 80041fc:	00000000 	.word	0x00000000

08004200 <scalbn>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	ec55 4b10 	vmov	r4, r5, d0
 8004206:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800420a:	4606      	mov	r6, r0
 800420c:	462b      	mov	r3, r5
 800420e:	b999      	cbnz	r1, 8004238 <scalbn+0x38>
 8004210:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004214:	4323      	orrs	r3, r4
 8004216:	d03f      	beq.n	8004298 <scalbn+0x98>
 8004218:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <scalbn+0xf0>)
 800421a:	4629      	mov	r1, r5
 800421c:	ee10 0a10 	vmov	r0, s0
 8004220:	2200      	movs	r2, #0
 8004222:	f7fc f9ad 	bl	8000580 <__aeabi_dmul>
 8004226:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <scalbn+0xf4>)
 8004228:	429e      	cmp	r6, r3
 800422a:	4604      	mov	r4, r0
 800422c:	460d      	mov	r5, r1
 800422e:	da10      	bge.n	8004252 <scalbn+0x52>
 8004230:	a327      	add	r3, pc, #156	; (adr r3, 80042d0 <scalbn+0xd0>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	e01f      	b.n	8004278 <scalbn+0x78>
 8004238:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800423c:	4291      	cmp	r1, r2
 800423e:	d10c      	bne.n	800425a <scalbn+0x5a>
 8004240:	ee10 2a10 	vmov	r2, s0
 8004244:	4620      	mov	r0, r4
 8004246:	4629      	mov	r1, r5
 8004248:	f7fb ffe4 	bl	8000214 <__adddf3>
 800424c:	4604      	mov	r4, r0
 800424e:	460d      	mov	r5, r1
 8004250:	e022      	b.n	8004298 <scalbn+0x98>
 8004252:	460b      	mov	r3, r1
 8004254:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004258:	3936      	subs	r1, #54	; 0x36
 800425a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800425e:	4296      	cmp	r6, r2
 8004260:	dd0d      	ble.n	800427e <scalbn+0x7e>
 8004262:	2d00      	cmp	r5, #0
 8004264:	a11c      	add	r1, pc, #112	; (adr r1, 80042d8 <scalbn+0xd8>)
 8004266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800426a:	da02      	bge.n	8004272 <scalbn+0x72>
 800426c:	a11c      	add	r1, pc, #112	; (adr r1, 80042e0 <scalbn+0xe0>)
 800426e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004272:	a319      	add	r3, pc, #100	; (adr r3, 80042d8 <scalbn+0xd8>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fc f982 	bl	8000580 <__aeabi_dmul>
 800427c:	e7e6      	b.n	800424c <scalbn+0x4c>
 800427e:	1872      	adds	r2, r6, r1
 8004280:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004284:	428a      	cmp	r2, r1
 8004286:	dcec      	bgt.n	8004262 <scalbn+0x62>
 8004288:	2a00      	cmp	r2, #0
 800428a:	dd08      	ble.n	800429e <scalbn+0x9e>
 800428c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004290:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004294:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004298:	ec45 4b10 	vmov	d0, r4, r5
 800429c:	bd70      	pop	{r4, r5, r6, pc}
 800429e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80042a2:	da08      	bge.n	80042b6 <scalbn+0xb6>
 80042a4:	2d00      	cmp	r5, #0
 80042a6:	a10a      	add	r1, pc, #40	; (adr r1, 80042d0 <scalbn+0xd0>)
 80042a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ac:	dac0      	bge.n	8004230 <scalbn+0x30>
 80042ae:	a10e      	add	r1, pc, #56	; (adr r1, 80042e8 <scalbn+0xe8>)
 80042b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042b4:	e7bc      	b.n	8004230 <scalbn+0x30>
 80042b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80042ba:	3236      	adds	r2, #54	; 0x36
 80042bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80042c4:	4620      	mov	r0, r4
 80042c6:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <scalbn+0xf8>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	e7d5      	b.n	8004278 <scalbn+0x78>
 80042cc:	f3af 8000 	nop.w
 80042d0:	c2f8f359 	.word	0xc2f8f359
 80042d4:	01a56e1f 	.word	0x01a56e1f
 80042d8:	8800759c 	.word	0x8800759c
 80042dc:	7e37e43c 	.word	0x7e37e43c
 80042e0:	8800759c 	.word	0x8800759c
 80042e4:	fe37e43c 	.word	0xfe37e43c
 80042e8:	c2f8f359 	.word	0xc2f8f359
 80042ec:	81a56e1f 	.word	0x81a56e1f
 80042f0:	43500000 	.word	0x43500000
 80042f4:	ffff3cb0 	.word	0xffff3cb0
 80042f8:	3c900000 	.word	0x3c900000
 80042fc:	00000000 	.word	0x00000000

08004300 <floor>:
 8004300:	ec51 0b10 	vmov	r0, r1, d0
 8004304:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800430c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004310:	2e13      	cmp	r6, #19
 8004312:	ee10 5a10 	vmov	r5, s0
 8004316:	ee10 8a10 	vmov	r8, s0
 800431a:	460c      	mov	r4, r1
 800431c:	dc31      	bgt.n	8004382 <floor+0x82>
 800431e:	2e00      	cmp	r6, #0
 8004320:	da14      	bge.n	800434c <floor+0x4c>
 8004322:	a333      	add	r3, pc, #204	; (adr r3, 80043f0 <floor+0xf0>)
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f7fb ff74 	bl	8000214 <__adddf3>
 800432c:	2200      	movs	r2, #0
 800432e:	2300      	movs	r3, #0
 8004330:	f7fc fbb6 	bl	8000aa0 <__aeabi_dcmpgt>
 8004334:	b138      	cbz	r0, 8004346 <floor+0x46>
 8004336:	2c00      	cmp	r4, #0
 8004338:	da53      	bge.n	80043e2 <floor+0xe2>
 800433a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800433e:	4325      	orrs	r5, r4
 8004340:	d052      	beq.n	80043e8 <floor+0xe8>
 8004342:	4c2d      	ldr	r4, [pc, #180]	; (80043f8 <floor+0xf8>)
 8004344:	2500      	movs	r5, #0
 8004346:	4621      	mov	r1, r4
 8004348:	4628      	mov	r0, r5
 800434a:	e024      	b.n	8004396 <floor+0x96>
 800434c:	4f2b      	ldr	r7, [pc, #172]	; (80043fc <floor+0xfc>)
 800434e:	4137      	asrs	r7, r6
 8004350:	ea01 0307 	and.w	r3, r1, r7
 8004354:	4303      	orrs	r3, r0
 8004356:	d01e      	beq.n	8004396 <floor+0x96>
 8004358:	a325      	add	r3, pc, #148	; (adr r3, 80043f0 <floor+0xf0>)
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f7fb ff59 	bl	8000214 <__adddf3>
 8004362:	2200      	movs	r2, #0
 8004364:	2300      	movs	r3, #0
 8004366:	f7fc fb9b 	bl	8000aa0 <__aeabi_dcmpgt>
 800436a:	2800      	cmp	r0, #0
 800436c:	d0eb      	beq.n	8004346 <floor+0x46>
 800436e:	2c00      	cmp	r4, #0
 8004370:	bfbe      	ittt	lt
 8004372:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004376:	4133      	asrlt	r3, r6
 8004378:	18e4      	addlt	r4, r4, r3
 800437a:	ea24 0407 	bic.w	r4, r4, r7
 800437e:	2500      	movs	r5, #0
 8004380:	e7e1      	b.n	8004346 <floor+0x46>
 8004382:	2e33      	cmp	r6, #51	; 0x33
 8004384:	dd0b      	ble.n	800439e <floor+0x9e>
 8004386:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800438a:	d104      	bne.n	8004396 <floor+0x96>
 800438c:	ee10 2a10 	vmov	r2, s0
 8004390:	460b      	mov	r3, r1
 8004392:	f7fb ff3f 	bl	8000214 <__adddf3>
 8004396:	ec41 0b10 	vmov	d0, r0, r1
 800439a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800439e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80043a2:	f04f 37ff 	mov.w	r7, #4294967295
 80043a6:	40df      	lsrs	r7, r3
 80043a8:	4238      	tst	r0, r7
 80043aa:	d0f4      	beq.n	8004396 <floor+0x96>
 80043ac:	a310      	add	r3, pc, #64	; (adr r3, 80043f0 <floor+0xf0>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fb ff2f 	bl	8000214 <__adddf3>
 80043b6:	2200      	movs	r2, #0
 80043b8:	2300      	movs	r3, #0
 80043ba:	f7fc fb71 	bl	8000aa0 <__aeabi_dcmpgt>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0c1      	beq.n	8004346 <floor+0x46>
 80043c2:	2c00      	cmp	r4, #0
 80043c4:	da0a      	bge.n	80043dc <floor+0xdc>
 80043c6:	2e14      	cmp	r6, #20
 80043c8:	d101      	bne.n	80043ce <floor+0xce>
 80043ca:	3401      	adds	r4, #1
 80043cc:	e006      	b.n	80043dc <floor+0xdc>
 80043ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80043d2:	2301      	movs	r3, #1
 80043d4:	40b3      	lsls	r3, r6
 80043d6:	441d      	add	r5, r3
 80043d8:	45a8      	cmp	r8, r5
 80043da:	d8f6      	bhi.n	80043ca <floor+0xca>
 80043dc:	ea25 0507 	bic.w	r5, r5, r7
 80043e0:	e7b1      	b.n	8004346 <floor+0x46>
 80043e2:	2500      	movs	r5, #0
 80043e4:	462c      	mov	r4, r5
 80043e6:	e7ae      	b.n	8004346 <floor+0x46>
 80043e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80043ec:	e7ab      	b.n	8004346 <floor+0x46>
 80043ee:	bf00      	nop
 80043f0:	8800759c 	.word	0x8800759c
 80043f4:	7e37e43c 	.word	0x7e37e43c
 80043f8:	bff00000 	.word	0xbff00000
 80043fc:	000fffff 	.word	0x000fffff

08004400 <_init>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr

0800440c <_fini>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr
